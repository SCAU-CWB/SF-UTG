public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = "testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final File file1 = getFile("test1.xml"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("tar", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName("avalon"); [EOL]     entry.setGroupName("excalibur"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = "testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml"; [EOL]         final File output2 = new File(dir, "bla.tar"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream("tar", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName("avalon"); [EOL]         entry2.setGroupName("excalibur"); [EOL]         entry2.setMode(0100000); ]
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile("taetest", ".tar"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), "foo.txt")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o','' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), "bar.txt").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry("dummy"); [EOL]         t.setName(new File(new File(ROOT), "baz.txt").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals("/", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = "testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final File file1 = getFile("test1.xml"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("tar", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName("avalon"); [EOL]     entry.setGroupName("excalibur"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = "testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml"; [EOL]         final File output2 = new File(dir, "bla.tar"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream("tar", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName("avalon"); [EOL]         entry2.setGroupName("excalibur"); [EOL]         entry2.setMode(0100000); ]
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = "testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, "bla.tar"); [EOL]     final File file1 = getFile("test1.xml"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("tar", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName("avalon"); [EOL]     entry.setGroupName("excalibur"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = "testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml"; [EOL]         final File output2 = new File(dir, "bla.tar"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream("tar", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName("avalon"); [EOL]         entry2.setGroupName("excalibur"); [EOL]         entry2.setMode(0100000); ]
public void testClone() { [EOL]     ZipLong s1 = new ZipLong(42); [EOL]     ZipLong s2 = (ZipLong) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1, s2); [EOL] }
public void testClone() { [EOL]     ZipLong s1 = new ZipLong(42); [EOL]     ZipLong s2 = (ZipLong) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1, s2); [EOL] }
public void testClone() { [EOL]     ZipLong s1 = new ZipLong(42); [EOL]     ZipLong s2 = (ZipLong) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1, s2); [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArUnarchive() throws Exception { [EOL]     final File output = new File(dir, "bla.ar"); [EOL]     { [EOL]         final File file1 = getFile("test1.xml"); [EOL]         final File file2 = getFile("test2.xml"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream("ar", out); [EOL]         os.putArchiveEntry(new CpioArchiveEntry("test1.xml", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new CpioArchiveEntry("test2.xml", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]         out.close(); [EOL]         out = null; [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.close(); [EOL]         out.close(); [EOL]         out = null; [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.close(); [EOL]         out.close(); [EOL]     out = null; [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.close(); [EOL]         out.close(); [EOL]     out = null; [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.close(); [EOL]     out.close(); [EOL]     out = null; [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.close(); [EOL]     out.close(); [EOL]     out = null; [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.close(); [EOL]     out = null; [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.close(); [EOL]     out = null; ]
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-winzip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testAssembleData() { [EOL]     AsiExtraField a = new AsiExtraField("test", new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0 }); [EOL]     a.setUnicodeName(new byte[] { 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0 }); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0 }); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL]     a.setCentralDirectoryExtra(new byte[] { 0x78, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0 }); [EOL]     expect = new byte[] { 0x78, (byte) 0x8E, 0x41, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0 }); [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testAssembleData() { [EOL]     AsiExtraField a = new AsiExtraField("test", new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0x10 }); [EOL]     a.setUnicodeName(new byte[] { 0x78, (byte) 0xB6, 0x41, (byte) 0xA0 }); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL]     a.setCentralDirectoryExtra(new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0x10 }); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xA0 }); [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testParse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField("test", data); [EOL]     a.parseFromLocalFileData(new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0 }, 0, 5); [EOL]     assertEquals("length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue("plain file, no extra",!a.isUnicodeExtra()); [EOL]     assertEquals("mode plain file", 040755, a.getMode()); [EOL]     assertEquals("data length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertEquals("mode plain file", 01201, a.getMode()); [EOL]     a = new AsiExtraField("test", data); [EOL]     a.parseFromLocalFileData(new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }); [EOL]     assertEquals("length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue("plain file, no extra",!a.isUnicodeExtra()); [EOL]     assertEquals("mode plain file", 01201, a.getMode()); [EOL]     assertEquals("data length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertEquals("mode plain file", 5, a.getMode()); [EOL]     a = new AsiExtraField("test", data); ]
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testParse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField("test", data); [EOL]     a.parseFromLocalFileData(new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0 }, 0, 5); [EOL]     assertEquals("length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue("plain file, no unicode",!a.isUnicode()); [EOL]     assertEquals("mode plain file", 040755, a.getMode()); [EOL]     a.setUnicodeMode(0777); [EOL]     assertEquals("data length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertEquals("mode plain file", 01201, a.getMode()); [EOL]     a.setUnicodeMode(0577); [EOL]     assertEquals("data length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertEquals("mode plain file", 577, a.getMode()); [EOL]     a = new AsiExtraField("test", data); [EOL]     a.parseFromLocalFileData(new byte[] { (byte) 0x8E, 0x01, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }); [EOL]     assertEquals("length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertEquals("mode plain file", 577, a.getMode()); [EOL]     a.setUnicodeMode(0577); [EOL]
public void testParse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField("test", data); [EOL]     a.parseFromLocalFileData(new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0 }, 0, 4); [EOL]     assertEquals("length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue("plain file, no extra",!a.isUnicodeExtra()); [EOL]     assertEquals("mode plain file", 040755, a.getMode()); [EOL]     assertEquals("data length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertEquals("mode plain file", 01201, a.getMode()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }; [EOL]     a = new AsiExtraField("test", data); [EOL]     a.parseFromLocalFileData(new byte[] { (byte) 0x8E, 0x01, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }); [EOL]     assertEquals("length plain file", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue("plain file, no extra",!a.isUnicodeExtra());
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testFallbackZipEncoding() throws IOException { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream("bzip2", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFallbackZipEncoding() throws IOException { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append("./test1.xml<?xml version=\\"1.0\\"?>\\n"); [EOL]     expected.append("<empty/>./test2.xml<?xml version=\\"1.0\\"?>\\n"); [EOL]     expected.append("<empty/>\\n"); [EOL]     CpStringInputStream in = new CpStringInputStream(new FileInputStream(getFile("bla.cpio"))); [EOL]     CpStringEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpStringEntry) in.getNextEntry())!= null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read())!= -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testAdjustToLong() { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testAdjustToLong() { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testAdjustToLong() { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testDeleteFromZip() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.zip"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         temp = File.createTempFile("test", ".zip"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testDeleteFromZip() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.zip"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         temp = File.createTempFile("test", ".zip"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testDeleteFromZip() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.zip"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         temp = File.createTempFile("test", ".zip"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testDeleteFromZip() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.zip"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         temp = File.createTempFile("test", ".zip"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry("test/"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals("first pass", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("second pass", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals("third pass", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testDeleteFromZip() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.zip"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         temp = File.createTempFile("test", ".zip"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.tar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("tar", is); [EOL]         temp = new File(dir, "bla.tar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("tar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.tar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("tar", is); [EOL]         temp = new File(dir, "bla.tar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("tar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry("testdata/test.txt"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName("avalon"); [EOL]         entry.setGroupName("excalibur"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile("bla.tar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("tar", is); [EOL]         temp = new File(dir, "bla.tar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("tar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     expected.add("testdata/test.txt"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("tar", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry("testdata/test.txt"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName("avalon"); [EOL]         entry.setGroupName("excalibur"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile("bla.tar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("tar", is); [EOL]         temp = new File(dir, "bla.tar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("tar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     expected.add("testdata/test.txt"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("tar", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile("test"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile("test"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile("test"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile("test"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getCentralDirectoryData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile("test"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }; [EOL]     b = a.getCentralDirectoryData(); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile("test"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte)'s', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals("no link", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals("no link, byte " + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile("bla.jar"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream("jar", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testDeleteFromJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.jar"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("jar", is); [EOL]         temp = new File(dir, "bla.jar"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("jar", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals("number of fields", 2, ze.length); [EOL]     assertTrue("type field 1", ze[0] instanceof AsiExtraField); [EOL]     assertEquals("mode field 1", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals("data length field 2", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail("data should be invalid"); [EOL]     } catch (Exception e) { [EOL]         assertEquals("message", "data starting at " + (4 + aLocal.length) + " is in unknown format", e.getMessage()); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCompareTo() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipHeaderId(null, null)); [EOL]     u.setValue(new byte[] { 'h', 'e', 'l', 'l', 'o','' }); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(a); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCrc(new Crc(1, 0, 1)); [EOL]     ze.setModTime(0); [EOL]     ze.setSize(6); [EOL]     CrcExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(result.length, 3); [EOL]     assertSame(result[0], a); [EOL]     assertEquals(result[1], u); [EOL]     assertEquals(result[2], u); [EOL]     assertEquals(result[3], u); [EOL]     assertEquals(result[4], u); [EOL]     assertEquals(result[5], u); [EOL] }
public void testCompareTo() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipHeaderId(null, null)); [EOL]     u.setValue(new byte[] { 'h', 'e', 'l', 'l', 'o','' }); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(a, u); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCrc(new Crc(1, 0, 1)); [EOL]     ze.setCrcId(new CrcId(1, 0)); [EOL]     Simple8BitCharChar c = new Simple8BitCharChar(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]     c.setExtra(new Simple8BitExtraField[] { u, c }); [EOL]     Simple8BitCharChar d = new Simple8BitCharChar(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]     d.setCrcId(new CrcId(1, 0)); [EOL]     d.setCrcId(new CrcId(1, 1)); [EOL]     e.setExtra(new Simple8BitExtraField[] { u, d }); [EOL]     e.setCrcId(new CrcId(1, 0)); [EOL]     f.setExtra(new Simple8BitExtraField[] { u, d }); [EOL]     GrundOfHouseData d = new GrundOfHouseData(new File(dir, "bla.txt")); [EOL]     assertEquals(0, d.getNumExtraFields()); [EOL]     d.setCrcId(new CrcId(1, 0)); [EOL]     assertEquals(1, d.getNumExtraFields()); [EOL]     e.setCrcId(new CrcId(1, 1)); [EOL]     assert
public void testCompareTo() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipHeaderId(null, null)); [EOL]     u.setValue(new byte[] { 'h', 'e', 'l', 'l', 'o','' }); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(a); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCrc(new Crc(1, 0, 1)); [EOL]     ze.setCrcId(new CrcId(1, 0)); [EOL]     CrcExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(0, result.length); [EOL]     ze.setCrcId(new CrcId(0, 1)); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(1, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new CrcId(1, 0), result[1].getHeaderId()); [EOL]     assertEquals(new CrcId(0, 1), result[1].getValue()); [EOL]     ze.setCrcId(new CrcId(1, 0)); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(0, result.length); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive("zip"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile("test", ".zip"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("bla"); [EOL]         final File file1 = getFile("test.txt"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry("bla/test.txt"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("testdata/test1.xml"); [EOL]     expected.add("testdata/test2.xml"); [EOL]     expected.add("test/test3.xml"); [EOL]     expected.add("test.txt"); [EOL]     expected.add("something/bla"); [EOL]     expected.add("bla/test.txt"); [EOL]     expected.add("test with spaces.txt"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testRead7ZipArchive() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete("test2.xml"); [EOL]         final File input = getFile("bla.zip"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream("zip", is); [EOL]         temp = new File(dir, "bla.zip"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream("zip", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out!= null) [EOL]             out.close(); [EOL]         if (ais!= null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add("test1.xml"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource("/utf8-7zip-test.zip"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.ar").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.tar").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.zip").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.jar").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource("bla.cpio").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile("bla.txt.bz2"); [EOL]     final File output = new File(dir, "bla.txt"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream("bzip2", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testJarMarker() throws Exception { [EOL]     File testArchive = File.createTempFile("jar-aostest", ".jar"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry("foo/")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry("bar/")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry("foo/"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry("bar/"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out!= null) { [EOL]             try { [EOL]             out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testJarMarker() throws Exception { [EOL]     File testArchive = File.createTempFile("jar-aostest", ".jar"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry("foo/")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry("bar/")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry("foo/"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry("bar/"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out!= null) { [EOL]             try { [EOL]             out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testJarMarker() throws Exception { [EOL]     File testArchive = File.createTempFile("jar-aostest", ".jar"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry("foo/")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry("bar/")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry("foo/"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry("bar/"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out!= null) { [EOL]             try { [EOL]             out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testJarMarker() throws Exception { [EOL]     File testArchive = File.createTempFile("jar-aostest", ".jar"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry("foo/")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry("bar/")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry("foo/"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry("bar/"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out!= null) { [EOL]             try { [EOL]             out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
