public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertNull(resultNode); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("root", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid1", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertNull(resultNode); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("root", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid1", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testAbstract368() throws Exception { [EOL]     AbstractNode parent = new ConcreteNode("p"); [EOL]     AbstractNode child = new ConcreteNode("c"); [EOL]     parent.next = child; [EOL]     child.prev = parent; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(parent); [EOL]     AbstractNode root = mapper.readValue(json, AbstractNode.class); [EOL]     assertEquals(ConcreteNode.class, root.getClass()); [EOL]     assertEquals("p", root.id); [EOL]     assertNull(root.prev); [EOL]     AbstractNode leaf = root.next; [EOL]     assertNotNull(leaf); [EOL]     assertEquals("c", leaf.id); [EOL]     assertSame(root, leaf.prev); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testHierarchicConfigSerialize() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ConfigRoot("Fred", 25)); [EOL]     assertEquals("{\"general.names.name\":\"Fred\",\"misc.value\":25}", json); [EOL] }
public void testHierarchicConfigSerialize() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ConfigRoot("Fred", 25)); [EOL]     assertEquals("{\"general.names.name\":\"Fred\",\"misc.value\":25}", json); [EOL] }
public void testHierarchicConfigSerialize() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ConfigRoot("Fred", 25)); [EOL]     assertEquals("{\"general.names.name\":\"Fred\",\"misc.value\":25}", json); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIssue329() throws Exception { [EOL]     ArrayList<Animal> animals = new ArrayList<Animal>(); [EOL]     animals.add(new Dog("Spot")); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructParametricType(Iterator.class, Animal.class); [EOL]     String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator()); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("No polymorphic type retained, should be; JSON = '" + json + "'"); [EOL]     } [EOL] }
public void testIssue329() throws Exception { [EOL]     ArrayList<Animal> animals = new ArrayList<Animal>(); [EOL]     animals.add(new Dog("Spot")); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructParametricType(Iterator.class, Animal.class); [EOL]     String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator()); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("No polymorphic type retained, should be; JSON = '" + json + "'"); [EOL]     } [EOL] }
public void testIssue329() throws Exception { [EOL]     ArrayList<Animal> animals = new ArrayList<Animal>(); [EOL]     animals.add(new Dog("Spot")); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructParametricType(Iterator.class, Animal.class); [EOL]     String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator()); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("No polymorphic type retained, should be; JSON = '" + json + "'"); [EOL]     } [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializedAsMapWithPropertyAnnotations2() throws IOException { [EOL]     MapWrapperWithSerializer input = new MapWrapperWithSerializer("foo", "b"); [EOL]     assertEquals("{\"values\":{\"key foo\":\"value b\"}}", MAPPER.writeValueAsString(input)); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testCustomNoEmpty() throws Exception { [EOL]     assertEquals("{\"value\":123}", mapper.writeValueAsString(new NonZeroWrapper(123))); [EOL]     assertEquals("{}", mapper.writeValueAsString(new NonZeroWrapper(0))); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testCustomNoEmpty() throws Exception { [EOL]     assertEquals("{\"value\":123}", mapper.writeValueAsString(new NonZeroWrapper(123))); [EOL]     assertEquals("{}", mapper.writeValueAsString(new NonZeroWrapper(0))); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testSerializedAsMapWithClassAnnotations() throws IOException { [EOL]     SimpleValueMap map = new SimpleValueMap(); [EOL]     map.put(new SimpleKey("x"), new ActualValue("y")); [EOL]     assertEquals("{\"toString:x\":{\"value\":\"y\"}}", MAPPER.writeValueAsString(map)); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testSerializedAsMapWithClassAnnotations() throws IOException { [EOL]     SimpleValueMap map = new SimpleValueMap(); [EOL]     map.put(new SimpleKey("x"), new ActualValue("y")); [EOL]     assertEquals("{\"toString:x\":{\"value\":\"y\"}}", MAPPER.writeValueAsString(map)); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testPropertyAnnotationSimple() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointWrapper(3, 4)); [EOL]     assertEquals("{\"value\":[3,4]}", json); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testTypeIdFromArray() throws Exception { [EOL]     assertEquals("[\"SomeType\",{\"a\":3}]", mapper.writeValueAsString(new TypeIdFromFieldArray())); [EOL] }
public void testTypeIdFromArray() throws Exception { [EOL]     assertEquals("[\"SomeType\",{\"a\":3}]", mapper.writeValueAsString(new TypeIdFromFieldArray())); [EOL] }
public void testCustomPropertyForClass() throws Exception { [EOL]     IdentifiableWithProp src = new IdentifiableWithProp(123, -19); [EOL]     src.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP, json); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testIssue92() throws Exception { [EOL]     assertEquals("{\"_id\":\"abc\"}", MAPPER.writeValueAsString(new Bean92())); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testArrayTypingNested() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS); [EOL]     ArrayBean bean = new ArrayBean(new String[0][0]); [EOL]     String json = m.writeValueAsString(bean); [EOL]     ArrayBean result = m.readValue(json, ArrayBean.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(String[][].class, result.values.getClass()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] }
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] }
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] }
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] }
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] }
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] }
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] }
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] }
public void testSimpleAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleFieldBean2 bean = m.readValue("{ \"values\" : [ \"x\", \"y\" ] }", SimpleFieldBean2.class); [EOL]     String[] values = bean.values; [EOL]     assertNotNull(values); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals("x", values[0]); [EOL]     assertEquals("y", values[1]); [EOL] }
public void testPropertyAnnotationSimple() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointWrapper(3, 4)); [EOL]     assertEquals("{\"value\":[3,4]}", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testPropertyAnnotationArrayLC() throws Exception { [EOL]     LowerCaseTextArray texts = objectReader(LowerCaseTextArray.class).readValue("{\"texts\":[\"ABC\"]}"); [EOL]     assertNotNull(texts); [EOL]     assertNotNull(texts.texts); [EOL]     assertEquals(1, texts.texts.length); [EOL]     assertEquals("abc", texts.texts[0]); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testTypeIdResolver() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("foobar")); [EOL]     String json = mapper.writeValueAsString(new TypeIdBeanWrapper(new TypeIdBean(123))); [EOL]     assertEquals("{\"bean\":[\"!!!\",{\"x\":123}]}", json); [EOL]     TypeIdBeanWrapper result = mapper.readValue(json, TypeIdBeanWrapper.class); [EOL]     TypeIdBean bean = result.bean; [EOL]     assertEquals(123, bean.x); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testImproperExternalIdSerialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("{\"extType\":\"funk\",\"i\":3}", mapper.writeValueAsString(new FunkyExternalBean())); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testDeserializationWithArrayOfSize2() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("[\"a\", \"b\"]"); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b"), ((MyInter) inter).blah); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(null, mapper.readValue(quote("en"), Locale.class)); [EOL]     assertEquals(null, mapper.readValue(quote("es_ES"), Locale.class)); [EOL]     assertEquals(null, mapper.readValue(quote("FI_savo"), Locale.class)); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(null, mapper.readValue(quote("en"), Locale.class)); [EOL]     assertEquals(null, mapper.readValue(quote("es_ES"), Locale.class)); [EOL]     assertEquals(null, mapper.readValue(quote("FI_savo"), Locale.class)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testUnknownHandlingDefault() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Unrecognized field \"foo\""); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testMapError() throws Exception { [EOL]     try { [EOL]         Object result = MAPPER.readValue("[ 1, 2 ]", new TypeReference<Map<String, String>>() { [EOL]         }); [EOL]         fail("Expected an exception, but got result value: " + result); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "START_ARRAY"); [EOL]     } [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingDefault() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Unrecognized field \"foo\""); [EOL]     } [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testParse() { [EOL]     Date d = df.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = df.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = df.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = df.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = df.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = df.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testParse() { [EOL]     Date d = df.parse("2007-08-13T19:51:23.789Z"); [EOL]     assertEquals(date, d); [EOL]     d = df.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(dateZeroMillis, d); [EOL]     d = df.parse("2007-08-13T21:51:23.789+02:00"); [EOL]     assertEquals(date, d); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("abc:")); [EOL]     MyMap map = mapper.readValue("{\"a\":\"b\"}", MyMap.class); [EOL]     assertEquals("{\"KEY\":\"b\"}", mapper.writeValueAsString(map)); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testClass() throws IOException { [EOL]     assertEquals(quote("java.lang.String"), MAPPER.writeValueAsString(String.class)); [EOL]     assertEquals(quote("int"), MAPPER.writeValueAsString(Integer.TYPE)); [EOL]     assertEquals(quote("boolean"), MAPPER.writeValueAsString(Boolean.TYPE)); [EOL]     assertEquals(quote("void"), MAPPER.writeValueAsString(Void.TYPE)); [EOL] }
public void testClass() throws IOException { [EOL]     assertEquals(quote("java.lang.String"), MAPPER.writeValueAsString(String.class)); [EOL]     assertEquals(quote("int"), MAPPER.writeValueAsString(Integer.TYPE)); [EOL]     assertEquals(quote("boolean"), MAPPER.writeValueAsString(Boolean.TYPE)); [EOL]     assertEquals(quote("void"), MAPPER.writeValueAsString(Void.TYPE)); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInList() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualListBean beans = new ContextualListBean("abc"); [EOL]     assertEquals("{\"beans\":[\"list->abc\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIssue877() throws Exception { [EOL]     BaseInterfaceImpl one = new BaseInterfaceImpl(); [EOL]     BaseInterfaceImpl two = new BaseInterfaceImpl(); [EOL]     one.addInstance(two); [EOL]     two.addInstance(one); [EOL]     ListWrapper<BaseInterfaceImpl> myList = new ListWrapper<BaseInterfaceImpl>(); [EOL]     myList.add(one); [EOL]     myList.add(two); [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, "@class"); [EOL]     String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList); [EOL]     ListWrapper<BaseInterfaceImpl> result; [EOL]     result = om.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     System.out.println("deserialised list size = " + result.size()); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testIssue877() throws Exception { [EOL]     BaseInterfaceImpl one = new BaseInterfaceImpl(); [EOL]     BaseInterfaceImpl two = new BaseInterfaceImpl(); [EOL]     one.addInstance(two); [EOL]     two.addInstance(one); [EOL]     ListWrapper<BaseInterfaceImpl> myList = new ListWrapper<BaseInterfaceImpl>(); [EOL]     myList.add(one); [EOL]     myList.add(two); [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, "@class"); [EOL]     String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList); [EOL]     ListWrapper<BaseInterfaceImpl> result; [EOL]     result = om.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     System.out.println("deserialised list size = " + result.size()); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testIssue877() throws Exception { [EOL]     BaseInterfaceImpl one = new BaseInterfaceImpl(); [EOL]     BaseInterfaceImpl two = new BaseInterfaceImpl(); [EOL]     one.addInstance(two); [EOL]     two.addInstance(one); [EOL]     ListWrapper<BaseInterfaceImpl> myList = new ListWrapper<BaseInterfaceImpl>(); [EOL]     myList.add(one); [EOL]     myList.add(two); [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, "@class"); [EOL]     String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList); [EOL]     ListWrapper<BaseInterfaceImpl> result; [EOL]     result = om.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     System.out.println("deserialised list size = " + result.size()); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testFailureDueToDupField() throws Exception { [EOL]     try { [EOL]         writeAndMap(MAPPER, new DupFieldBean2()); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple fields representing"); [EOL]     } [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testFactoryCreatorWithMixin() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(CreatorBean.class, MixIn.class); [EOL]     CreatorBean bean = m.readValue("{ \"a\" : \"xyz\", \"x\" : 12 }", CreatorBean.class); [EOL]     assertEquals(11, bean.x); [EOL]     assertEquals("factory:xyz", bean.a); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testDouble() { [EOL]     DoubleNode n = DoubleNode.valueOf(0.25); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.DOUBLE, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(DoubleNode.valueOf(4.5), 4, 4.5); [EOL]     assertTrue(DoubleNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(DoubleNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimpleViaObjectMapper() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.put("number", 15); [EOL]     n.put("string", "abc"); [EOL]     ObjectNode n2 = n.putObject("ob"); [EOL]     n2.putArray("arr"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("abc", result.get("string")); [EOL]     assertEquals(Integer.valueOf(15), result.get("number")); [EOL]     Map<String, Object> ob = (Map<String, Object>) result.get("ob"); [EOL]     assertEquals(1, ob.size()); [EOL]     List<Object> list = (List<Object>) ob.get("arr"); [EOL]     assertEquals(0, list.size()); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimpleViaObjectMapper() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.put("number", 15); [EOL]     n.put("string", "abc"); [EOL]     ObjectNode n2 = n.putObject("ob"); [EOL]     n2.putArray("arr"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("abc", result.get("string")); [EOL]     assertEquals(Integer.valueOf(15), result.get("number")); [EOL]     Map<String, Object> ob = (Map<String, Object>) result.get("ob"); [EOL]     assertEquals(1, ob.size()); [EOL]     List<Object> list = (List<Object>) ob.get("arr"); [EOL]     assertEquals(0, list.size()); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     BigDecimal value = new BigDecimal("0.1"); [EOL]     JsonNode result = DecimalNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, DecimalNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, DecimalNode.valueOf(value)); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     BigDecimal value = new BigDecimal("0.1"); [EOL]     JsonNode result = DecimalNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, DecimalNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, DecimalNode.valueOf(value)); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     BigDecimal value = new BigDecimal("0.1"); [EOL]     JsonNode result = DecimalNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, DecimalNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, DecimalNode.valueOf(value)); [EOL] }
public void testBasics() { [EOL]     ObjectNode n = new ObjectNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fields().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("a")); [EOL]     assertTrue(n.path("a").isMissingNode()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.set("a", text); [EOL]     assertEquals(1, n.size()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertTrue(n.fields().hasNext()); [EOL]     assertTrue(n.fieldNames().hasNext()); [EOL]     assertSame(text, n.get("a")); [EOL]     assertSame(text, n.path("a")); [EOL]     assertNull(n.get("b")); [EOL]     assertNull(n.get(0)); [EOL]     assertFalse(n.has(0)); [EOL]     assertFalse(n.hasNonNull(0)); [EOL]     assertTrue(n.has("a")); [EOL]     assertTrue(n.hasNonNull("a")); [EOL]     assertFalse(n.has("b")); [EOL]     assertFalse(n.hasNonNull("b")); [EOL]     ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance); [EOL]     n2.put("b", 13); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.setAll(n2); [EOL]     assertEquals(2, n.size()); [EOL]     n.set("null", (JsonNode) null); [EOL]     assertEquals(3, n.size()); [EOL]     assertTrue(n.has("null")); [EOL]     assertFalse(n.hasNonNull("null")); [EOL]     n.put("null", "notReallNull"); [EOL]     assertEquals(3, n.size()); [EOL]
public void testBasics() { [EOL]     ObjectNode n = new ObjectNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fields().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("a")); [EOL]     assertTrue(n.path("a").isMissingNode()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.set("a", text); [EOL]     assertEquals(1, n.size()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertTrue(n.fields().hasNext()); [EOL]     assertTrue(n.fieldNames().hasNext()); [EOL]     assertSame(text, n.get("a")); [EOL]     assertSame(text, n.path("a")); [EOL]     assertNull(n.get("b")); [EOL]     assertNull(n.get(0)); [EOL]     assertFalse(n.has(0)); [EOL]     assertFalse(n.hasNonNull(0)); [EOL]     assertTrue(n.has("a")); [EOL]     assertTrue(n.hasNonNull("a")); [EOL]     assertFalse(n.has("b")); [EOL]     assertFalse(n.hasNonNull("b")); [EOL]     ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance); [EOL]     n2.put("b", 13); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.setAll(n2); [EOL]     assertEquals(2, n.size()); [EOL]     n.set("null", (JsonNode) null); [EOL]     assertEquals(3, n.size()); [EOL]     assertTrue(n.has("null")); [EOL]     assertFalse(n.hasNonNull("null")); [EOL]     n.put("null", "notReallNull"); [EOL]     assertEquals(3, n.size()); [EOL]
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testLongWrapper() throws Exception { [EOL]     long value = 12345678L << 32; [EOL]     LongBean result = MAPPER.readValue(String.valueOf(value), LongBean.class); [EOL]     assertEquals(value, result._value); [EOL] }
public void testFloat() { [EOL]     assertEquals(Float.valueOf(0.25f), ClassUtil.canBeABeanType(Float.class)); [EOL]     assertEquals(Integer.valueOf(-3), ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals(Long.valueOf(77), ClassUtil.canBeABeanType(Long.class)); [EOL]     assertEquals(Float.valueOf(0.25f), ClassUtil.canBeABeanType(Float.class)); [EOL] }
public void testDoubleWrapper() throws Exception { [EOL]     double[] result = ClassUtil.findClass(Double.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals(Double.valueOf(3.0), result[0]); [EOL]     result = ClassUtil.findClass(Integer.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals(Integer.valueOf(3), result[0]); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testCharArray() throws Exception { [EOL]     final String TEST_STR = "Let's just test it? Ok!"; [EOL]     char[] result = MAPPER.readValue("\"" + TEST_STR + "\"", char[].class); [EOL]     assertEquals(TEST_STR, new String(result)); [EOL]     result = MAPPER.readValue("[\"a\",\"b\",\"c\"]", char[].class); [EOL]     assertEquals("abc", new String(result)); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testGettersWithoutSetters() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     GettersWithoutSetters bean = new GettersWithoutSetters(123); [EOL]     assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)); [EOL]     assertEquals("{\"a\":3,\"b\":4,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL]     m = new ObjectMapper(); [EOL]     m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS); [EOL]     assertEquals("{\"a\":3,\"c\":5,\"d\":6}", m.writeValueAsString(bean)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.getRootCause(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testExceptionHelpers() { [EOL]     RuntimeException e = new RuntimeException("test"); [EOL]     RuntimeException wrapper = new RuntimeException(e); [EOL]     assertSame(e, ClassUtil.findExceptionAsIAE(wrapper)); [EOL]     try { [EOL]         ClassUtil.throwAsIAE(e); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL]     try { [EOL]         ClassUtil.unwrapAndThrowAsIAE(wrapper); [EOL]         fail("Shouldn't get this far"); [EOL]     } catch (RuntimeException e2) { [EOL]         assertSame(e, e2); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWrapperClass() { [EOL]     assertEquals(Boolean.TRUE, ClassUtil.wrap(Boolean.class).value); [EOL]     assertEquals(Integer.valueOf(-3), ClassUtil.wrap(Integer.class).value); [EOL]     assertEquals(Long.valueOf(77), ClassUtil.wrap(Long.class).value); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, ClassUtil.wrap(Ints).value); [EOL] }
public void testWrapperClass() { [EOL]     assertEquals(Boolean.TRUE, ClassUtil.canBeABeanType(Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals(Long.valueOf(77), ClassUtil.canBeABeanType(Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, ClassUtil.canBeABeanType(Integer[].class)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWrapperClass() { [EOL]     assertEquals(Boolean.TRUE, ClassUtil.canBeABeanType(Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals(Long.valueOf(77), ClassUtil.canBeABeanType(Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, ClassUtil.canBeABeanType(Ints)); [EOL] }
public void testWrapperClass() { [EOL]     assertEquals(Long.class, ClassUtil.wrap(Long.class).getRawClass()); [EOL]     assertEquals(Integer.class, ClassUtil.wrap(Integer.class).getRawClass()); [EOL]     assertEquals(Boolean.class, ClassUtil.wrap(Boolean.class).getRawClass()); [EOL]     assertEquals(Long.class, ClassUtil.wrap(Long.class).getRawClass()); [EOL] }
public void testAbstract368() throws Exception { [EOL]     AbstractNode parent = new ConcreteNode("p"); [EOL]     AbstractNode child = new ConcreteNode("c"); [EOL]     parent.next = child; [EOL]     child.prev = parent; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(parent); [EOL]     AbstractNode root = mapper.readValue(json, AbstractNode.class); [EOL]     assertEquals(ConcreteNode.class, root.getClass()); [EOL]     assertEquals("p", root.id); [EOL]     assertNull(root.prev); [EOL]     AbstractNode leaf = root.next; [EOL]     assertNotNull(leaf); [EOL]     assertEquals("c", leaf.id); [EOL]     assertSame(root, leaf.prev); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testCanBeABeanType() { [EOL]     assertEquals(Boolean.TRUE, ClassUtil.canBeABeanType(Boolean.class)); [EOL]     assertEquals(Integer.valueOf(-3), ClassUtil.canBeABeanType(Integer.class)); [EOL]     assertEquals(Long.valueOf(77), ClassUtil.canBeABeanType(Long.class)); [EOL]     int[] ints = { 1, 2, 3 }; [EOL]     List<Integer> Ints = new ArrayList<Integer>(); [EOL]     Ints.add(1); [EOL]     Ints.add(2); [EOL]     Ints.add(3); [EOL]     assertArrayEquals(ints, ClassUtil.canBeABeanType(Integer[].class)); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     assertTrue(output[0] instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) output[0]; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     assertEquals(1, map.values.get(0).x); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
public void testDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testWithFactoryAndDelegate() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Fygar")); [EOL]     FactoryBean711 bean = null; [EOL]     try { [EOL]         bean = mapper.readValue("38", FactoryBean711.class); [EOL]     } catch (JsonMappingException e) { [EOL]         fail("Did not expect problems, got: " + e.getMessage()); [EOL]     } [EOL]     assertEquals(38, bean.age); [EOL]     assertEquals("Fygar", bean.name1); [EOL]     assertEquals("Fygar", bean.name2); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     assertEquals(1, map.values.get(0).x); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     assertEquals(1, map.values.get(0).x); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     assertEquals(1, map.values.get(0).x); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(null, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(null, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSimpleArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(null, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = mapper.readValue("{\"b\":\"2\"}", Bean.class); [EOL]     assertEquals("2", bean.b); [EOL]     assertEquals("a", bean.a); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
public void testSimpleInterfaceSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new BaseSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1())); [EOL]     assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2())); [EOL] }
public void testSimpleInterfaceSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new BaseSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1())); [EOL]     assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2())); [EOL] }
public void testSimpleInterfaceSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new BaseSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1())); [EOL]     assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2())); [EOL] }
public void testSimpleInterfaceSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new BaseSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1())); [EOL]     assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2())); [EOL] }
public void testSimpleInterfaceSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new BaseSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1())); [EOL]     assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testSimpleInterfaceSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new BaseSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1())); [EOL]     assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2())); [EOL] }
public void testSimpleInterfaceSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new BaseSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1())); [EOL]     assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(new StdDelegatingSerializer(Immutable.class, new StdConverter<Immutable, Map<String, Integer>>() { [EOL]  [EOL]         @Override [EOL]         public Map<String, Integer> convert(Immutable value) { [EOL]             HashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]             map.put("x", value.x()); [EOL]             map.put("y", value.y()); [EOL]             return map; [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"x\":3,\"y\":7}", mapper.writeValueAsString(new Immutable())); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testCustomLists() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); [EOL]     final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; [EOL]     module.addSerializer(Collection.class, new JsonSerializer<Collection>() { [EOL]  [EOL]         @Override [EOL]         public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { [EOL]             if (value.size()!= 0) { [EOL]                 collectionSerializer.serialize(value, jgen, provider); [EOL]             } else { [EOL]                 jgen.writeNull(); [EOL]             } [EOL]         } [EOL]     }); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("null", mapper.writeValueAsString(new ArrayList<Object>())); [EOL] }
public void testSimpleInterfaceSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new BaseSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1())); [EOL]     assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2())); [EOL] }
public void testCatchAndRethrow() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test-exceptions", Version.unknownVersion()); [EOL]     module.addSerializer(Bean.class, new SerializerWithErrors()); [EOL]     mapper.registerModule(module); [EOL]     try { [EOL]         StringWriter sw = new StringWriter(); [EOL]         Bean[] b = { new Bean() }; [EOL]         List<Bean[]> l = new ArrayList<Bean[]>(); [EOL]         l.add(b); [EOL]         mapper.writeValue(sw, l); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "test string"); [EOL]         Throwable root = e.getCause(); [EOL]         assertNotNull(root); [EOL]         if (!(root instanceof IllegalArgumentException)) { [EOL]             fail("Wrapped exception not IAE, but " + root.getClass()); [EOL]         } [EOL]     } [EOL] }
public void testCatchAndRethrow() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test-exceptions", Version.unknownVersion()); [EOL]     module.addSerializer(Bean.class, new SerializerWithErrors()); [EOL]     mapper.registerModule(module); [EOL]     try { [EOL]         StringWriter sw = new StringWriter(); [EOL]         Bean[] b = { new Bean() }; [EOL]         List<Bean[]> l = new ArrayList<Bean[]>(); [EOL]         l.add(b); [EOL]         mapper.writeValue(sw, l); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "test string"); [EOL]         Throwable root = e.getCause(); [EOL]         assertNotNull(root); [EOL]         if (!(root instanceof IllegalArgumentException)) { [EOL]             fail("Wrapped exception not IAE, but " + root.getClass()); [EOL]         } [EOL]     } [EOL] }
public void testCatchAndRethrow() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test-exceptions", Version.unknownVersion()); [EOL]     module.addSerializer(Bean.class, new SerializerWithErrors()); [EOL]     mapper.registerModule(module); [EOL]     try { [EOL]         StringWriter sw = new StringWriter(); [EOL]         Bean[] b = { new Bean() }; [EOL]         List<Bean[]> l = new ArrayList<Bean[]>(); [EOL]         l.add(b); [EOL]         mapper.writeValue(sw, l); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, "test string"); [EOL]         Throwable root = e.getCause(); [EOL]         assertNotNull(root); [EOL]         if (!(root instanceof IllegalArgumentException)) { [EOL]             fail("Wrapped exception not IAE, but " + root.getClass()); [EOL]         } [EOL]     } [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testSimpleDeserWithForwardRefs() throws Exception { [EOL]     IdWrapper result = mapper.readValue("{\"node\":{\"value\":7,\"next\":{\"node\":1}, \"@id\":1}}", IdWrapper.class); [EOL]     assertEquals(7, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL] }
public void testSimpleDeserWithForwardRefs() throws Exception { [EOL]     IdWrapper result = mapper.readValue("{\"node\":{\"value\":7,\"next\":{\"node\":1}, \"@id\":1}}", IdWrapper.class); [EOL]     assertEquals(7, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL] }
public void testSimple() throws Exception { [EOL]     IdWrapper result = mapper.readValue("{\"node\":{\"value\":7,\"next\":{\"node\":1}, \"@id\":1}}", IdWrapper.class); [EOL]     assertEquals(7, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL] }
public void testSimple() throws Exception { [EOL]     IdWrapper result = mapper.readValue("{\"node\":{\"value\":7,\"next\":{\"node\":1}, \"@id\":1}}", IdWrapper.class); [EOL]     assertEquals(7, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL] }
public void testSimple() throws Exception { [EOL]     IdWrapper result = mapper.readValue("{\"node\":{\"value\":7,\"next\":{\"node\":1}, \"@id\":1}}", IdWrapper.class); [EOL]     assertEquals(7, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testFactories() { [EOL]     assertNotNull(StdDateFormat.getBlueprintISO8601Format()); [EOL]     assertNotNull(StdDateFormat.getBlueprintRFC1123Format()); [EOL]     TimeZone tz = TimeZone.getTimeZone("GMT"); [EOL]     assertNotNull(StdDateFormat.getISO8601Format(tz)); [EOL]     assertNotNull(StdDateFormat.getRFC1123Format(tz)); [EOL] }
public void testFactories() { [EOL]     assertNotNull(StdDateFormat.getBlueprintISO8601Format()); [EOL]     assertNotNull(StdDateFormat.getBlueprintRFC1123Format()); [EOL]     TimeZone tz = TimeZone.getTimeZone("GMT"); [EOL]     assertNotNull(StdDateFormat.getISO8601Format(tz)); [EOL]     assertNotNull(StdDateFormat.getRFC1123Format(tz)); [EOL] }
public void testFactories() { [EOL]     assertNotNull(StdDateFormat.getBlueprintISO8601Format()); [EOL]     assertNotNull(StdDateFormat.getBlueprintRFC1123Format()); [EOL]     TimeZone tz = TimeZone.getTimeZone("GMT"); [EOL]     assertNotNull(StdDateFormat.getISO8601Format(tz)); [EOL]     assertNotNull(StdDateFormat.getRFC1123Format(tz)); [EOL] }
public void testFactories() { [EOL]     assertNotNull(StdDateFormat.getBlueprintISO8601Format()); [EOL]     assertNotNull(StdDateFormat.getBlueprintRFC1123Format()); [EOL]     TimeZone tz = TimeZone.getTimeZone("GMT"); [EOL]     assertNotNull(StdDateFormat.getISO8601Format(tz)); [EOL]     assertNotNull(StdDateFormat.getRFC1123Format(tz)); [EOL] }
public void testFactories() { [EOL]     assertNotNull(StdDateFormat.getBlueprintISO8601Format()); [EOL]     assertNotNull(StdDateFormat.getBlueprintRFC1123Format()); [EOL]     TimeZone tz = TimeZone.getTimeZone("GMT"); [EOL]     assertNotNull(StdDateFormat.getISO8601Format(tz)); [EOL]     assertNotNull(StdDateFormat.getRFC1123Format(tz)); [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testInvalid() { [EOL]     StdDateFormat std = new StdDateFormat(); [EOL]     try { [EOL]         std.parse("foobar"); [EOL]     } catch (java.text.ParseException e) { [EOL]         verifyException(e, "Can not parse"); [EOL]     } [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testDateISO8601() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); [EOL]     String json = mapper.writeValueAsString(new Date(0L)); [EOL]     assertEquals("\"1970-01-01T00:00:00.000+0000\"", json); [EOL] }
public void testDateUtilISO8601() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); [EOL]     String json = mapper.writeValueAsString(new Date(0L)); [EOL]     assertEquals("\"1970-01-01T00:00:00.000+0000\"", json); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testAll() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testMultipleFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testMultipleFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSimpleInclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.filterOutAllExcept("a")); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.setFilters(prov); [EOL]     assertEquals("{\"a\":\"a\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testClassAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"value\":\"Voila->xyz\"}", mapper.writeValueAsString(new BeanWithClassConfig("xyz"))); [EOL] }
public void testClassAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     assertEquals("{\"value\":\"Voila->xyz\"}", mapper.writeValueAsString(new BeanWithClassConfig("xyz"))); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testArrayOfRefs() throws Exception { [EOL]     NodeArray root = new NodeArray(); [EOL]     ArrayNode node1 = new ArrayNode("a"); [EOL]     ArrayNode node2 = new ArrayNode("b"); [EOL]     root.nodes = new ArrayNode[] { node1, node2 }; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeArray result = mapper.readValue(json, NodeArray.class); [EOL]     ArrayNode[] kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.length); [EOL]     assertEquals("a", kids[0].name); [EOL]     assertEquals("b", kids[1].name); [EOL]     assertSame(result, kids[0].parent); [EOL]     assertSame(result, kids[1].parent); [EOL] }
public void testArrayOfRefs() throws Exception { [EOL]     NodeArray root = new NodeArray(); [EOL]     ArrayNode node1 = new ArrayNode("a"); [EOL]     ArrayNode node2 = new ArrayNode("b"); [EOL]     root.nodes = new ArrayNode[] { node1, node2 }; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeArray result = mapper.readValue(json, NodeArray.class); [EOL]     ArrayNode[] kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.length); [EOL]     assertEquals("a", kids[0].name); [EOL]     assertEquals("b", kids[1].name); [EOL]     assertSame(result, kids[0].parent); [EOL]     assertSame(result, kids[1].parent); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testBrokenConstructor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"x\" : 42 }", BrokenBean.class); [EOL]     } catch (JsonMappingException je) { [EOL]         verifyException(je, "has no property name"); [EOL]     } [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testWithExternalType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(DefaultTyping.NON_FINAL); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithAnon()); [EOL]     ExternalBeanWithAnon result = mapper.readValue(json, ExternalBeanWithAnon.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof ExternalBeanWithAnon); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testTypeIdFromArray() throws Exception { [EOL]     assertEquals("[\"SomeType\",{\"a\":3}]", mapper.writeValueAsString(new TypeIdFromFieldArray())); [EOL] }
public void testTypeIdFromArray() throws Exception { [EOL]     assertEquals("[\"SomeType\",{\"a\":3}]", mapper.writeValueAsString(new TypeIdFromFieldArray())); [EOL] }
public void testTypeIdFromArray() throws Exception { [EOL]     assertEquals("[\"SomeType\",{\"a\":3}]", mapper.writeValueAsString(new TypeIdFromFieldArray())); [EOL] }
public void testTypeIdFromArray() throws Exception { [EOL]     assertEquals("[\"SomeType\",{\"a\":3}]", mapper.writeValueAsString(new TypeIdFromFieldArray())); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(new Locale("en"), mapper.readValue(quote("en"), Locale.class)); [EOL]     assertEquals(new Locale("es", "ES"), mapper.readValue(quote("es_ES"), Locale.class)); [EOL]     assertEquals(new Locale("FI", "fi", "savo"), mapper.readValue(quote("fi_FI_savo"), Locale.class)); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.readValue(json, Bean.class); [EOL]     assertNotNull(bean); [EOL]     json = mapper.writeValueAsString(new RootBeanWithEmpty()); [EOL]     assertEquals("{\"RootBeanWithEmpty\":{\"a\":2}}", json); [EOL]     RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class); [EOL]     assertNotNull(bean2); [EOL]     assertEquals(2, bean2.a); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"bean\":{\"a\":3}}", json); [EOL]     Bean bean = mapper.readValue(json, Bean.class); [EOL]     assertNotNull(bean); [EOL]     json = mapper.writeValueAsString(new RootBeanWithEmpty()); [EOL]     assertEquals("{\"RootBeanWithEmpty\":{\"a\":2}}", json); [EOL]     RootBeanWithEmpty bean2 = mapper.readValue(json, RootBeanWithEmpty.class); [EOL]     assertNotNull(bean2); [EOL]     assertEquals(2, bean2.a); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String TEST = "test exception"; [EOL]     Map<String, Object> result = writeAndMap(mapper, new Exception(TEST)); [EOL]     Object ob = result.get("suppressed"); [EOL]     if (ob!= null) { [EOL]         assertEquals(5, result.size()); [EOL]     } else { [EOL]         assertEquals(4, result.size()); [EOL]     } [EOL]     assertEquals(TEST, result.get("message")); [EOL]     assertNull(result.get("cause")); [EOL]     assertEquals(TEST, result.get("localizedMessage")); [EOL]     Object traces = result.get("stackTrace"); [EOL]     if (!(traces instanceof List<?>)) { [EOL]         fail("Expected a List for exception member'stackTrace', got: " + traces); [EOL]     } [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
@SuppressWarnings("unused") [EOL] public void testMissingNode() throws Exception { [EOL]     String JSON = "[ { }, [ ] ]"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree(new StringReader(JSON)); [EOL]     assertTrue(result.isContainerNode()); [EOL]     assertTrue(result.isArray()); [EOL]     assertEquals(2, result.size()); [EOL]     int count = 0; [EOL]     for (JsonNode node : result) { [EOL]         ++count; [EOL]     } [EOL]     assertEquals(2, count); [EOL]     Iterator<JsonNode> it = result.iterator(); [EOL]     JsonNode onode = it.next(); [EOL]     assertTrue(onode.isContainerNode()); [EOL]     assertTrue(onode.isObject()); [EOL]     assertEquals(0, onode.size()); [EOL]     assertFalse(onode.isMissingNode()); [EOL]     assertNull(onode.textValue()); [EOL]     assertNull(onode.get(0)); [EOL]     JsonNode dummyNode = onode.path(0); [EOL]     assertNotNull(dummyNode); [EOL]     assertTrue(dummyNode.isMissingNode()); [EOL]     assertNull(dummyNode.get(3)); [EOL]     assertNull(dummyNode.get("whatever")); [EOL]     JsonNode dummyNode2 = dummyNode.path(98); [EOL]     assertNotNull(dummyNode2); [EOL]     assertTrue(dummyNode2.isMissingNode()); [EOL]     JsonNode dummyNode3 = dummyNode.path("field"); [EOL]     assertNotNull(dummyNode3); [EOL]     assertTrue(dummyNode3.isMissingNode()); [EOL]     JsonNode anode = it.next(); [EOL]     assertTrue(anode.isContainerNode()); [EOL]     assertTrue(anode.isArray()); [EOL]     assertFalse(anode.isMissingNode()); [EOL]     assertEquals(0, anode.size()); [EOL]     assertNull(anode.get(0)); [EOL]     dummyNode = anode.path(0); [EOL]     assertNotNull(
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testVisibleWithWrapperArray() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperArrayBean()); [EOL]     assertEquals("[\"ArrayType\",{\"a\":1}]", json); [EOL]     WrapperArrayBean result = mapper.readValue(json, WrapperArrayBean.class); [EOL]     assertEquals("ArrayType", result.type); [EOL]     assertEquals(1, result.a); [EOL] }
public void testVisibleWithWrapperArray() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperArrayBean()); [EOL]     assertEquals("[\"ArrayType\",{\"a\":1}]", json); [EOL]     WrapperArrayBean result = mapper.readValue(json, WrapperArrayBean.class); [EOL]     assertEquals("ArrayType", result.type); [EOL]     assertEquals(1, result.a); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testVisibleWithWrapperArray() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperArrayBean()); [EOL]     assertEquals("[\"ArrayType\",{\"a\":1}]", json); [EOL]     WrapperArrayBean result = mapper.readValue(json, WrapperArrayBean.class); [EOL]     assertEquals("ArrayType", result.type); [EOL]     assertEquals(1, result.a); [EOL] }
public void testVisibleWithWrapperArray() throws Exception { [EOL]     String json = mapper.writeValueAsString(new WrapperArrayBean()); [EOL]     assertEquals("[\"ArrayType\",{\"a\":1}]", json); [EOL]     WrapperArrayBean result = mapper.readValue(json, WrapperArrayBean.class); [EOL]     assertEquals("ArrayType", result.type); [EOL]     assertEquals(1, result.a); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testTagList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     TagList list = new TagList(); [EOL]     list.add(Tag.A); [EOL]     list.add(Tag.B); [EOL]     String json = m.writeValueAsString(list); [EOL]     TagList result = m.readValue(json, TagList.class); [EOL]     assertEquals(2, result.size()); [EOL]     assertSame(Tag.A, result.get(0)); [EOL]     assertSame(Tag.B, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testIssue329() throws Exception { [EOL]     ArrayList<Animal> animals = new ArrayList<Animal>(); [EOL]     animals.add(new Dog("Spot")); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructParametricType(Iterator.class, Animal.class); [EOL]     String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator()); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("No polymorphic type retained, should be; JSON = '" + json + "'"); [EOL]     } [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testIssue329() throws Exception { [EOL]     ArrayList<Animal> animals = new ArrayList<Animal>(); [EOL]     animals.add(new Dog("Spot")); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructParametricType(Iterator.class, Animal.class); [EOL]     String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator()); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("No polymorphic type retained, should be; JSON = '" + json + "'"); [EOL]     } [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testWrapperWithField() throws Exception { [EOL]     Dog dog = new Dog("Fluffy", 3); [EOL]     String json = new ObjectMapper().writeValueAsString(new ContainerWithField<Animal>(dog)); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("polymorphic type not kept, result == " + json + "; should contain 'object-type':'...'"); [EOL]     } [EOL] }
public void testWrapperWithField() throws Exception { [EOL]     Dog dog = new Dog("Fluffy", 3); [EOL]     String json = new ObjectMapper().writeValueAsString(new ContainerWithField<Animal>(dog)); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("polymorphic type not kept, result == " + json + "; should contain 'object-type':'...'"); [EOL]     } [EOL] }
public void testWrapperWithField() throws Exception { [EOL]     Dog dog = new Dog("Fluffy", 3); [EOL]     String json = new ObjectMapper().writeValueAsString(new ContainerWithField<Animal>(dog)); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("polymorphic type not kept, result == " + json + "; should contain 'object-type':'...'"); [EOL]     } [EOL] }
public void testWrapperWithField() throws Exception { [EOL]     Dog dog = new Dog("Fluffy", 3); [EOL]     String json = new ObjectMapper().writeValueAsString(new ContainerWithField<Animal>(dog)); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("polymorphic type not kept, result == " + json + "; should contain 'object-type':'...'"); [EOL]     } [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testWrapperWithField() throws Exception { [EOL]     Dog dog = new Dog("Fluffy", 3); [EOL]     String json = new ObjectMapper().writeValueAsString(new ContainerWithField<Animal>(dog)); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("polymorphic type not kept, result == " + json + "; should contain 'object-type':'...'"); [EOL]     } [EOL] }
public void testComplexObject() throws Exception { [EOL]     FixtureObject aTestObj = new FixtureObject(); [EOL]     ObjectMapper aMapper = new ObjectMapper(); [EOL]     StringWriter aWriter = new StringWriter(); [EOL]     JsonGenerator aGen = new JsonFactory().createGenerator(aWriter); [EOL]     aMapper.writeValue(aGen, aTestObj); [EOL]     aGen.close(); [EOL]     JsonParser jp = new JsonFactory().createParser(new StringReader(aWriter.toString())); [EOL]     assertEquals(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     while (jp.nextToken()!= JsonToken.END_OBJECT) { [EOL]         assertEquals(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]         String name = jp.getCurrentName(); [EOL]         JsonToken t = jp.nextToken(); [EOL]         if (name.equals("uri")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp)); [EOL]         } else if (name.equals("url")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp)); [EOL]         } else if (name.equals("testNull")) { [EOL]             assertToken(JsonToken.VALUE_NULL, t); [EOL]         } else if (name.equals("testString")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_STRING, getAndVerifyText(jp)); [EOL]         } else if (name.equals("testBoolean")) { [EOL]             assertToken(JsonToken.VALUE_TRUE, t); [EOL]         } else if (name.equals("testEnum")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_ENUM.toString(), getAndVerifyText(jp)); [EOL]         } else if (name.equals("testInteger")) { [EOL]            
public void testHierarchicConfigSerialize() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ConfigRoot("Fred", 25)); [EOL]     assertEquals("{\"general.names.name\":\"Fred\",\"misc.value\":25}", json); [EOL] }
public void testHierarchicConfigSerialize() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ConfigRoot("Fred", 25)); [EOL]     assertEquals("{\"general.names.name\":\"Fred\",\"misc.value\":25}", json); [EOL] }
public void testHierarchicConfigSerialize() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ConfigRoot("Fred", 25)); [EOL]     assertEquals("{\"general.names.name\":\"Fred\",\"misc.value\":25}", json); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testStringArray() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new String[] { "a", "\"foo\"", null }); [EOL]     assertEquals("[\"a\",\"\\\"foo\\\"\",null]", sw.toString().trim()); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testStringArray() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new String[] { "a", "\"foo\"", null }); [EOL]     assertEquals("[\"a\",\"\\\"foo\\\"\",null]", sw.toString().trim()); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testText() { [EOL]     assertNull(TextNode.valueOf(null)); [EOL]     TextNode empty = TextNode.valueOf(""); [EOL]     assertStandardEquals(empty); [EOL]     assertSame(TextNode.EMPTY_STRING_NODE, empty); [EOL]     assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0); [EOL]     assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75); [EOL]     long value = 127353264013893L; [EOL]     TextNode n = TextNode.valueOf(String.valueOf(value)); [EOL]     assertEquals(value, n.asLong()); [EOL]     assertNodeNumbersForNonNumeric(TextNode.valueOf("foobar")); [EOL] }
public void testClass() throws Exception { [EOL]     Class<?> result = MAPPER.readValue("\"java.lang.String\"", Class.class); [EOL]     assertEquals(String.class, result); [EOL] }
public void testClass() throws Exception { [EOL]     Class<?> result = MAPPER.readValue("\"java.lang.String\"", Class.class); [EOL]     assertEquals(String.class, result); [EOL] }
public void testClass() throws Exception { [EOL]     Class<?> result = MAPPER.readValue("\"java.lang.String\"", Class.class); [EOL]     assertEquals(String.class, result); [EOL] }
public void testClass() throws Exception { [EOL]     Class<?> result = MAPPER.readValue("\"java.lang.String\"", Class.class); [EOL]     assertEquals(String.class, result); [EOL] }
public void testClass() throws Exception { [EOL]     Class<?> result = MAPPER.readValue("\"java.lang.String\"", Class.class); [EOL]     assertEquals(String.class, result); [EOL] }
public void testClass() throws Exception { [EOL]     Class<?> result = MAPPER.readValue("\"java.lang.String\"", Class.class); [EOL]     assertEquals(String.class, result); [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testFloatArray() throws Exception { [EOL]     final int LEN = 7000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i).append('.').append(i % 10); [EOL]     } [EOL]     sb.append(']'); [EOL]     float[] result = MAPPER.readValue(sb.toString(), float[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         String expStr = String.valueOf(i) + "." + String.valueOf(i % 10); [EOL]         assertEquals(expStr, String.valueOf(result[i])); [EOL]     } [EOL] }
public void testParametricTypesRaw() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, type.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, type.containedTypeCount()); [EOL]     assertEquals(strC, type.containedType(0)); [EOL]     assertNull(type.containedType(1)); [EOL]     JavaType t = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t.getClass()); [EOL]     assertEquals(2, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertEquals(t, t.containedType(1)); [EOL]     assertNull(t.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypesRaw() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, type.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, type.containedTypeCount()); [EOL]     assertEquals(strC, type.containedType(0)); [EOL]     assertNull(type.containedType(1)); [EOL]     JavaType t = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t.getClass()); [EOL]     assertEquals(2, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertEquals(t, t.containedType(1)); [EOL]     assertNull(t.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?,?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?,?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?,?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testSimpleEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new SimpleEnumSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL] }
public void testSimpleEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new SimpleEnumSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL] }
public void testSimpleEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new SimpleEnumSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL] }
public void testSimpleEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new SimpleEnumSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL] }
public void testSimpleEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new SimpleEnumSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testSimpleEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testSimpleEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testModifyKeyDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new KeyDeserializerModifier())); [EOL]     Map<?,?> result = mapper.readValue("{\"a\":1}", Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.entrySet().iterator().next().getKey()); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testSimpleEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addSerializer(new SimpleEnumSerializer()); [EOL]     mapper.registerModule(mod); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testSimpleArrayMethod() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     MethodWrapperBeanArray array = new MethodWrapperBeanArray(new MethodWrapperBean[] { new MethodWrapperBean(new StringWrapper("A")) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     MethodWrapperBeanArray result = mapper.readValue(json, MethodWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     MethodWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     MethodWrapperBean bean = beans[0]; [EOL]     assertEquals(StringWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((StringWrapper) bean.value).str, "A"); [EOL] }
public void testArrayContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ArrayBean result = m.readValue(" { \"values\" : [ 1, 2, 3 ] } ", ArrayBean.class); [EOL]     assertNotNull(result); [EOL]     Object[] obs = result.values; [EOL]     assertNotNull(obs); [EOL]     assertEquals(3, obs.length); [EOL]     assertEquals(ValueClass.class, obs[0].getClass()); [EOL]     assertEquals(1, ((ValueClass) obs[0])._a); [EOL]     assertEquals(ValueClass.class, obs[1].getClass()); [EOL]     assertEquals(2, ((ValueClass) obs[1])._a); [EOL]     assertEquals(ValueClass.class, obs[2].getClass()); [EOL]     assertEquals(3, ((ValueClass) obs[2])._a); [EOL] }
public void testArrayContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ArrayBean result = m.readValue(" { \"values\" : [ 1, 2, 3 ] } ", ArrayBean.class); [EOL]     assertNotNull(result); [EOL]     Object[] obs = result.values; [EOL]     assertNotNull(obs); [EOL]     assertEquals(3, obs.length); [EOL]     assertEquals(ValueClass.class, obs[0].getClass()); [EOL]     assertEquals(1, ((ValueClass) obs[0])._a); [EOL]     assertEquals(ValueClass.class, obs[1].getClass()); [EOL]     assertEquals(2, ((ValueClass) obs[1])._a); [EOL]     assertEquals(ValueClass.class, obs[2].getClass()); [EOL]     assertEquals(3, ((ValueClass) obs[2])._a); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumMap() throws Exception { [EOL]     EnumMap<Choice, String> map = new EnumMap<Choice, String>(Choice.class); [EOL]     map.put(Choice.NO, "maybe"); [EOL]     Object[] input = new Object[] { map }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumMap<?,?>); [EOL]     EnumMap<Choice, String> map2 = (EnumMap<Choice, String>) ob; [EOL]     assertEquals(1, map2.size()); [EOL]     assertEquals("maybe", map2.get(Choice.NO)); [EOL]     assertNull(map2.get(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumMap() throws Exception { [EOL]     EnumMap<Choice, String> map = new EnumMap<Choice, String>(Choice.class); [EOL]     map.put(Choice.NO, "maybe"); [EOL]     Object[] input = new Object[] { map }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumMap<?,?>); [EOL]     EnumMap<Choice, String> map2 = (EnumMap<Choice, String>) ob; [EOL]     assertEquals(1, map2.size()); [EOL]     assertEquals("maybe", map2.get(Choice.NO)); [EOL]     assertNull(map2.get(Choice.YES)); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testFloat() throws Exception { [EOL]     double[] values = new double[] { 0.0, 1.0, 0.1, -37.01, 999.99, 0.3, 33.3, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY }; [EOL]     for (double d : values) { [EOL]         float f = (float) d; [EOL]         String expected = String.valueOf(f); [EOL]         if (Float.isNaN(f) || Float.isInfinite(f)) { [EOL]             expected = "\"" + expected + "\""; [EOL]         } [EOL]         assertEquals(expected, serializeAsString(MAPPER, Float.valueOf(f))); [EOL]     } [EOL] }
public void testBrokenWithDoubleAnnotations() throws Exception { [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         Broken b = MAPPER.readValue("{ \"a\" : 3 }", Broken.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Multiple 'any-setters'"); [EOL]     } [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testRawMaps() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructRawMapType(HashMap.class); [EOL]     assertTrue(type.isContainerType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getKeyType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getContentType()); [EOL]     type = tf.constructRawMapLikeType(String.class); [EOL]     assertTrue(type.isMapLikeType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getKeyType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getContentType()); [EOL] }
public void testRawMaps() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructRawMapType(HashMap.class); [EOL]     assertTrue(type.isContainerType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getKeyType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getContentType()); [EOL]     type = tf.constructRawMapLikeType(String.class); [EOL]     assertTrue(type.isMapLikeType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getKeyType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getContentType()); [EOL] }
public void testRawMaps() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructRawMapType(HashMap.class); [EOL]     assertTrue(type.isContainerType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getKeyType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getContentType()); [EOL]     type = tf.constructRawMapLikeType(String.class); [EOL]     assertTrue(type.isMapLikeType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getKeyType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getContentType()); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testRawMaps() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructRawMapType(HashMap.class); [EOL]     assertTrue(type.isContainerType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getKeyType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getContentType()); [EOL]     type = tf.constructRawMapLikeType(String.class); [EOL]     assertTrue(type.isMapLikeType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getKeyType()); [EOL]     assertEquals(TypeFactory.unknownType(), type.getContentType()); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testCanonicalNames() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(java.util.Calendar.class); [EOL]     String can = t.toCanonical(); [EOL]     assertEquals("java.util.Calendar", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.ArrayList.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.ArrayList<java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructType(java.util.TreeMap.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL]     t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class); [EOL]     can = t.toCanonical(); [EOL]     assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>", can); [EOL]     assertEquals(t, tf.constructFromCanonical(can)); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testCollections() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructType(ArrayList.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     t = tf.constructType(new TypeReference<ArrayList<String>>() { [EOL]     }); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(ArrayList.class, t.getRawClass()); [EOL]     JavaType elemType = ((CollectionType) t).getContentType(); [EOL]     assertNotNull(elemType); [EOL]     assertSame(SimpleType.class, elemType.getClass()); [EOL]     assertSame(String.class, elemType.getRawClass()); [EOL]     t = tf.constructCollectionType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     assertSame(String.class, ((CollectionType) t).getContentType().getRawClass()); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testAtomicArrayRefParameters() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<AtomicReference<long[]>>() { [EOL]     }); [EOL]     JavaType[] params = tf.findTypeParameters(type, AtomicReference.class); [EOL]     assertNotNull(params); [EOL]     assertEquals(1, params.length); [EOL]     assertEquals(tf.constructType(long[].class), params[0]); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testDeserializationWithArrayOfSize2() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("[\"a\", \"b\"]"); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b"), ((MyInter) inter).blah); [EOL] }
public void testDeserializationWithArrayOfSize2() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("[\"a\", \"b\"]"); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b"), ((MyInter) inter).blah); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testDeserializationWithArrayOfSize2() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("[\"a\", \"b\"]"); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b"), ((MyInter) inter).blah); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testTokenBuffer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     TokenBuffer buf = new TokenBuffer(mapper); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 42); [EOL]     buf.writeEndObject(); [EOL]     String json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     ObjectHolder holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     JsonParser jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndArray(); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeNumber(
public void testTokenBuffer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     TokenBuffer buf = new TokenBuffer(mapper); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 42); [EOL]     buf.writeEndObject(); [EOL]     String json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     ObjectHolder holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     JsonParser jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndArray(); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeNumber(
public void testTokenBuffer() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     String str = serializeAsString(tb); [EOL]     verifyJsonSpecSampleDoc(createParserUsingReader(str), true); [EOL] }
public void testTokenBuffer() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     String str = serializeAsString(tb); [EOL]     verifyJsonSpecSampleDoc(createParserUsingReader(str), true); [EOL] }
public void testTokenBuffer() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     String str = serializeAsString(tb); [EOL]     verifyJsonSpecSampleDoc(createParserUsingReader(str), true); [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testTokenBuffer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     TokenBuffer buf = new TokenBuffer(mapper); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 42); [EOL]     buf.writeEndObject(); [EOL]     String json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     ObjectHolder holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     JsonParser jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndArray(); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeNumber(
public void testComplexObject() throws Exception { [EOL]     FixtureObject aTestObj = new FixtureObject(); [EOL]     ObjectMapper aMapper = new ObjectMapper(); [EOL]     StringWriter aWriter = new StringWriter(); [EOL]     JsonGenerator aGen = new JsonFactory().createGenerator(aWriter); [EOL]     aMapper.writeValue(aGen, aTestObj); [EOL]     aGen.close(); [EOL]     JsonParser jp = new JsonFactory().createParser(new StringReader(aWriter.toString())); [EOL]     assertEquals(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     while (jp.nextToken()!= JsonToken.END_OBJECT) { [EOL]         assertEquals(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]         String name = jp.getCurrentName(); [EOL]         JsonToken t = jp.nextToken(); [EOL]         if (name.equals("uri")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp)); [EOL]         } else if (name.equals("url")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp)); [EOL]         } else if (name.equals("testNull")) { [EOL]             assertToken(JsonToken.VALUE_NULL, t); [EOL]         } else if (name.equals("testString")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_STRING, getAndVerifyText(jp)); [EOL]         } else if (name.equals("testBoolean")) { [EOL]             assertToken(JsonToken.VALUE_TRUE, t); [EOL]         } else if (name.equals("testEnum")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_ENUM.toString(), getAndVerifyText(jp)); [EOL]         } else if (name.equals("testInteger")) { [EOL]            
public void testComplexObject() throws Exception { [EOL]     FixtureObject aTestObj = new FixtureObject(); [EOL]     ObjectMapper aMapper = new ObjectMapper(); [EOL]     StringWriter aWriter = new StringWriter(); [EOL]     JsonGenerator aGen = new JsonFactory().createGenerator(aWriter); [EOL]     aMapper.writeValue(aGen, aTestObj); [EOL]     aGen.close(); [EOL]     JsonParser jp = new JsonFactory().createParser(new StringReader(aWriter.toString())); [EOL]     assertEquals(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     while (jp.nextToken()!= JsonToken.END_OBJECT) { [EOL]         assertEquals(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]         String name = jp.getCurrentName(); [EOL]         JsonToken t = jp.nextToken(); [EOL]         if (name.equals("uri")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp)); [EOL]         } else if (name.equals("url")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp)); [EOL]         } else if (name.equals("testNull")) { [EOL]             assertToken(JsonToken.VALUE_NULL, t); [EOL]         } else if (name.equals("testString")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_STRING, getAndVerifyText(jp)); [EOL]         } else if (name.equals("testBoolean")) { [EOL]             assertToken(JsonToken.VALUE_TRUE, t); [EOL]         } else if (name.equals("testEnum")) { [EOL]             assertToken(JsonToken.VALUE_STRING, t); [EOL]             assertEquals(FixtureObject.VALUE_ENUM.toString(), getAndVerifyText(jp)); [EOL]         } else if (name.equals("testInteger")) { [EOL]            
public void testParser() throws Exception { [EOL]     ArrayParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     String str = serializeAsString(tb); [EOL]     verifyJsonSpecSampleDoc(createParserUsingReader(str), true); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     String str = serializeAsString(tb); [EOL]     verifyJsonSpecSampleDoc(createParserUsingReader(str), true); [EOL] }
public void testTokenBuffer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     TokenBuffer buf = new TokenBuffer(mapper); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 42); [EOL]     buf.writeEndObject(); [EOL]     String json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     ObjectHolder holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     JsonParser jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndArray(); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeNumber(
public void testTokenBuffer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     TokenBuffer buf = new TokenBuffer(mapper); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 42); [EOL]     buf.writeEndObject(); [EOL]     String json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     ObjectHolder holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     JsonParser jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndArray(); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeNumber(
public void testTokenBuffer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     TokenBuffer buf = new TokenBuffer(mapper); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 42); [EOL]     buf.writeEndObject(); [EOL]     String json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     ObjectHolder holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     JsonParser jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndArray(); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeNumber(
public void testTokenBuffer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     TokenBuffer buf = new TokenBuffer(mapper); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 42); [EOL]     buf.writeEndObject(); [EOL]     String json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     ObjectHolder holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     JsonParser jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndArray(); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeNumber(
public void testTokenBuffer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     TokenBuffer buf = new TokenBuffer(mapper); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 42); [EOL]     buf.writeEndObject(); [EOL]     String json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     ObjectHolder holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     JsonParser jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndArray(); [EOL]     json = mapper.writeValueAsString(new ObjectHolder(buf)); [EOL]     holder = mapper.readValue(json, ObjectHolder.class); [EOL]     assertNotNull(holder.value); [EOL]     assertSame(TokenBuffer.class, holder.value.getClass()); [EOL]     jp = ((TokenBuffer) holder.value).asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(mapper); [EOL]     buf.writeNumber(
public void testA() throws Exception { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeFieldName("a"); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeEndObject(); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(false); [EOL]     buf.writeEndArray(); [EOL]     jp = buf.asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBinary(new byte[3]); [EOL]     buf.writeEndArray(); [EOL]     buf.writeEndArray(); [EOL]     jp = buf.asParser(); [EOL]     assertToken(JsonToken.
public void testWithJSONSampleDoc() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), false); [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), true); [EOL]     tb.close(); [EOL] }
public void testWithJSONSampleDoc() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), false); [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), true); [EOL]     tb.close(); [EOL] }
public void testWithJSONSampleDoc() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), false); [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), true); [EOL]     tb.close(); [EOL] }
public void testWithJSONSampleDoc() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), false); [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), true); [EOL]     tb.close(); [EOL] }
public void testWithJSONSampleDoc() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), false); [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), true); [EOL]     tb.close(); [EOL] }
public void testWithJSONSampleDoc() throws Exception { [EOL]     JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC); [EOL]     TokenBuffer tb = new TokenBuffer(null); [EOL]     while (jp.nextToken()!= null) { [EOL]         tb.copyCurrentEvent(jp); [EOL]     } [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), false); [EOL]     verifyJsonSpecSampleDoc(tb.asParser(), true); [EOL]     tb.close(); [EOL] }
public void testSimpleArray() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartArray(); [EOL]     assertTrue(buf.getOutputContext().inArray()); [EOL]     buf.writeEndArray(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inArray()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBoolean(true); [EOL]     buf.writeNull(); [EOL]     buf.writeEndArray(); [EOL]     jp = buf.asParser(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertTrue(jp.getBooleanValue()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeStartArray(); [EOL]     buf.writeBinary(new byte[3]); [EOL]     buf.writeEndArray(); [EOL]     buf.writeEndArray(); [EOL]     jp = buf.asParser(); [EOL]     assertToken(JsonToken.
public void testDoubleWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Double exp = Double.valueOf(str); [EOL]         Double result; [EOL]         if (NAN_STRING!= str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Double.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Double.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testSimpleClass() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType baseType = tf.constructType(BaseType.class); [EOL]     assertSame(BaseType.class, baseType.getRawClass()); [EOL]     assertTrue(baseType.hasRawClass(BaseType.class)); [EOL]     assertFalse(baseType.isArrayType()); [EOL]     assertFalse(baseType.isContainerType()); [EOL]     assertFalse(baseType.isEnumType()); [EOL]     assertFalse(baseType.isInterface()); [EOL]     assertFalse(baseType.isPrimitive()); [EOL]     assertNull(baseType.getContentType()); [EOL]     assertNull(baseType.getValueHandler()); [EOL]     assertSame(baseType, baseType.narrowBy(BaseType.class)); [EOL]     assertSame(baseType, baseType.widenBy(BaseType.class)); [EOL]     try { [EOL]         baseType.narrowBy(SubType.class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "should never be called"); [EOL]     } [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testPOJO() { [EOL]     POJONode n = new POJONode("x"); [EOL]     assertStandardEquals(n); [EOL]     assertEquals(n, new POJONode("x")); [EOL]     assertEquals("x", n.asText()); [EOL]     assertEquals("x", n.toString()); [EOL]     assertEquals(new POJONode(null), new POJONode(null)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertNodeNumbers(new POJONode(Integer.valueOf(123)), 123, 123.0); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testSimpleGetterInterfaceImpl() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new PojoImpl()); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(Integer.valueOf(5), result.get("foobar")); [EOL]     assertEquals(Integer.valueOf(1), result.get("width")); [EOL]     assertEquals(Integer.valueOf(2), result.get("length")); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testMatchingSingle() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     JsonNode node = root.findValue("b"); [EOL]     assertNotNull(node); [EOL]     assertEquals(3, node.intValue()); [EOL]     node = root.findParent("b"); [EOL]     assertNotNull(node); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, ((ObjectNode) node).size()); [EOL]     assertEquals(3, node.path("b").intValue()); [EOL] }
public void testMatchingSingle() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     JsonNode node = root.findValue("b"); [EOL]     assertNotNull(node); [EOL]     assertEquals(3, node.intValue()); [EOL]     node = root.findParent("b"); [EOL]     assertNotNull(node); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, ((ObjectNode) node).size()); [EOL]     assertEquals(3, node.path("b").intValue()); [EOL] }
public void testMatchingSingle() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     JsonNode node = root.findValue("b"); [EOL]     assertNotNull(node); [EOL]     assertEquals(3, node.intValue()); [EOL]     node = root.findParent("b"); [EOL]     assertNotNull(node); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, ((ObjectNode) node).size()); [EOL]     assertEquals(3, node.path("b").intValue()); [EOL] }
public void testMissing() throws Exception { [EOL]     MissingNode n = MissingNode.getInstance(); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertEquals(JsonToken.NOT_AVAILABLE, n.asToken()); [EOL]     assertEquals("", n.asText()); [EOL]     assertStandardEquals(n); [EOL]     assertEquals("", n.toString()); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL]     assertTrue(n.asBoolean(true)); [EOL]     assertEquals(4, n.asInt(4)); [EOL]     assertEquals(5L, n.asLong(5)); [EOL]     assertEquals(0.25, n.asDouble(0.25)); [EOL] }
public void testArrayTypingNested() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS); [EOL]     ArrayBean bean = new ArrayBean(new String[0][0]); [EOL]     String json = m.writeValueAsString(bean); [EOL]     ArrayBean result = m.readValue(json, ArrayBean.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(String[][].class, result.values.getClass()); [EOL] }
public void testMapperVersions() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertVersion(mapper); [EOL]     assertVersion(mapper.reader()); [EOL]     assertVersion(mapper.writer()); [EOL]     assertVersion(new JacksonAnnotationIntrospector()); [EOL] }
public void testMapperVersions() { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertVersion(mapper); [EOL]     assertVersion(mapper.reader()); [EOL]     assertVersion(mapper.writer()); [EOL]     assertVersion(new JacksonAnnotationIntrospector()); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testMixIns() throws Exception { [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.setMixInAnnotation(MixableBean.class, MixInForOrder.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(module); [EOL]     Map<String, Object> props = this.writeAndMap(mapper, new MixableBean()); [EOL]     assertEquals(3, props.size()); [EOL]     assertEquals(Integer.valueOf(3), props.get("c")); [EOL]     assertEquals(Integer.valueOf(1), props.get("a")); [EOL]     assertEquals(Integer.valueOf(2), props.get("b")); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testModifyKeySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new KeySerializerModifier())); [EOL]     Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     map.put("x", 3); [EOL]     assertEquals("{\"foo\":3}", mapper.writeValueAsString(map)); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testJackson430() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.setSerializerFactory(new CustomJsonSerializerFactory()); [EOL]     MyClass mc = new MyClass(); [EOL]     mc.params.add(new MyParam<Integer>(1)); [EOL]     String str = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(str, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(1, mc2.params.size()); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setHandlerInstantiator(new MyInstantiator("xyz:")); [EOL]     assertEquals(quote("xyz:456"), mapper.writeValueAsString(new MyBean("456"))); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testEmptyCollection() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.INDENT_OUTPUT, true); [EOL]     List<User> friends = new ArrayList<User>(); [EOL]     friends.add(new DefaultUser("Joe Hildebrandt", null)); [EOL]     friends.add(new DefaultEmployee("Richard Nasr", null, "MDA")); [EOL]     User user = new DefaultEmployee("John Vanspronssen", friends, "MDA"); [EOL]     String json = mapper.writeValueAsString(user); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(DefaultEmployee.class); [EOL]     mapper.registerSubtypes(DefaultUser.class); [EOL]     User result = mapper.readValue(json, User.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(DefaultEmployee.class, result.getClass()); [EOL]     friends = result.getFriends(); [EOL]     assertEquals(2, friends.size()); [EOL]     assertEquals(DefaultUser.class, friends.get(0).getClass()); [EOL]     assertEquals(DefaultEmployee.class, friends.get(1).getClass()); [EOL] }
public void testIssue329() throws Exception { [EOL]     ArrayList<Animal> animals = new ArrayList<Animal>(); [EOL]     animals.add(new Dog("Spot")); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructParametricType(Iterator.class, Animal.class); [EOL]     String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator()); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("No polymorphic type retained, should be; JSON = '" + json + "'"); [EOL]     } [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimpleViaObjectMapper() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.put("number", 15); [EOL]     n.put("string", "abc"); [EOL]     ObjectNode n2 = n.putObject("ob"); [EOL]     n2.putArray("arr"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("abc", result.get("string")); [EOL]     assertEquals(Integer.valueOf(15), result.get("number")); [EOL]     Map<String, Object> ob = (Map<String, Object>) result.get("ob"); [EOL]     assertEquals(1, ob.size()); [EOL]     List<Object> list = (List<Object>) ob.get("arr"); [EOL]     assertEquals(0, list.size()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimpleViaObjectMapper() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.put("number", 15); [EOL]     n.put("string", "abc"); [EOL]     ObjectNode n2 = n.putObject("ob"); [EOL]     n2.putArray("arr"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("abc", result.get("string")); [EOL]     assertEquals(Integer.valueOf(15), result.get("number")); [EOL]     Map<String, Object> ob = (Map<String, Object>) result.get("ob"); [EOL]     assertEquals(1, ob.size()); [EOL]     List<Object> list = (List<Object>) ob.get("arr"); [EOL]     assertEquals(0, list.size()); [EOL] }
public void testXMLGregorianCalendarSerAndDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     XMLGregorianCalendar cal = dtf.newXMLGregorianCalendar(1974, 10, 10, 18, 15, 17, 123, 0); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long timestamp = cal.toGregorianCalendar().getTimeInMillis(); [EOL]     String numStr = String.valueOf(timestamp); [EOL]     assertEquals(numStr, mapper.writeValueAsString(cal)); [EOL]     XMLGregorianCalendar calOut = mapper.readValue(numStr, XMLGregorianCalendar.class); [EOL]     assertNotNull(calOut); [EOL]     assertEquals(timestamp, calOut.toGregorianCalendar().getTimeInMillis()); [EOL]     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); [EOL]     String exp = cal.toXMLFormat(); [EOL]     String act = mapper.writeValueAsString(cal); [EOL]     act = act.substring(1, act.length() - 1); [EOL]     exp = removeZ(exp); [EOL]     act = removeZ(act); [EOL]     assertEquals(exp, act); [EOL] }
public void testXMLGregorianCalendarSerAndDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     XMLGregorianCalendar cal = dtf.newXMLGregorianCalendar(1974, 10, 10, 18, 15, 17, 123, 0); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long timestamp = cal.toGregorianCalendar().getTimeInMillis(); [EOL]     String numStr = String.valueOf(timestamp); [EOL]     assertEquals(numStr, mapper.writeValueAsString(cal)); [EOL]     XMLGregorianCalendar calOut = mapper.readValue(numStr, XMLGregorianCalendar.class); [EOL]     assertNotNull(calOut); [EOL]     assertEquals(timestamp, calOut.toGregorianCalendar().getTimeInMillis()); [EOL]     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); [EOL]     String exp = cal.toXMLFormat(); [EOL]     String act = mapper.writeValueAsString(cal); [EOL]     act = act.substring(1, act.length() - 1); [EOL]     exp = removeZ(exp); [EOL]     act = removeZ(act); [EOL]     assertEquals(exp, act); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testNoAccessOverrides() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.disable(SerializationFeature.CAN_OVERRIDE_ACCESS_MODIFIERS); [EOL]     assertEquals("{\"x\":1}", m.writeValueAsString(new SimpleBean())); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testAtomicReference() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String[] strs = new String[] { "abc" }; [EOL]     assertEquals("[\"abc\"]", serializeAsString(mapper, new AtomicReference<String[]>(strs))); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimpleViaObjectMapper() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.put("number", 15); [EOL]     n.put("string", "abc"); [EOL]     ObjectNode n2 = n.putObject("ob"); [EOL]     n2.putArray("arr"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("abc", result.get("string")); [EOL]     assertEquals(Integer.valueOf(15), result.get("number")); [EOL]     Map<String, Object> ob = (Map<String, Object>) result.get("ob"); [EOL]     assertEquals(1, ob.size()); [EOL]     List<Object> list = (List<Object>) ob.get("arr"); [EOL]     assertEquals(0, list.size()); [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testExceptionWithEOF() throws Exception { [EOL]     StringReader r = new StringReader("  3"); [EOL]     JsonFactory f = new JsonFactory(); [EOL]     JsonParser jp = f.createParser(r); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Integer I = mapper.readValue(jp, Integer.class); [EOL]     assertEquals(3, I.intValue()); [EOL]     try { [EOL]         I = mapper.readValue(jp, Integer.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, JsonMappingException.class, "No serializer found"); [EOL]     } [EOL]     try { [EOL]         I = mapper.readValue(jp, Integer.class); [EOL]         fail("Should have gotten an exception"); [EOL]     } catch (IOException e) { [EOL]         verifyException(e, JsonMappingException.class, "No suitable constructor found"); [EOL]     } [EOL] }
public void testPrettyPrinter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer(); [EOL]     HashMap<String, Integer> data = new HashMap<String, Integer>(); [EOL]     data.put("a", 1); [EOL]     assertEquals("{\"a\":1}", writer.writeValueAsString(data)); [EOL]     writer = writer.withDefaultPrettyPrinter(); [EOL]     String lf = System.getProperty("line.separator"); [EOL]     assertEquals("{" + lf + "  \"a\" : 1" + lf + "}", writer.writeValueAsString(data)); [EOL]     writer = writer.with((PrettyPrinter) null); [EOL]     assertEquals("{\"a\":1}", writer.writeValueAsString(data)); [EOL] }
public void testPrettyPrinter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer(); [EOL]     HashMap<String, Integer> data = new HashMap<String, Integer>(); [EOL]     data.put("a", 1); [EOL]     assertEquals("{\"a\":1}", writer.writeValueAsString(data)); [EOL]     writer = writer.withDefaultPrettyPrinter(); [EOL]     String lf = System.getProperty("line.separator"); [EOL]     assertEquals("{" + lf + "  \"a\" : 1" + lf + "}", writer.writeValueAsString(data)); [EOL]     writer = writer.with((PrettyPrinter) null); [EOL]     assertEquals("{\"a\":1}", writer.writeValueAsString(data)); [EOL] }
public void testIssue329() throws Exception { [EOL]     ArrayList<Animal> animals = new ArrayList<Animal>(); [EOL]     animals.add(new Dog("Spot")); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructParametricType(Iterator.class, Animal.class); [EOL]     String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator()); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("No polymorphic type retained, should be; JSON = '" + json + "'"); [EOL]     } [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testFormatForGenerators() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     try { [EOL]         mapper.writer(s).writeValue(sw, "Foobar"); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForGenerators() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     try { [EOL]         mapper.writer(s).writeValue(sw, "Foobar"); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForGenerators() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     try { [EOL]         mapper.writer(s).writeValue(sw, "Foobar"); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testSimpleBean() throws Exception { [EOL]     ArrayList<Object> misc = new ArrayList<Object>(); [EOL]     misc.add("xyz"); [EOL]     misc.add(42); [EOL]     misc.add(null); [EOL]     misc.add(Boolean.TRUE); [EOL]     TestBean bean = new TestBean(13, -900L, "\"test\"", new URI("http://foobar.com"), misc); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     TestBean result = MAPPER.readValue(json, TestBean.class); [EOL]     assertEquals(bean, result); [EOL] }
public void testFormatForGenerators() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     try { [EOL]         mapper.writer(s).writeValue(sw, "Foobar"); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForGenerators() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     try { [EOL]         mapper.writer(s).writeValue(sw, "Foobar"); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForGenerators() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     try { [EOL]         mapper.writer(s).writeValue(sw, "Foobar"); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testCustomBeanInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyBean.class, new MyBeanInstantiator())); [EOL]     MyBean bean = mapper.readValue("{}", MyBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("secret!", bean._secret); [EOL] }
public void testCustomBeanInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyBean.class, new MyBeanInstantiator())); [EOL]     MyBean bean = mapper.readValue("{}", MyBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("secret!", bean._secret); [EOL] }
public void testBoolean() { [EOL]     BooleanNode f = BooleanNode.getFalse(); [EOL]     assertNotNull(f); [EOL]     assertTrue(f.isBoolean()); [EOL]     assertSame(f, BooleanNode.valueOf(false)); [EOL]     assertStandardEquals(f); [EOL]     assertFalse(f.booleanValue()); [EOL]     assertFalse(f.asBoolean()); [EOL]     assertEquals("false", f.asText()); [EOL]     assertEquals(JsonToken.VALUE_FALSE, f.asToken()); [EOL]     BooleanNode t = BooleanNode.getTrue(); [EOL]     assertNotNull(t); [EOL]     assertTrue(t.isBoolean()); [EOL]     assertSame(t, BooleanNode.valueOf(true)); [EOL]     assertStandardEquals(t); [EOL]     assertTrue(t.booleanValue()); [EOL]     assertTrue(t.asBoolean()); [EOL]     assertEquals("true", t.asText()); [EOL]     assertEquals(JsonToken.VALUE_TRUE, t.asToken()); [EOL]     assertNodeNumbers(f, 0, 0.0); [EOL]     assertNodeNumbers(t, 1, 1.0); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testBoolean() { [EOL]     BooleanNode f = BooleanNode.getFalse(); [EOL]     assertNotNull(f); [EOL]     assertTrue(f.isBoolean()); [EOL]     assertSame(f, BooleanNode.valueOf(false)); [EOL]     assertStandardEquals(f); [EOL]     assertFalse(f.booleanValue()); [EOL]     assertFalse(f.asBoolean()); [EOL]     assertEquals("false", f.asText()); [EOL]     assertEquals(JsonToken.VALUE_FALSE, f.asToken()); [EOL]     BooleanNode t = BooleanNode.getTrue(); [EOL]     assertNotNull(t); [EOL]     assertTrue(t.isBoolean()); [EOL]     assertSame(t, BooleanNode.valueOf(true)); [EOL]     assertStandardEquals(t); [EOL]     assertTrue(t.booleanValue()); [EOL]     assertTrue(t.asBoolean()); [EOL]     assertEquals("true", t.asText()); [EOL]     assertEquals(JsonToken.VALUE_TRUE, t.asToken()); [EOL]     assertNodeNumbers(f, 0, 0.0); [EOL]     assertNodeNumbers(t, 1, 1.0); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testAsBoolean() throws Exception { [EOL]     assertEquals(false, BooleanNode.FALSE.asBoolean()); [EOL]     assertEquals(true, BooleanNode.TRUE.asBoolean()); [EOL]     assertEquals(false, IntNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, IntNode.valueOf(1).asBoolean()); [EOL]     assertEquals(false, LongNode.valueOf(0).asBoolean()); [EOL]     assertEquals(true, LongNode.valueOf(-34L).asBoolean()); [EOL]     assertEquals(true, new TextNode("true").asBoolean()); [EOL]     assertEquals(false, new TextNode("false").asBoolean()); [EOL]     assertEquals(false, new TextNode("barf").asBoolean()); [EOL]     assertEquals(true, new TextNode("barf").asBoolean(true)); [EOL]     assertEquals(true, new POJONode(Boolean.TRUE).asBoolean()); [EOL] }
public void testBoolean() { [EOL]     BooleanNode f = BooleanNode.getFalse(); [EOL]     assertNotNull(f); [EOL]     assertTrue(f.isBoolean()); [EOL]     assertSame(f, BooleanNode.valueOf(false)); [EOL]     assertStandardEquals(f); [EOL]     assertFalse(f.booleanValue()); [EOL]     assertFalse(f.asBoolean()); [EOL]     assertEquals("false", f.asText()); [EOL]     assertEquals(JsonToken.VALUE_FALSE, f.asToken()); [EOL]     BooleanNode t = BooleanNode.getTrue(); [EOL]     assertNotNull(t); [EOL]     assertTrue(t.isBoolean()); [EOL]     assertSame(t, BooleanNode.valueOf(true)); [EOL]     assertStandardEquals(t); [EOL]     assertTrue(t.booleanValue()); [EOL]     assertTrue(t.asBoolean()); [EOL]     assertEquals("true", t.asText()); [EOL]     assertEquals(JsonToken.VALUE_TRUE, t.asToken()); [EOL]     assertNodeNumbers(f, 0, 0.0); [EOL]     assertNodeNumbers(t, 1, 1.0); [EOL] }
public void testBoolean() { [EOL]     BooleanNode f = BooleanNode.getFalse(); [EOL]     assertNotNull(f); [EOL]     assertTrue(f.isBoolean()); [EOL]     assertSame(f, BooleanNode.valueOf(false)); [EOL]     assertStandardEquals(f); [EOL]     assertFalse(f.booleanValue()); [EOL]     assertFalse(f.asBoolean()); [EOL]     assertEquals("false", f.asText()); [EOL]     assertEquals(JsonToken.VALUE_FALSE, f.asToken()); [EOL]     BooleanNode t = BooleanNode.getTrue(); [EOL]     assertNotNull(t); [EOL]     assertTrue(t.isBoolean()); [EOL]     assertSame(t, BooleanNode.valueOf(true)); [EOL]     assertStandardEquals(t); [EOL]     assertTrue(t.booleanValue()); [EOL]     assertTrue(t.asBoolean()); [EOL]     assertEquals("true", t.asText()); [EOL]     assertEquals(JsonToken.VALUE_TRUE, t.asToken()); [EOL]     assertNodeNumbers(f, 0, 0.0); [EOL]     assertNodeNumbers(t, 1, 1.0); [EOL] }
public void testHierarchicConfigSerialize() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ConfigRoot("Fred", 25)); [EOL]     assertEquals("{\"general.names.name\":\"Fred\",\"misc.value\":25}", json); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testWithIdNone() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(); [EOL]     String json = mapper.writeValueAsString(new NoType()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     NoTypeInterface bean = mapper.readValue("{\"a\":6}", NoTypeInterface.class); [EOL]     assertNotNull(bean); [EOL]     NoType impl = (NoType) bean; [EOL]     assertEquals(6, impl.a); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testIssue831() throws Exception { [EOL]     final String JSON = "{ \"petType\": \"dog\",\n" + "\"pet\": { \"name\": \"Pluto\" }\n}"; [EOL]     House831 result = MAPPER.readValue(JSON, House831.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.pet); [EOL]     assertSame(Dog.class, result.pet.getClass()); [EOL]     assertEquals("dog", result.petType); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testWithExternalType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithEmpty()); [EOL]     ExternalBeanWithEmpty result = mapper.readValue(json, ExternalBeanWithEmpty.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(ValueBean.class, result.value.getClass()); [EOL]     assertEquals("", result.value.str); [EOL] }
public void testWithExternalType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithEmpty()); [EOL]     ExternalBeanWithEmpty result = mapper.readValue(json, ExternalBeanWithEmpty.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(ValueBean.class, result.value.getClass()); [EOL]     assertEquals("", result.value.str); [EOL] }
public void testAtomicBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AtomicBoolean b = mapper.readValue("true", AtomicBoolean.class); [EOL]     assertTrue(b.get()); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testIntArrayToX() throws Exception { [EOL]     int[] data = ints(); [EOL]     verifyIntArrayConversion(data, byte[].class); [EOL]     verifyIntArrayConversion(data, short[].class); [EOL]     verifyIntArrayConversion(data, long[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Integer> actNums = mapper.convertValue(data, new TypeReference<List<Integer>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testByteWrapper() throws Exception { [EOL]     Byte result = MAPPER.readValue(new StringReader("   -42\t"), Byte.class); [EOL]     assertEquals((byte) -42, result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-12\""), Byte.class); [EOL]     assertEquals((byte) -12, result); [EOL]     result = MAPPER.readValue(new StringReader(" 39.07"), Byte.class); [EOL]     assertEquals((byte) 39, result); [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL] } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testIntArrayToX() throws Exception { [EOL]     int[] data = ints(); [EOL]     verifyIntArrayConversion(data, byte[].class); [EOL]     verifyIntArrayConversion(data, short[].class); [EOL]     verifyIntArrayConversion(data, long[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Integer> actNums = mapper.convertValue(data, new TypeReference<List<Integer>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testOverflows() { [EOL]     try { [EOL]         mapper.convertValue(new int[] { 1000 }, byte[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG_BYTE); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new int[] { -99999 }, short[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     try { [EOL]         mapper.convertValue(new long[] { Long.MAX_VALUE }, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL]     BigInteger biggie = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     biggie.add(BigInteger.ONE); [EOL]     List<BigInteger> l = new ArrayList<BigInteger>(); [EOL]     l.add(biggie); [EOL]     try { [EOL]         mapper.convertValue(l, int[].class); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, OVERFLOW_MSG); [EOL]     } [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testLongWrapper() throws Exception { [EOL]     Long result = MAPPER.readValue(new StringReader("{\"v\":3}"), Long.class); [EOL]     assertEquals(3, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), Long.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0, result._v); [EOL]     long[] array = MAPPER.readValue(new StringReader("[ null ]"), long[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0L, array[0]); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testLongPrimitiveNonNumeric() throws Exception { [EOL]     long value = Double.POSITIVE_INFINITY; [EOL]     LongBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), LongBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testLongPrimitiveNonNumeric() throws Exception { [EOL]     long value = Double.POSITIVE_INFINITY; [EOL]     LongBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), LongBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testFloatWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Float exp = Float.valueOf(str); [EOL]         Float result; [EOL]         if (NAN_STRING!= str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Float.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Float.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testFloatWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Float exp = Float.valueOf(str); [EOL]         Float result; [EOL]         if (NAN_STRING!= str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Float.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Float.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testFloatWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Float exp = Float.valueOf(str); [EOL]         Float result; [EOL]         if (NAN_STRING!= str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Float.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Float.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testFloatWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Float exp = Float.valueOf(str); [EOL]         Float result; [EOL]         if (NAN_STRING!= str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Float.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Float.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandler() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     mapper.addHandler(new MyHandler()); [EOL]     TestBean result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testFloat() { [EOL]     FloatNode n = FloatNode.valueOf(0.25f); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.FLOAT, n.numberType()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0.25, n.doubleValue()); [EOL]     assertEquals(0.25f, n.floatValue()); [EOL]     assertNotNull(n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals("0.25", n.asText()); [EOL]     assertNodeNumbers(FloatNode.valueOf(4.5f), 4, 4.5f); [EOL]     assertTrue(FloatNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(FloatNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(FloatNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(FloatNode.valueOf(1000L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(FloatNode.valueOf(-1000L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(FloatNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(FloatNode.valueOf(Integer.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(FloatNode.valueOf(Integer.MIN_VALUE).canConvertToLong()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testDateUsingObjectWriter() throws IOException { [EOL]     DateFormat df = new SimpleDateFormat("yyyy-MM-dd'X'HH:mm:ss"); [EOL]     df.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     assertEquals(quote("1969-12-31X16:00:00"), MAPPER.writer(df).writeValueAsString(new Date(0L))); [EOL]     ObjectWriter w = MAPPER.writer((DateFormat) null); [EOL]     assertEquals("0", w.writeValueAsString(new Date(0L))); [EOL]     w = w.with(df); [EOL]     assertEquals(quote("1969-12-31X16:00:00"), w.writeValueAsString(new Date(0L))); [EOL]     w = w.with((DateFormat) null); [EOL]     assertEquals("0", w.writeValueAsString(new Date(0L))); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testURL() throws Exception { [EOL]     URI value = new URI("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URI.class)); [EOL] }
public void testCharset() throws IOException { [EOL]     assertEquals(Charset.forName("UTF-8"), mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testClass() throws IOException { [EOL]     assertEquals(String.class, MAPPER.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertEquals(Integer.class, MAPPER.readValue(quote("int"), Class.class)); [EOL]     assertEquals(Long.class, MAPPER.readValue(quote("long"), Class.class)); [EOL]     assertEquals(Float.class, MAPPER.readValue(quote("float"), Class.class)); [EOL]     assertEquals(Double.class, MAPPER.readValue(quote("double"), Class.class)); [EOL] }
public void testSimpleURL() throws Exception { [EOL]     URI value = new URI("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URI.class)); [EOL] }
public void testURL() throws Exception { [EOL]     URI value = new URI("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URI.class)); [EOL] }
public void testURL() throws Exception { [EOL]     URI value = new URI("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URI.class)); [EOL] }
public void testCharset() throws IOException { [EOL]     assertEquals(Charset.forName("UTF-8"), mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws IOException { [EOL]     assertEquals(Charset.forName("UTF-8"), mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws IOException { [EOL]     assertEquals(Charset.forName("UTF-8"), mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testDateNumeric() throws IOException { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)); [EOL]     String json = MAPPER.writeValueAsString(new Date(199L)); [EOL]     assertEquals("199", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testInnerClassWithType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(DefaultTyping.NON_FINAL); [EOL]     String json = mapper.writeValueAsString(new BeanWithAnon()); [EOL]     BeanWithAnon result = mapper.readValue(json, BeanWithAnon.class); [EOL]     assertEquals(BeanWithAnon.class, result.getClass()); [EOL] }
public void testInnerClassWithType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(DefaultTyping.NON_FINAL); [EOL]     String json = mapper.writeValueAsString(new BeanWithAnon()); [EOL]     BeanWithAnon result = mapper.readValue(json, BeanWithAnon.class); [EOL]     assertEquals(BeanWithAnon.class, result.getClass()); [EOL] }
public void testInnerClassWithType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(DefaultTyping.NON_FINAL); [EOL]     String json = mapper.writeValueAsString(new BeanWithAnon()); [EOL]     BeanWithAnon result = mapper.readValue(json, BeanWithAnon.class); [EOL]     assertEquals(BeanWithAnon.class, result.getClass()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testInnerClassWithType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(DefaultTyping.NON_FINAL); [EOL]     String json = mapper.writeValueAsString(new BeanWithAnon()); [EOL]     BeanWithAnon result = mapper.readValue(json, BeanWithAnon.class); [EOL]     assertEquals(BeanWithAnon.class, result.getClass()); [EOL] }
public void testInnerClassWithType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(DefaultTyping.NON_FINAL); [EOL]     String json = mapper.writeValueAsString(new BeanWithAnon()); [EOL]     BeanWithAnon result = mapper.readValue(json, BeanWithAnon.class); [EOL]     assertEquals(BeanWithAnon.class, result.getClass()); [EOL] }
public void testSimpleSetterlessCollectionFailure() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     m.configure(MapperFeature.USE_GETTERS_AS_SETTERS, false); [EOL]     assertFalse(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)); [EOL]     try { [EOL]         m.readValue("{\"values\":[ \"abc\", \"def\" ]}", CollectionBean.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field"); [EOL]     } [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testSimpleUUIDForClassRoundTrip() throws Exception { [EOL]     UUIDNode root = new UUIDNode(1); [EOL]     UUIDNode child1 = new UUIDNode(2); [EOL]     UUIDNode child2 = new UUIDNode(3); [EOL]     root.first = child1; [EOL]     root.second = child2; [EOL]     child1.parent = root; [EOL]     child2.parent = root; [EOL]     child1.first = child2; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     UUIDNode result = mapper.readValue(json, UUIDNode.class); [EOL]     assertEquals(1, result.value); [EOL]     UUIDNode result2 = result.first; [EOL]     UUIDNode result3 = result.second; [EOL]     assertNotNull(result2); [EOL]     assertNotNull(result3); [EOL]     assertEquals(2, result2.value); [EOL]     assertEquals(3, result3.value); [EOL]     assertSame(result, result2.parent); [EOL]     assertSame(result, result3.parent); [EOL]     assertSame(result3, result2.first); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testSimple() throws Exception { [EOL]     Bean bean = mapper.readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }", Bean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(9, bean.b); [EOL]     bean = mapper.readerWithView(ViewAA.class).withType(Bean.class).readValue("{\"a\":3, \"aa\":\"foo\", \"b\": 9 }"); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals("foo", bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.readerWithView(ViewA.class).withType(Bean.class).readValue("{\"a\":1, \"aa\":\"x\", \"b\": 3 }"); [EOL]     assertEquals(1, bean.a); [EOL]     assertNull(bean.aa); [EOL]     assertEquals(0, bean.b); [EOL]     bean = mapper.reader(Bean.class).withView(ViewB.class).readValue("{\"a\":-3, \"aa\":\"y\", \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals("y", bean.aa); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertNull(jp.nextToken()); [EOL]     assertEquals("Expected START_ARRAY", JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testMultiple() throws Exception { [EOL]     String JSON = "12  \"string\" [ 1, 2, 3 ]"; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals(12, result.intValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isTextual()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isInt()); [EOL]     assertEquals("string", result.textValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isArray()); [EOL]     assertEquals(3, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertNull(jp.nextToken()); [EOL]     assertEquals("Expected START_ARRAY", JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testMultiple() throws Exception { [EOL]     String JSON = "12  \"string\" [ 1, 2, 3 ]"; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals(12, result.intValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isTextual()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isInt()); [EOL]     assertEquals("string", result.textValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isArray()); [EOL]     assertEquals(3, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] }
public void testMultiple() throws Exception { [EOL]     String JSON = "12  \"string\" [ 1, 2, 3 ]"; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals(12, result.intValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isTextual()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isInt()); [EOL]     assertEquals("string", result.textValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isArray()); [EOL]     assertEquals(3, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testMultiple() throws Exception { [EOL]     String JSON = "12  \"string\" [ 1, 2, 3 ]"; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals(12, result.intValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isTextual()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isInt()); [EOL]     assertEquals("string", result.textValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isArray()); [EOL]     assertEquals(3, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testEndArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode result = mapper.createArrayNode(); [EOL]     assertTrue(result.isArray()); [EOL]     assertType(result, ArrayNode.class); [EOL]     assertFalse(result.isObject()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     result.add(false); [EOL]     result.insertNull(0); [EOL]     assertEquals(result, result); [EOL]     assertFalse(result.equals(null)); [EOL]     assertEquals(NullNode.instance, result.path(0)); [EOL]     assertEquals(NullNode.instance, result.get(0)); [EOL]     assertEquals(BooleanNode.FALSE, result.path(1)); [EOL]     assertEquals(BooleanNode.FALSE, result.get(1)); [EOL]     assertEquals(2, result.size()); [EOL]     assertNull(result.get(-1)); [EOL]     assertNull(result.get(2)); [EOL]     JsonNode missing = result.path(2); [EOL]     assertTrue(missing.isMissingNode()); [EOL]     assertTrue(result.path(-100).isMissingNode()); [EOL]     ArrayNode array2 = mapper.createArrayNode(); [EOL]     array2.addNull(); [EOL]     array2.add(false); [EOL]     assertEquals(result, array2); [EOL]     JsonNode rm1 = array2.remove(0); [EOL]     assertEquals(NullNode.instance, rm1); [EOL]     assertEquals(1, array2.size()); [EOL]     assertEquals(BooleanNode.FALSE, array2.get(0)); [EOL]     assertFalse(result.equals(array2)); [EOL]     JsonNode rm2 = array2.remove(0); [EOL]     assertEquals(BooleanNode.FALSE, rm2); [EOL]     assertEquals(0, array2.size()); [EOL] }
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString
public void testMultiple() throws Exception { [EOL]     String JSON = "12  \"string\" [ 1, 2, 3 ]"; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals(12, result.intValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isTextual()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isInt()); [EOL]     assertEquals("string", result.textValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isArray()); [EOL]     assertEquals(3, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] }
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertNodeNumbers(jp, 1, 1.0); [EOL] }
public void testMultiple() throws Exception { [EOL]     String JSON = "12  \"string\" [ 1, 2, 3 ]"; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonParser jp = jf.createParser(new StringReader(JSON)); [EOL]     JsonNode result = mapper.readTree(jp); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertEquals(12, result.intValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isTextual()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isInt()); [EOL]     assertEquals("string", result.textValue()); [EOL]     result = mapper.readTree(jp); [EOL]     assertTrue(result.isArray()); [EOL]     assertEquals(3, result.size()); [EOL]     assertNull(mapper.readTree(jp)); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString
public void testInt() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     int value = -90184; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().intValue()); [EOL]     assertEquals(value, result.intValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(result, IntNode.valueOf(value)); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken
public void testSimple() throws Exception { [EOL]     final String JSON = "{ \"a\" : 123, \"list\" : [ 12.25, null, true, { }, [ ] ] }"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals("Expected START_OBJECT", JsonToken.START_OBJECT.asString(), jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals("a", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("a", jp.getCurrentName()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertEquals("123", jp.getText()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals("list", jp.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals("list", jp.getCurrentName()); [EOL]     assertEquals(JsonToken.START_ARRAY.asString(), jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(12.25, jp.getDoubleValue(), 0); [EOL]     assertEquals("12.25", jp.getText()); [EOL]     assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertEquals(JsonToken.VALUE_NULL.asString
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testIgnored() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); [EOL]     _testIgnorals(mapper); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testDefaultFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept("b")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writeValueAsString(new Bean())); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testIssue877() throws Exception { [EOL]     BaseInterfaceImpl one = new BaseInterfaceImpl(); [EOL]     BaseInterfaceImpl two = new BaseInterfaceImpl(); [EOL]     one.addInstance(two); [EOL]     two.addInstance(one); [EOL]     ListWrapper<BaseInterfaceImpl> myList = new ListWrapper<BaseInterfaceImpl>(); [EOL]     myList.add(one); [EOL]     myList.add(two); [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, "@class"); [EOL]     String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList); [EOL]     ListWrapper<BaseInterfaceImpl> result; [EOL]     result = om.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     System.out.println("deserialised list size = " + result.size()); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testPolymorphicSerdeWithDelegate() throws Exception { [EOL]     AdditionInterface adder = new AdditionInterfaceImpl(1); [EOL]     assertEquals(2, adder.add(1)); [EOL]     String json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL]     adder = new NegatingAdditionInterface(adder); [EOL]     assertEquals(0, adder.add(1)); [EOL]     json = MAPPER.writeValueAsString(adder); [EOL]     assertEquals("{\"boingo\":\"boopsy\",\"toAdd\":1}", json); [EOL]     assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1)); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testModifySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(newSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new Integer(123))); [EOL] }
public void testModifySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(newSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new Integer(123))); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIssue329() throws Exception { [EOL]     ArrayList<Animal> animals = new ArrayList<Animal>(); [EOL]     animals.add(new Dog("Spot")); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructParametricType(Iterator.class, Animal.class); [EOL]     String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator()); [EOL]     if (json.indexOf("\"object-type\":\"doggy\"") < 0) { [EOL]         fail("No polymorphic type retained, should be; JSON = '" + json + "'"); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testImmutable() throws Exception { [EOL]     final String json = "{\"value\":13}"; [EOL]     ValueImmutable value = mapper.readValue(json, ValueImmutable.class); [EOL]     assertEquals(13, value.value); [EOL] }
public void testFieldIntrospection() { [EOL]     AnnotatedClass ac = AnnotatedClass.construct(FieldBean.class, new JacksonAnnotationIntrospector(), null); [EOL]     assertEquals(2, ac.getFieldCount()); [EOL]     for (AnnotatedField f : ac.fields()) { [EOL]         String fname = f.getName(); [EOL]         if (!"bar".equals(fname) &&!"props".equals(fname)) { [EOL]             fail("Unexpected field name '" + fname + "'"); [EOL]         } [EOL]     } [EOL] }
public void testFieldIntrospection() { [EOL]     AnnotatedClass ac = AnnotatedClass.construct(FieldBean.class, new JacksonAnnotationIntrospector(), null); [EOL]     assertEquals(2, ac.getFieldCount()); [EOL]     for (AnnotatedField f : ac.fields()) { [EOL]         String fname = f.getName(); [EOL]         if (!"bar".equals(fname) &&!"props".equals(fname)) { [EOL]             fail("Unexpected field name '" + fname + "'"); [EOL]         } [EOL]     } [EOL] }
public void testEnumsWhenDisabled() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(Alpha.B, m.readValue(quote("B"), Alpha.class)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     assertEquals(Alpha.B, m.readValue(quote("B"), Alpha.class)); [EOL] }
public void testInnerClassWithType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(DefaultTyping.NON_FINAL); [EOL]     String json = mapper.writeValueAsString(new BeanWithAnon()); [EOL]     BeanWithAnon result = mapper.readValue(json, BeanWithAnon.class); [EOL]     assertEquals(BeanWithAnon.class, result.getClass()); [EOL] }
public void testInterfaceDefaulting() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addAbstractTypeMapping(CharSequence.class, MyString.class); [EOL]     mapper.registerModule(mod); [EOL]     Object result = mapper.readValue(quote("abc"), CharSequence.class); [EOL]     assertEquals(MyString.class, result.getClass()); [EOL]     assertEquals("abc", ((MyString) result).value); [EOL] }
public void testInterfaceDefaulting() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule mod = new SimpleModule("test", Version.unknownVersion()); [EOL]     mod.addAbstractTypeMapping(CharSequence.class, MyString.class); [EOL]     mapper.registerModule(mod); [EOL]     Object result = mapper.readValue(quote("abc"), CharSequence.class); [EOL]     assertEquals(MyString.class, result.getClass()); [EOL]     assertEquals("abc", ((MyString) result).value); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSimpleViaObjectMapper() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.put("number", 15); [EOL]     n.put("string", "abc"); [EOL]     ObjectNode n2 = n.putObject("ob"); [EOL]     n2.putArray("arr"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("abc", result.get("string")); [EOL]     assertEquals(Integer.valueOf(15), result.get("number")); [EOL]     Map<String, Object> ob = (Map<String, Object>) result.get("ob"); [EOL]     assertEquals(1, ob.size()); [EOL]     List<Object> list = (List<Object>) ob.get("arr"); [EOL]     assertEquals(0, list.size()); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateSql() throws Exception { [EOL]     java.sql.Date value = new java.sql.Date(0L); [EOL]     value.setYear(99); [EOL]     value.setDate(19); [EOL]     value.setMonth(Calendar.APRIL); [EOL]     long now = value.getTime(); [EOL]     assertEquals(quote("1981-07-13"), MAPPER.writeValueAsString(value)); [EOL]     java.sql.Date result = MAPPER.readValue(quote("1981-07-13"), java.sql.Date.class); [EOL]     Calendar c = gmtCalendar(result.getTime()); [EOL]     assertEquals(1999, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.APRIL, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     String expStr = "1981-07-13"; [EOL]     result = MAPPER.readValue(quote(expStr), java.sql.Date.class); [EOL]     c.setTimeInMillis(result.getTime()); [EOL]     assertEquals(1981, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateSql() throws Exception { [EOL]     java.sql.Date value = new java.sql.Date(0L); [EOL]     value.setYear(99); [EOL]     value.setDate(19); [EOL]     value.setMonth(Calendar.APRIL); [EOL]     long now = value.getTime(); [EOL]     assertEquals(quote("1981-07-13"), MAPPER.writeValueAsString(value)); [EOL]     java.sql.Date result = MAPPER.readValue(quote("1981-07-13"), java.sql.Date.class); [EOL]     Calendar c = gmtCalendar(result.getTime()); [EOL]     assertEquals(1999, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.APRIL, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     String expStr = "1981-07-13"; [EOL]     result = MAPPER.readValue(quote(expStr), java.sql.Date.class); [EOL]     c.setTimeInMillis(result.getTime()); [EOL]     assertEquals(1981, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testClassMixInsMidLevel() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result; [EOL]     LeafClass bean = new LeafClass("xyz"); [EOL]     bean._c = "c2"; [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("xyz", result.get("a")); [EOL]     assertEquals("c2", result.get("c")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class); [EOL]     result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("c2", result.get("c")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testWithGetterAsSetter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new CStyleStrategy()); [EOL]     SetterlessWithValue input = new SetterlessWithValue().add(3); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"value_list\":[{\"int_value\":3}]}", json); [EOL]     SetterlessWithValue result = mapper.readValue(json, SetterlessWithValue.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(1, result.values.size()); [EOL]     assertEquals(3, result.values.get(0).intValue); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(new Locale("en"), mapper.readValue(quote("en"), Locale.class)); [EOL]     assertEquals(new Locale("es", "ES"), mapper.readValue(quote("es_ES"), Locale.class)); [EOL]     assertEquals(new Locale("FI", "fi", "savo"), mapper.readValue(quote("fi_FI_savo"), Locale.class)); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(new Locale("en"), mapper.readValue(quote("en"), Locale.class)); [EOL]     assertEquals(new Locale("es", "ES"), mapper.readValue(quote("es_ES"), Locale.class)); [EOL]     assertEquals(new Locale("FI", "fi", "savo"), mapper.readValue(quote("fi_FI_savo"), Locale.class)); [EOL] }
public void testNonRootArraysUsingParser() throws Exception { [EOL]     final String JSON = "[[1],[3]]"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     Iterator<int[]> it = MAPPER.readValues(jp, int[].class); [EOL]     assertTrue(it.hasNext()); [EOL]     int[] array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(1, array[0]); [EOL]     assertTrue(it.hasNext()); [EOL]     array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(3, array[0]); [EOL]     assertFalse(it.hasNext()); [EOL]     jp.close(); [EOL] }
public void testNonRootArraysUsingParser() throws Exception { [EOL]     final String JSON = "[[1],[3]]"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     Iterator<int[]> it = MAPPER.readValues(jp, int[].class); [EOL]     assertTrue(it.hasNext()); [EOL]     int[] array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(1, array[0]); [EOL]     assertTrue(it.hasNext()); [EOL]     array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(3, array[0]); [EOL]     assertFalse(it.hasNext()); [EOL]     jp.close(); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testNonRootArraysUsingParser() throws Exception { [EOL]     final String JSON = "[[1],[3]]"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     Iterator<int[]> it = MAPPER.readValues(jp, int[].class); [EOL]     assertTrue(it.hasNext()); [EOL]     int[] array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(1, array[0]); [EOL]     assertTrue(it.hasNext()); [EOL]     array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(3, array[0]); [EOL]     assertFalse(it.hasNext()); [EOL]     jp.close(); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testIntPrimitiveNonNumeric() throws Exception { [EOL]     float value = Float.POSITIVE_INFINITY; [EOL]     FloatBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), FloatBean.class); [EOL]     assertEquals(value, result._v); [EOL]     float[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), float[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Float.POSITIVE_INFINITY, array[0]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testNonRootArraysUsingParser() throws Exception { [EOL]     final String JSON = "[[1],[3]]"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     Iterator<int[]> it = MAPPER.readValues(jp, int[].class); [EOL]     assertTrue(it.hasNext()); [EOL]     int[] array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(1, array[0]); [EOL]     assertTrue(it.hasNext()); [EOL]     array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(3, array[0]); [EOL]     assertFalse(it.hasNext()); [EOL]     jp.close(); [EOL] }
public void testNonRootArraysUsingParser() throws Exception { [EOL]     final String JSON = "[[1],[3]]"; [EOL]     JsonParser jp = MAPPER.getFactory().createParser(JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     Iterator<int[]> it = MAPPER.readValues(jp, int[].class); [EOL]     assertTrue(it.hasNext()); [EOL]     int[] array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(1, array[0]); [EOL]     assertTrue(it.hasNext()); [EOL]     array = it.next(); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(3, array[0]); [EOL]     assertFalse(it.hasNext()); [EOL]     jp.close(); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testDoublePrimitiveNonNumeric() throws Exception { [EOL]     double value = Double.POSITIVE_INFINITY; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Double.POSITIVE_INFINITY, array[0]); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testNullHandling() throws Exception { [EOL]     JsonNode n = objectReader().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     n = objectMapper().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     ObjectNode root = (ObjectNode) objectReader().readTree("{\"x\":null}"); [EOL]     assertEquals(1, root.size()); [EOL]     n = root.get("x"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL] }
public void testNullHandling() throws Exception { [EOL]     JsonNode n = objectReader().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     n = objectMapper().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     ObjectNode root = (ObjectNode) objectReader().readTree("{\"x\":null}"); [EOL]     assertEquals(1, root.size()); [EOL]     n = root.get("x"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL] }
public void testArrayTypingNested() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS); [EOL]     ArrayBean bean = new ArrayBean(new String[0][0]); [EOL]     String json = m.writeValueAsString(bean); [EOL]     ArrayBean result = m.readValue(json, ArrayBean.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(String[][].class, result.values.getClass()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testArrayTypingNested() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS); [EOL]     ArrayBean bean = new ArrayBean(new String[0][0]); [EOL]     String json = m.writeValueAsString(bean); [EOL]     ArrayBean result = m.readValue(json, ArrayBean.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(String[][].class, result.values.getClass()); [EOL] }
public void testSkipChildrenWrt370() throws Exception { [EOL]     ObjectMapper o = new ObjectMapper(); [EOL]     ObjectNode n = o.createObjectNode(); [EOL]     n.putObject("inner").put("value", "test"); [EOL]     n.putObject("unknown").putNull("inner"); [EOL]     Jackson370Bean obj = o.readValue(n.traverse(), Jackson370Bean.class); [EOL]     assertNotNull(obj.inner); [EOL]     assertEquals("test", obj.inner.value); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testArrayTypingNested() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS); [EOL]     ArrayBean bean = new ArrayBean(new String[0][0]); [EOL]     String json = m.writeValueAsString(bean); [EOL]     ArrayBean result = m.readValue(json, ArrayBean.class); [EOL]     assertNotNull(result.values); [EOL]     assertEquals(String[][].class, result.values.getClass()); [EOL] }
public void testFloatPrimitiveNonNumeric() throws Exception { [EOL]     float value = Float.POSITIVE_INFINITY; [EOL]     FloatBean result = MAPPER.readValue(new StringReader("{\"v\":\"" + value + "\"}"), FloatBean.class); [EOL]     assertEquals(value, result._v); [EOL]     float[] array = MAPPER.readValue(new StringReader("[ \"Infinity\" ]"), float[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(Float.POSITIVE_INFINITY, array[0]); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testDeepUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new DeepUnwrapping("Tatu", 1, 2))); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testMissingFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.writeValueAsString(new Bean()); [EOL]         fail("Should have failed without configured filter"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Can not resolve BeanPropertyFilter with id 'RootFilter'"); [EOL]     } [EOL]     SimpleFilterProvider fp = new SimpleFilterProvider().setFailOnUnknownId(false); [EOL]     mapper.setFilters(fp); [EOL]     String json = mapper.writeValueAsString(new Bean()); [EOL]     assertEquals("{\"a\":\"a\",\"b\":\"b\"}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testOrderByKey() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertFalse(m.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)); [EOL]     LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put("b", 3); [EOL]     map.put("a", 6); [EOL]     assertEquals("{\"b\":3,\"a\":6}", m.writeValueAsString(map)); [EOL]     assertEquals("{\"a\":6,\"b\":3}", m.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS).writeValueAsString(map)); [EOL] }
public void testOrderByKey() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertFalse(m.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)); [EOL]     LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put("b", 3); [EOL]     map.put("a", 6); [EOL]     assertEquals("{\"b\":3,\"a\":6}", m.writeValueAsString(map)); [EOL]     assertEquals("{\"a\":6,\"b\":3}", m.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS).writeValueAsString(map)); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testJackson744() throws Exception { [EOL]     BasicBeanDescription beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue744Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     AnnotatedMethod setter = beanDesc.findAnySetter(); [EOL]     assertNotNull(setter); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testMergeWithRename() { [EOL]     POJOPropertiesCollector coll = collector(mapper, MergedProperties.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("x"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertFalse(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInvalidDup() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue("{}", BadBean1.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{}", BadBean2.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL] }
public void testInvalidDup() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue("{}", BadBean1.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{}", BadBean2.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL] }
public void testInvalidDup() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue("{}", BadBean1.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL]     try { [EOL]         mapper.readValue("{}", BadBean2.class); [EOL]     } catch (Exception e) { [EOL]         verifyException(e, "Duplicate injectable value"); [EOL]     } [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testPartialIgnore() { [EOL]     POJOPropertiesCollector coll = collector(mapper, IgnoredSetter.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("value"); [EOL]     assertNotNull(prop); [EOL]     assertFalse(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertTrue(prop.hasField()); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testSimpleGetters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     assertEquals("{\"Get-key\":123}", mapper.writeValueAsString(new GetterBean())); [EOL] }
public void testSimpleFields() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new PrefixStrategy()); [EOL]     String json = mapper.writeValueAsString(new FieldBean(999)); [EOL]     assertEquals("{\"Field-key\":999}", json); [EOL]     FieldBean result = mapper.readValue(json, FieldBean.class); [EOL]     assertEquals(999, result.key); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testInnerClassWithAnnotationsInCreator() throws Exception { [EOL]     BasicBeanDescription beanDesc; [EOL]     beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL]     beanDesc = mapper.getDeserializationConfig().introspect(mapper.constructType(Issue701Bean.class)); [EOL]     assertNotNull(beanDesc); [EOL] }
public void testPerClassAnnotation() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     BeanWithPrefixNames input = new BeanWithPrefixNames(); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"Get-a\":3}", json); [EOL]     BeanWithPrefixNames output = mapper.readValue("{\"Set-a\":7}", BeanWithPrefixNames.class); [EOL]     assertEquals(7, output.a); [EOL] }
public void testPerClassAnnotation() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     BeanWithPrefixNames input = new BeanWithPrefixNames(); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"Get-a\":3}", json); [EOL]     BeanWithPrefixNames output = mapper.readValue("{\"Set-a\":7}", BeanWithPrefixNames.class); [EOL]     assertEquals(7, output.a); [EOL] }
public void testPerClassAnnotation() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     BeanWithPrefixNames input = new BeanWithPrefixNames(); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"Get-a\":3}", json); [EOL]     BeanWithPrefixNames output = mapper.readValue("{\"Set-a\":7}", BeanWithPrefixNames.class); [EOL]     assertEquals(7, output.a); [EOL] }
public void testPerClassAnnotation() throws Exception { [EOL]     final ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     BeanWithPrefixNames input = new BeanWithPrefixNames(); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"Get-a\":3}", json); [EOL]     BeanWithPrefixNames output = mapper.readValue("{\"Set-a\":7}", BeanWithPrefixNames.class); [EOL]     assertEquals(7, output.a); [EOL] }
public void testWithNaturalScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Integer); [EOL]     input = new ExternalTypeWithNonPOJO(Boolean.TRUE); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof Boolean); [EOL]     input = new ExternalTypeWithNonPOJO("foobar"); [EOL]     json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof String); [EOL]     assertEquals("foobar", result.value); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNullHandling() throws Exception { [EOL]     JsonNode n = objectReader().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     n = objectMapper().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     ObjectNode root = (ObjectNode) objectReader().readTree("{\"x\":null}"); [EOL]     assertEquals(1, root.size()); [EOL]     n = root.get("x"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL] }
public void testNullHandling() throws Exception { [EOL]     JsonNode n = objectReader().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     n = objectMapper().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     ObjectNode root = (ObjectNode) objectReader().readTree("{\"x\":null}"); [EOL]     assertEquals(1, root.size()); [EOL]     n = root.get("x"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL] }
public void testNullHandling() throws Exception { [EOL]     JsonNode n = objectReader().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     n = objectMapper().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     ObjectNode root = (ObjectNode) objectReader().readTree("{\"x\":null}"); [EOL]     assertEquals(1, root.size()); [EOL]     n = root.get("x"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL] }
public void testNullHandling() throws Exception { [EOL]     JsonNode n = objectReader().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     n = objectMapper().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     ObjectNode root = (ObjectNode) objectReader().readTree("{\"x\":null}"); [EOL]     assertEquals(1, root.size()); [EOL]     n = root.get("x"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL] }
public void testNullHandling() throws Exception { [EOL]     JsonNode n = objectReader().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     n = objectMapper().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     ObjectNode root = (ObjectNode) objectReader().readTree("{\"x\":null}"); [EOL]     assertEquals(1, root.size()); [EOL]     n = root.get("x"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL] }
public void testNullHandling() throws Exception { [EOL]     JsonNode n = objectReader().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     n = objectMapper().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     ObjectNode root = (ObjectNode) objectReader().readTree("{\"x\":null}"); [EOL]     assertEquals(1, root.size()); [EOL]     n = root.get("x"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNullHandling() throws Exception { [EOL]     JsonNode n = objectReader().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     n = objectMapper().readTree("null"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL]     ObjectNode root = (ObjectNode) objectReader().readTree("{\"x\":null}"); [EOL]     assertEquals(1, root.size()); [EOL]     n = root.get("x"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isNull()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testNonRootMapsWithObjectReader() throws Exception { [EOL]     String JSON = "[{ \"hi\": \"ho\", \"neighbor\": \"Joe\" },\n" + "{\"boy\": \"howdy\", \"huh\": \"what\"}]"; [EOL]     final MappingIterator<Map<String, Object>> iterator = MAPPER.reader().withType(new TypeReference<Map<String, Object>>() { [EOL]     }).readValues(JSON); [EOL]     Map<String, Object> map; [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertTrue(iterator.hasNext()); [EOL]     map = iterator.nextValue(); [EOL]     assertEquals(2, map.size()); [EOL]     assertFalse(iterator.hasNext()); [EOL] }
public void testProblem294() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"name\":\"foobar\" }", BeanFor294.class); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getTargetName()); [EOL]         } [EOL] }
public void testProblem294() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"name\":\"foobar\" }", BeanFor294.class); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getTargetName()); [EOL]         } [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testObjectReader() throws IOException { [EOL]     ObjectReader origReader = new ObjectMapper().reader(MyPojo.class); [EOL]     final String JSON = "{\"x\":1,\"y\":2}"; [EOL]     MyPojo p1 = origReader.readValue(JSON); [EOL]     assertEquals(2, p1.y); [EOL]     byte[] bytes = jdkSerialize(origReader); [EOL]     ObjectReader reader2 = jdkDeserialize(bytes); [EOL]     MyPojo p2 = reader2.readValue(JSON); [EOL]     assertEquals(2, p2.y); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
public void testParametricTypes() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t = tf.constructParametricType(ArrayList.class, String.class); [EOL]     assertEquals(CollectionType.class, t.getClass()); [EOL]     JavaType strC = tf.constructType(String.class); [EOL]     assertEquals(1, t.containedTypeCount()); [EOL]     assertEquals(strC, t.containedType(0)); [EOL]     assertNull(t.containedType(1)); [EOL]     JavaType t2 = tf.constructParametricType(Map.class, strC, t); [EOL]     assertEquals(MapType.class, t2.getClass()); [EOL]     assertEquals(2, t2.containedTypeCount()); [EOL]     assertEquals(strC, t2.containedType(0)); [EOL]     assertEquals(t, t2.containedType(1)); [EOL]     assertNull(t2.containedType(2)); [EOL]     JavaType custom = tf.constructParametricType(SingleArgGeneric.class, String.class); [EOL]     assertEquals(SimpleType.class, custom.getClass()); [EOL]     assertEquals(1, custom.containedTypeCount()); [EOL]     assertEquals(strC, custom.containedType(0)); [EOL]     assertNull(custom.containedType(1)); [EOL]     assertEquals("X", custom.containedTypeName(0)); [EOL]     try { [EOL]         tf.constructParametricType(Map.class, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "Need exactly 2 parameter types for Map types"); [EOL]     } [EOL]     try { [EOL]         tf.constructParametricType(SingleArgGeneric.class, strC, strC); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "expected 1 parameters, was given 2"); [EOL]     } [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertChoice(set2.iterator().next()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testJackson387() throws Exception { [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY); [EOL]     om.setSerializationInclusion(JsonInclude.Include.NON_NULL); [EOL]     om.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = om.writeValueAsString(mc); [EOL]     MyClass mc2 = om.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testDateUsingObjectWriter() throws IOException { [EOL]     DateFormat df = new SimpleDateFormat("yyyy-MM-dd'X'HH:mm:ss"); [EOL]     df.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     assertEquals(quote("1969-12-31X16:00:00"), MAPPER.writer(df).writeValueAsString(new Date(0L))); [EOL]     ObjectWriter w = MAPPER.writer((DateFormat) null); [EOL]     assertEquals("0", w.writeValueAsString(new Date(0L))); [EOL]     w = w.with(df); [EOL]     assertEquals(quote("1969-12-31X16:00:00"), w.writeValueAsString(new Date(0L))); [EOL]     w = w.with((DateFormat) null); [EOL]     assertEquals("0", w.writeValueAsString(new Date(0L))); [EOL] }
public void testDateUsingObjectWriter() throws IOException { [EOL]     DateFormat df = new SimpleDateFormat("yyyy-MM-dd'X'HH:mm:ss"); [EOL]     df.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     assertEquals(quote("1969-12-31X16:00:00"), MAPPER.writer(df).writeValueAsString(new Date(0L))); [EOL]     ObjectWriter w = MAPPER.writer((DateFormat) null); [EOL]     assertEquals("0", w.writeValueAsString(new Date(0L))); [EOL]     w = w.with(df); [EOL]     assertEquals(quote("1969-12-31X16:00:00"), w.writeValueAsString(new Date(0L))); [EOL]     w = w.with((DateFormat) null); [EOL]     assertEquals("0", w.writeValueAsString(new Date(0L))); [EOL] }
public void testJackson438() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue("{ \"name\":\"foobar\" }", BeanFor438.class); [EOL]         fail("Should have failed"); [EOL]     } catch (Exception e) { [EOL]         if (!(e instanceof JsonMappingException)) { [EOL]             fail("Should have received JsonMappingException, caught " + e.getClass().getName()); [EOL]         } [EOL]         verifyException(e, "don't like that name"); [EOL]         Throwable t = e.getCause(); [EOL]         assertNotNull(t); [EOL]         assertEquals(IllegalArgumentException.class, t.getClass()); [EOL]         verifyException(e, "don't like that name"); [EOL]     } [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testIssue693() throws Exception { [EOL]     Parent parent = new Parent(); [EOL]     parent.addChild(new Child("foo")); [EOL]     parent.addChild(new Child("bar")); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] bytes = mapper.writeValueAsBytes(parent); [EOL]     Parent value = mapper.readValue(bytes, Parent.class); [EOL]     for (Child child : value.children) { [EOL]         assertEquals(value, child.getParent()); [EOL]     } [EOL] }
public void testPrettyPrinter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer(); [EOL]     HashMap<String, Integer> data = new HashMap<String, Integer>(); [EOL]     data.put("a", 1); [EOL]     assertEquals("{\"a\":1}", writer.writeValueAsString(data)); [EOL]     writer = writer.withDefaultPrettyPrinter(); [EOL]     String lf = System.getProperty("line.separator"); [EOL]     assertEquals("{" + lf + "  \"a\" : 1" + lf + "}", writer.writeValueAsString(data)); [EOL]     writer = writer.with((PrettyPrinter) null); [EOL]     assertEquals("{\"a\":1}", writer.writeValueAsString(data)); [EOL] }
public void testPrettyPrinter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectWriter writer = mapper.writer(); [EOL]     HashMap<String, Integer> data = new HashMap<String, Integer>(); [EOL]     data.put("a", 1); [EOL]     assertEquals("{\"a\":1}", writer.writeValueAsString(data)); [EOL]     writer = writer.withDefaultPrettyPrinter(); [EOL]     String lf = System.getProperty("line.separator"); [EOL]     assertEquals("{" + lf + "  \"a\" : 1" + lf + "}", writer.writeValueAsString(data)); [EOL]     writer = writer.with((PrettyPrinter) null); [EOL]     assertEquals("{\"a\":1}", writer.writeValueAsString(data)); [EOL] }
public void testMatchingSingle() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     JsonNode node = root.findValue("b"); [EOL]     assertNotNull(node); [EOL]     assertEquals(3, node.intValue()); [EOL]     node = root.findParent("b"); [EOL]     assertNotNull(node); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, ((ObjectNode) node).size()); [EOL]     assertEquals(3, node.path("b").intValue()); [EOL] }
public void testMatchingSingle() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     JsonNode node = root.findValue("b"); [EOL]     assertNotNull(node); [EOL]     assertEquals(3, node.intValue()); [EOL]     node = root.findParent("b"); [EOL]     assertNotNull(node); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, ((ObjectNode) node).size()); [EOL]     assertEquals(3, node.path("b").intValue()); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     PointListWrapperMap map = objectReader(PointListWrapperMap.class).readValue("{\"values\":{\"a\":[1,2]}}"); [EOL]     assertNotNull(map); [EOL]     assertNotNull(map.values); [EOL]     assertEquals(1, map.values.size()); [EOL]     Point p = map.values.get("a"); [EOL]     assertNotNull(p); [EOL]     assertEquals(1, p.x); [EOL]     assertEquals(2, p.y); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testListContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ListBean result = m.readValue(" { \"values\" : [ 1, 2, 3 ] } ", ListBean.class); [EOL]     assertNotNull(result); [EOL]     List<Object> obs = result.values; [EOL]     assertNotNull(obs); [EOL]     assertEquals(3, obs.size()); [EOL]     assertEquals(ValueClass.class, obs.get(0).getClass()); [EOL]     assertEquals(1, ((ValueClass) obs.get(0))._a); [EOL]     assertEquals(ValueClass.class, obs.get(1).getClass()); [EOL]     assertEquals(2, ((ValueClass) obs.get(1))._a); [EOL]     assertEquals(ValueClass.class, obs.get(2).getClass()); [EOL]     assertEquals(3, ((ValueClass) obs.get(2))._a); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testDeserializeDecimalProperExceptionWhenIdSet() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = "{\"id\": 5, \"defaultValue\": { \"value\": \"123\" } }"; [EOL]     try { [EOL]         MyBeanHolder result = mapper.readValue(json, MyBeanHolder.class); [EOL]         fail("should have raised exception instead value was set to " + result.defaultValue.value.decimal.toString()); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "not numeric"); [EOL]     } [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testHasNextWithEndArrayManagedParser() throws Exception { [EOL]     final String JSON = "[1,3]"; [EOL]     Iterator<Integer> it = MAPPER.reader(Integer.class).readValues(JSON); [EOL]     assertTrue(it.hasNext()); [EOL]     int value = it.next(); [EOL]     assertEquals(1, value); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertEquals(3, value); [EOL]     assertFalse(it.hasNext()); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testBinaryNode() throws Exception { [EOL]     byte[] inputBinary = new byte[] { 0, -5 }; [EOL]     BinaryNode n = new BinaryNode(inputBinary); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_EMBEDDED_OBJECT, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(inputBinary, data); [EOL]     assertEquals("APs=", jp.getText()); [EOL]     assertNull(jp.nextToken()); [EOL] }
public void testBinaryNode() throws Exception { [EOL]     byte[] inputBinary = new byte[] { 0, -5 }; [EOL]     BinaryNode n = new BinaryNode(inputBinary); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_EMBEDDED_OBJECT, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(inputBinary, data); [EOL]     assertEquals("APs=", jp.getText()); [EOL]     assertNull(jp.nextToken()); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testTyped() { [EOL]     _testObjectBuffer(Integer.class); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testStaticTypingForClass() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForStaticTyping()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testSpecialMap() throws IOException { [EOL]     final ObjectWrapperMap map = MAPPER.readValue(UNTYPED_MAP_JSON, ObjectWrapperMap.class); [EOL]     _doTestUntyped(map); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateSql() throws Exception { [EOL]     java.sql.Date value = new java.sql.Date(0L); [EOL]     value.setYear(99); [EOL]     value.setDate(19); [EOL]     value.setMonth(Calendar.APRIL); [EOL]     long now = value.getTime(); [EOL]     assertEquals(value, MAPPER.readValue(String.valueOf(now), java.sql.Date.class)); [EOL]     java.sql.Date result = MAPPER.readValue(quote(value.toString()), java.sql.Date.class); [EOL]     Calendar c = gmtCalendar(result.getTime()); [EOL]     assertEquals(1999, c.get(Calendar.MONTH)); [EOL]     assertEquals(19, c.get(Calendar.DAY_OF_MONTH)); [EOL]     String expStr = "1981-07-13"; [EOL]     result = MAPPER.readValue(quote(expStr), java.sql.Date.class); [EOL]     c.setTimeInMillis(result.getTime()); [EOL]     assertEquals(1981, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateSql() throws Exception { [EOL]     java.sql.Date value = new java.sql.Date(0L); [EOL]     value.setYear(99); [EOL]     value.setDate(19); [EOL]     value.setMonth(Calendar.APRIL); [EOL]     long now = value.getTime(); [EOL]     assertEquals(value, MAPPER.readValue(String.valueOf(now), java.sql.Date.class)); [EOL]     java.sql.Date result = MAPPER.readValue(quote(value.toString()), java.sql.Date.class); [EOL]     Calendar c = gmtCalendar(result.getTime()); [EOL]     assertEquals(1999, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.APRIL, c.get(Calendar.MONTH)); [EOL]     assertEquals(19, c.get(Calendar.DAY_OF_MONTH)); [EOL]     String expStr = "1981-07-13"; [EOL]     result = MAPPER.readValue(quote(expStr), java.sql.Date.class); [EOL]     c.setTimeInMillis(result.getTime()); [EOL]     assertEquals(1981, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testDateScalars() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     long ts = 12345678L; [EOL]     assertEquals("[[\"java.util.Date\"," + ts + "]]", m.writeValueAsString(new Object[] { new Date(ts) })); [EOL]     Calendar c = Calendar.getInstance(); [EOL]     c.setTimeInMillis(ts); [EOL]     String json = m.writeValueAsString(new Object[] { c }); [EOL]     assertEquals("[[\"" + c.getClass().getName() + "\"," + ts + "]]", json); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertTrue(result[0] instanceof Calendar); [EOL]     assertEquals(ts, ((Calendar) result[0]).getTimeInMillis()); [EOL] }
public void testTimeZone() throws Exception { [EOL]     assertEquals(TimeZone.getTimeZone("PST"), MAPPER.readValue("{\"tz\":\"PST\"}", TimeZone.class)); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testWithTimeZoneOverride() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd/HH:mm z")); [EOL]     mapper.setTimeZone(TimeZone.getTimeZone("PST")); [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     String json = mapper.writeValueAsString(new Date(0)); [EOL]     assertEquals(quote("1969-12-31/16:00 PST"), json); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testCustomCalendarWithAnnotation() throws Exception { [EOL]     CalendarAsStringBean cbean = MAPPER.readValue("{\"cal\":\";2007/07/13;\"}", CalendarAsStringBean.class); [EOL]     assertNotNull(cbean); [EOL]     assertNotNull(cbean.cal); [EOL]     Calendar c = cbean.cal; [EOL]     assertEquals(2007, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
public void testWithScalar118() throws Exception { [EOL]     ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(new java.util.Date(123L)); [EOL]     String json = MAPPER.writeValueAsString(input); [EOL]     assertNotNull(json); [EOL]     ExternalTypeWithNonPOJO result = MAPPER.readValue(json, ExternalTypeWithNonPOJO.class); [EOL]     assertNotNull(result.value); [EOL]     assertTrue(result.value instanceof java.util.Date); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateSql() throws Exception { [EOL]     java.sql.Date value = new java.sql.Date(0L); [EOL]     value.setYear(99); [EOL]     value.setDate(19); [EOL]     value.setMonth(Calendar.APRIL); [EOL]     long now = value.getTime(); [EOL]     assertEquals(value, MAPPER.readValue(String.valueOf(now), java.sql.Date.class)); [EOL]     java.sql.Date result = MAPPER.readValue(quote(value.toString()), java.sql.Date.class); [EOL]     Calendar c = gmtCalendar(result.getTime()); [EOL]     assertEquals(1999, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.APRIL, c.get(Calendar.MONTH)); [EOL]     assertEquals(19, c.get(Calendar.DAY_OF_MONTH)); [EOL]     String expStr = "1981-07-13"; [EOL]     result = MAPPER.readValue(quote(expStr), java.sql.Date.class); [EOL]     c.setTimeInMillis(result.getTime()); [EOL]     assertEquals(1981, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testDateSql() throws Exception { [EOL]     java.sql.Date value = new java.sql.Date(0L); [EOL]     value.setYear(99); [EOL]     value.setDate(19); [EOL]     value.setMonth(Calendar.APRIL); [EOL]     long now = value.getTime(); [EOL]     assertEquals(value, MAPPER.readValue(String.valueOf(now), java.sql.Date.class)); [EOL]     java.sql.Date result = MAPPER.readValue(quote(value.toString()), java.sql.Date.class); [EOL]     Calendar c = gmtCalendar(result.getTime()); [EOL]     assertEquals(1999, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.APRIL, c.get(Calendar.MONTH)); [EOL]     assertEquals(19, c.get(Calendar.DAY_OF_MONTH)); [EOL]     String expStr = "1981-07-13"; [EOL]     result = MAPPER.readValue(quote(expStr), java.sql.Date.class); [EOL]     c.setTimeInMillis(result.getTime()); [EOL]     assertEquals(1981, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.JULY, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testTimeZone() throws IOException { [EOL]     String json = "{\"tz\":\"PST\"}"; [EOL]     TimeZone result = MAPPER.readValue(json, TimeZone.class); [EOL]     assertNotNull(result); [EOL]     assertEquals("PST", result.getTimeZone()); [EOL] }
public void testTimeZone() throws IOException { [EOL]     assertEquals(TimeZone.getTimeZone("PST"), MAPPER.readValue(quote("PST"), TimeZone.class)); [EOL]     assertEquals(TimeZone.getTimeZone("GMT"), MAPPER.readValue(quote("GMT"), Calendar.class)); [EOL] }
public void testTimeZone() throws IOException { [EOL]     assertEquals(TimeZone.getTimeZone("PST"), MAPPER.readValue(quote("PST"), TimeZone.class)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testDataBind() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n" + "}"); [EOL]     Person tatu = m.treeToValue(tree, Person.class); [EOL]     assertNotNull(tatu); [EOL]     assertEquals(42, tatu.magicNumber); [EOL]     assertEquals("Tatu", tatu.name); [EOL]     assertNotNull(tatu.kids); [EOL]     assertEquals(3, tatu.kids.size()); [EOL]     assertEquals("Leo", tatu.kids.get(0)); [EOL]     assertEquals("Lila", tatu.kids.get(1)); [EOL]     assertEquals("Leia", tatu.kids.get(2)); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTimeZoneInBean() throws IOException { [EOL]     String json = MAPPER.writeValueAsString(new TimeZoneBean("PST")); [EOL]     assertEquals("{\"tz\":\"PST\"}", json); [EOL] }
public void testTimeZoneInBean() throws IOException { [EOL]     String json = MAPPER.writeValueAsString(new TimeZoneBean("PST")); [EOL]     assertEquals("{\"tz\":\"PST\"}", json); [EOL] }
public void testTimeZoneInBean() throws IOException { [EOL]     String json = mapper.writeValueAsString(new TimeZoneBean("PST")); [EOL]     assertEquals("{\"tz\":\"PST\"}", json); [EOL] }
public void testTimeZoneInBean() throws IOException { [EOL]     String json = MAPPER.writeValueAsString(new TimeZoneBean("PST")); [EOL]     assertEquals("{\"tz\":\"PST\"}", json); [EOL] }
public void testTimeZoneInBean() throws IOException { [EOL]     String json = mapper.writeValueAsString(new TimeZoneBean("PST")); [EOL]     assertEquals("{\"tz\":\"PST\"}", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testIssue797() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new Bean797BaseImpl()); [EOL]     assertEquals("{}", json); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testEnumsWhenDisabled() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals(Alpha.B, m.readValue(quote("B"), Alpha.class)); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     assertEquals(Alpha.B, m.readValue(quote("B"), Alpha.class)); [EOL] }
public void testJackson703() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     BasicBeanDescription beanDesc = mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class)); [EOL]     assertNotNull(beanDesc); [EOL]     Jackson703 bean = new Jackson703(); [EOL]     String json = mapper.writeValueAsString(bean); [EOL]     assertNotNull(json); [EOL] }
public void testToStringEnumMaps() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     EnumMap<LowerCaseEnum, String> value = m.readValue("{\"a\":\"value\"}", new TypeReference<EnumMap<LowerCaseEnum, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(LowerCaseEnum.A)); [EOL] }
public void testToStringEnums() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     LowerCaseEnum value = m.readValue("\"c\"", LowerCaseEnum.class); [EOL]     assertEquals(LowerCaseEnum.C, value); [EOL] }
public void testToStringEnums() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     LowerCaseEnum value = m.readValue("\"c\"", LowerCaseEnum.class); [EOL]     assertEquals(LowerCaseEnum.C, value); [EOL] }
public void testToStringEnums() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     LowerCaseEnum value = m.readValue("\"c\"", LowerCaseEnum.class); [EOL]     assertEquals(LowerCaseEnum.C, value); [EOL] }
public void testToStringEnumMaps() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     EnumMap<LowerCaseEnum, String> value = m.readValue("{\"a\":\"value\"}", new TypeReference<EnumMap<LowerCaseEnum, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(LowerCaseEnum.A)); [EOL] }
public void testToStringEnums() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     LowerCaseEnum value = m.readValue("\"c\"", LowerCaseEnum.class); [EOL]     assertEquals(LowerCaseEnum.C, value); [EOL] }
public void testToStringEnumMaps() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     EnumMap<LowerCaseEnum, String> value = m.readValue("{\"a\":\"value\"}", new TypeReference<EnumMap<LowerCaseEnum, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(LowerCaseEnum.A)); [EOL] }
public void testToStringEnums() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, true); [EOL]     LowerCaseEnum value = m.readValue("\"c\"", LowerCaseEnum.class); [EOL]     assertEquals(LowerCaseEnum.C, value); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testLong() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = BigIntegerNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, LongNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testLong() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isLong()); [EOL]     assertType(result, LongNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, LongNode.valueOf(value)); [EOL] }
public void testInt() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = BigIntegerNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testInt() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, IntNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = BigIntegerNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     BigDecimal value = new BigDecimal("0.1"); [EOL]     JsonNode result = DecimalNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, DecimalNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, DecimalNode.valueOf(value)); [EOL] }
public void testInt() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = BigIntegerNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testInt() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, IntNode.valueOf(value)); [EOL] }
public void testBigInteger() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     BigInteger result = MAPPER.readValue(new StringReader(value.toString()), BigInteger.class); [EOL]     assertEquals(value, result); [EOL] }
public void testLong() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isLong()); [EOL]     assertType(result, LongNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, LongNode.valueOf(value)); [EOL] }
public void testInt() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, IntNode.valueOf(value)); [EOL] }
public void testLong() { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isLong()); [EOL]     assertType(result, LongNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, LongNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testFromArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode root = mapper.createArrayNode(); [EOL]     root.add(TEXT1); [EOL]     root.add(3); [EOL]     ObjectNode obj = root.addObject(); [EOL]     obj.put(FIELD1, true); [EOL]     obj.putArray(FIELD2); [EOL]     root.add(false); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromArray(sw.toString()); [EOL]     } [EOL]     verifyFromArray(root.toString()); [EOL] }
public void testFromArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode root = mapper.createArrayNode(); [EOL]     root.add(TEXT1); [EOL]     root.add(3); [EOL]     ObjectNode obj = root.addObject(); [EOL]     obj.put(FIELD1, true); [EOL]     obj.putArray(FIELD2); [EOL]     root.add(false); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromArray(sw.toString()); [EOL]     } [EOL]     verifyFromArray(root.toString()); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     BigInteger result = MAPPER.readValue(new StringReader(value.toString()), BigInteger.class); [EOL]     assertEquals(value, result); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, new BigIntegerNode(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isContainerNode()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, new BigIntegerNode(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     JsonNode result = MAPPER.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertTrue(result.isBigInteger()); [EOL]     assertType(result, BigIntegerNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, BigIntegerNode.valueOf(value)); [EOL] }
public void testBoolean() { [EOL]     BooleanNode f = BooleanNode.getFalse(); [EOL]     assertNotNull(f); [EOL]     assertTrue(f.isBoolean()); [EOL]     assertSame(f, BooleanNode.valueOf(false)); [EOL]     assertStandardEquals(f); [EOL]     assertFalse(f.booleanValue()); [EOL]     assertFalse(f.asBoolean()); [EOL]     assertEquals("false", f.asText()); [EOL]     assertEquals(JsonToken.VALUE_FALSE, f.asToken()); [EOL]     BooleanNode t = BooleanNode.getTrue(); [EOL]     assertNotNull(t); [EOL]     assertTrue(t.isBoolean()); [EOL]     assertSame(t, BooleanNode.valueOf(true)); [EOL]     assertStandardEquals(t); [EOL]     assertTrue(t.booleanValue()); [EOL]     assertTrue(t.asBoolean()); [EOL]     assertEquals("true", t.asText()); [EOL]     assertEquals(JsonToken.VALUE_TRUE, t.asToken()); [EOL]     assertNodeNumbers(f, 0, 0.0); [EOL]     assertNodeNumbers(t, 1, 1.0); [EOL] }
public void testBooleanListAsProp() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\"" + TypedListAsProp.class.getName() + "\",[true, false]]"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class); [EOL]     TypedListAsProp<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(0)); [EOL]     assertEquals(Boolean.FALSE, result.get(1)); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testAdds() { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertNotNull(n.addArray()); [EOL]     assertNotNull(n.addObject()); [EOL]     n.addPOJO("foobar"); [EOL]     n.add(1); [EOL]     n.add(1L); [EOL]     n.add(0.5); [EOL]     n.add(0.5f); [EOL]     assertEquals(7, n.size()); [EOL]     assertNotNull(n.insertArray(0)); [EOL]     assertNotNull(n.insertObject(0)); [EOL]     n.insertPOJO(2, "xxx"); [EOL]     assertEquals(10, n.size()); [EOL] }
public void testBigInteger() throws Exception { [EOL]     BigInteger value = new BigInteger("-1234567890123456789012345567809"); [EOL]     BigInteger result = MAPPER.readValue(new StringReader(value.toString()), BigInteger.class); [EOL]     assertEquals(value, result); [EOL] }
public void testFromMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put(FIELD4, TEXT2); [EOL]     root.put(FIELD3, -1); [EOL]     root.putArray(FIELD2); [EOL]     root.put(FIELD1, DOUBLE_VALUE); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromMap(sw.toString()); [EOL]     } [EOL]     verifyFromMap(root.toString()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testAdds() { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertNotNull(n.addArray()); [EOL]     assertNotNull(n.addObject()); [EOL]     n.addPOJO("foobar"); [EOL]     n.add(1); [EOL]     n.add(1L); [EOL]     n.add(0.5); [EOL]     n.add(0.5f); [EOL]     assertEquals(7, n.size()); [EOL]     assertNotNull(n.insertArray(0)); [EOL]     assertNotNull(n.insertObject(0)); [EOL]     n.insertPOJO(2, "xxx"); [EOL]     assertEquals(10, n.size()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testCustomMapInstantiator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(MyMap.class, new MyMapInstantiator())); [EOL]     MyMap result = mapper.readValue("{ \"a\":\"b\" }", MyMap.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(MyMap.class, result.getClass()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testModifyArrayDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new ArrayDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testModifyArrayDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new ArrayDeserializerModifier())); [EOL]     List<?> result = mapper.readValue("[1,2]", List.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("foo", result.get(0)); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimpleViaObjectMapper() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.put("number", 15); [EOL]     n.put("string", "abc"); [EOL]     ObjectNode n2 = n.putObject("ob"); [EOL]     n2.putArray("arr"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("abc", result.get("string")); [EOL]     assertEquals(Integer.valueOf(15), result.get("number")); [EOL]     Map<String, Object> ob = (Map<String, Object>) result.get("ob"); [EOL]     assertEquals(1, ob.size()); [EOL]     List<Object> list = (List<Object>) ob.get("arr"); [EOL]     assertEquals(0, list.size()); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testTreeRead() throws Exception { [EOL]     String JSON = "{ }"; [EOL]     JsonNode n = MAPPER.readTree(JSON); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new StringReader(JSON)); [EOL]     assertTrue(n instanceof ObjectNode); [EOL]     n = MAPPER.readTree(new ByteArrayInputStream(JSON.getBytes("UTF-8"))); [EOL]     assertTrue(n instanceof ObjectNode); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testNodeInArray() throws Exception { [EOL]     JsonNode node = new ObjectMapper().readTree("{\"a\":3}"); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT); [EOL]     Object[] obs = new Object[] { node }; [EOL]     String json = m.writeValueAsString(obs); [EOL]     Object[] result = m.readValue(json, Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     Object ob = result[0]; [EOL]     assertTrue(ob instanceof JsonNode); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testKeyViaFactory() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeFactory.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?,?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeFactory.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeFactory) key).value); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testOverrideKeyClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenMapKeyHolder result = new ObjectMapper().readValue("{ \"123\" : \"xxx\" }", BrokenMapKeyHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] }
public void testJackson428() throws Exception { [EOL]     ObjectMapper serMapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> serializerTyper = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); [EOL]     serializerTyper = serializerTyper.init(JsonTypeInfo.Id.NAME, createTypeNameIdResolver(true)); [EOL]     serializerTyper = serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY); [EOL]     serMapper.setDefaultTyping(serializerTyper); [EOL]     MyClass mc = new MyClass(); [EOL]     MyParam<Integer> moc1 = new MyParam<Integer>(1); [EOL]     MyParam<String> moc2 = new MyParam<String>("valueX"); [EOL]     SomeObject so = new SomeObject(); [EOL]     so.someValue = "xxxxxx"; [EOL]     MyParam<SomeObject> moc3 = new MyParam<SomeObject>(so); [EOL]     List<SomeObject> colist = new ArrayList<SomeObject>(); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     colist.add(new SomeObject()); [EOL]     MyParam<List<SomeObject>> moc4 = new MyParam<List<SomeObject>>(colist); [EOL]     mc.params.add(moc1); [EOL]     mc.params.add(moc2); [EOL]     mc.params.add(moc3); [EOL]     mc.params.add(moc4); [EOL]     String json = serMapper.writeValueAsString(mc); [EOL]     MyClass mc2 = serMapper.readValue(json, MyClass.class); [EOL]     assertNotNull(mc2); [EOL]     assertNotNull(mc2.params); [EOL]     assertEquals(4, mc2.params.size()); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testFromIntCtor() throws Exception { [EOL]     CtorValueBean result = MAPPER.readValue("13", CtorValueBean.class); [EOL]     assertEquals("13", result.toString()); [EOL] }
public void testCustomBeanDeserializer() throws Exception { [EOL]     final ObjectMapper map = new ObjectMapper(); [EOL]     String json = "{\"beans\":[{\"c\":{\"a\":10,\"b\":20},\"d\":\"hello, tatu\"}]}"; [EOL]     TestBeans beans = map.readValue(json, TestBeans.class); [EOL]     assertNotNull(beans); [EOL]     List<TestBean> results = beans.beans; [EOL]     assertNotNull(results); [EOL]     assertEquals(1, results.size()); [EOL]     TestBean bean = results.get(0); [EOL]     assertEquals("hello, tatu", bean.d); [EOL]     CustomBean c = bean.c; [EOL]     assertNotNull(c); [EOL]     assertEquals(10, c.a); [EOL]     assertEquals(20, c.b); [EOL]     json = "{\"beans\":[{\"c\":{\"b\":3,\"a\":-4},\"d\":\"\"}," + "{\"d\":\"abc\", \"c\":{\"b\":15}}]}"; [EOL]     beans = map.readValue(json, TestBeans.class); [EOL]     assertNotNull(beans); [EOL]     results = beans.beans; [EOL]     assertNotNull(results); [EOL]     assertEquals(2, results.size()); [EOL]     bean = results.get(0); [EOL]     assertEquals("", bean.d); [EOL]     c = bean.c; [EOL]     assertNotNull(c); [EOL]     assertEquals(-4, c.a); [EOL]     assertEquals(3, c.b); [EOL]     bean = results.get(1); [EOL]     assertEquals("abc", bean.d); [EOL]     c = bean.c; [EOL]     assertNotNull(c); [EOL]     assertEquals(0, c.a); [EOL]     assertEquals(15, c.b); [EOL] }
public void testCustomBeanDeserializer() throws Exception { [EOL]     final ObjectMapper map = new ObjectMapper(); [EOL]     String json = "{\"beans\":[{\"c\":{\"a\":10,\"b\":20},\"d\":\"hello, tatu\"}]}"; [EOL]     TestBeans beans = map.readValue(json, TestBeans.class); [EOL]     assertNotNull(beans); [EOL]     List<TestBean> results = beans.beans; [EOL]     assertNotNull(results); [EOL]     assertEquals(1, results.size()); [EOL]     TestBean bean = results.get(0); [EOL]     assertEquals("hello, tatu", bean.d); [EOL]     CustomBean c = bean.c; [EOL]     assertNotNull(c); [EOL]     assertEquals(10, c.a); [EOL]     assertEquals(20, c.b); [EOL]     json = "{\"beans\":[{\"c\":{\"b\":3,\"a\":-4},\"d\":\"\"}," + "{\"d\":\"abc\", \"c\":{\"b\":15}}]}"; [EOL]     beans = map.readValue(json, TestBeans.class); [EOL]     assertNotNull(beans); [EOL]     results = beans.beans; [EOL]     assertNotNull(results); [EOL]     assertEquals(2, results.size()); [EOL]     bean = results.get(0); [EOL]     assertEquals("", bean.d); [EOL]     c = bean.c; [EOL]     assertNotNull(c); [EOL]     assertEquals(-4, c.a); [EOL]     assertEquals(3, c.b); [EOL]     bean = results.get(1); [EOL]     assertEquals("abc", bean.d); [EOL]     c = bean.c; [EOL]     assertNotNull(c); [EOL]     assertEquals(0, c.a); [EOL]     assertEquals(15, c.b); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testJackson431() throws Exception { [EOL]     final Test431Container foo = MAPPER.readValue("{\"items\":\n" + "[{\"bar\": 0,\n" + "\"id\": \"id123\",\n" + "\"foo\": 1\n" + "}]}", Test431Container.class); [EOL]     assertNotNull(foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testExternalTypeWithCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBeanWithCreator(7)); [EOL]     ExternalBeanWithCreator result = mapper.readValue(json, ExternalBeanWithCreator.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value); [EOL]     assertEquals(7, ((ValueBean) result.value).value); [EOL]     assertEquals(7, result.foo); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testAsIndex() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertFalse(mapper.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)); [EOL]     assertEquals(quote("B"), mapper.writeValueAsString(TestEnum.B)); [EOL]     mapper.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX); [EOL]     assertEquals("1", mapper.writeValueAsString(TestEnum.B)); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     int[] result = MAPPER.readValue(sb.toString(), int[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 70000; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(-i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         assertEquals(-i, result[i]); [EOL]     } [EOL] }
public void testIntArrayToX() throws Exception { [EOL]     int[] data = ints(); [EOL]     verifyIntArrayConversion(data, byte[].class); [EOL]     verifyIntArrayConversion(data, short[].class); [EOL]     verifyIntArrayConversion(data, long[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Integer> actNums = mapper.convertValue(data, new TypeReference<List<Integer>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testUsesDeserializersNullValue() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new TestModule()); [EOL]     Container container = mapper.readValue("{}", Container.class); [EOL]     assertEquals(NULL_CONTAINED, container.contained); [EOL] }
public void testUsesDeserializersNullValue() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new TestModule()); [EOL]     Container container = mapper.readValue("{}", Container.class); [EOL]     assertEquals(NULL_CONTAINED, container.contained); [EOL] }
public void testUsesDeserializersNullValue() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new TestModule()); [EOL]     Container container = mapper.readValue("{}", Container.class); [EOL]     assertEquals(NULL_CONTAINED, container.contained); [EOL] }
public void testUsesDeserializersNullValue() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new TestModule()); [EOL]     Container container = mapper.readValue("{}", Container.class); [EOL]     assertEquals(NULL_CONTAINED, container.contained); [EOL] }
public void testUsesDeserializersNullValue() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new TestModule()); [EOL]     Container container = mapper.readValue("{}", Container.class); [EOL]     assertEquals(NULL_CONTAINED, container.contained); [EOL] }
public void testUsesDeserializersNullValue() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new TestModule()); [EOL]     Container container = mapper.readValue("{}", Container.class); [EOL]     assertEquals(NULL_CONTAINED, container.contained); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testSimpleDeserWithForwardRefs() throws Exception { [EOL]     IdWrapper result = mapper.readValue("{\"node\":{\"value\":7,\"next\":{\"node\":1}, \"@id\":1}}", IdWrapper.class); [EOL]     assertEquals(7, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL] }
public void testSimpleDeserWithForwardRefs() throws Exception { [EOL]     IdWrapper result = mapper.readValue("{\"node\":{\"value\":7,\"next\":{\"node\":1}, \"@id\":1}}", IdWrapper.class); [EOL]     assertEquals(7, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL] }
public void testSimpleDeserWithForwardRefs() throws Exception { [EOL]     IdWrapper result = mapper.readValue("{\"node\":{\"value\":7,\"next\":{\"node\":1}, \"@id\":1}}", IdWrapper.class); [EOL]     assertEquals(7, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testSimpleDeserWithForwardRefs() throws Exception { [EOL]     IdWrapper result = mapper.readValue("{\"node\":{\"value\":7,\"next\":{\"node\":1}, \"@id\":1}}", IdWrapper.class); [EOL]     assertEquals(7, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testUsesDeserializersNullValue() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new TestModule()); [EOL]     Container container = mapper.readValue("{}", Container.class); [EOL]     assertEquals(NULL_CONTAINED, container.contained); [EOL] }
public void testUsesDeserializersNullValue() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new TestModule()); [EOL]     Container container = mapper.readValue("{}", Container.class); [EOL]     assertEquals(NULL_CONTAINED, container.contained); [EOL] }
public void testTwoInjectablesViaCreator() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class, "Bob").addValue("number", Integer.valueOf(13))); [EOL]     CtorBean2 bean = mapper.readValue("{ }", CtorBean2.class); [EOL]     assertEquals(Integer.valueOf(13), bean.age); [EOL]     assertEquals("Bob", bean.name); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testMapOfRefs() throws Exception { [EOL]     NodeMap root = new NodeMap(); [EOL]     NodeForMap node1 = new NodeForMap("a"); [EOL]     NodeForMap node2 = new NodeForMap("b"); [EOL]     Map<String, NodeForMap> nodes = new HashMap<String, NodeForMap>(); [EOL]     nodes.put("a1", node1); [EOL]     nodes.put("b2", node2); [EOL]     root.nodes = nodes; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json = mapper.writeValueAsString(root); [EOL]     NodeMap result = mapper.readValue(json, NodeMap.class); [EOL]     Map<String, NodeForMap> kids = result.nodes; [EOL]     assertNotNull(kids); [EOL]     assertEquals(2, kids.size()); [EOL]     assertNotNull(kids.get("a1")); [EOL]     assertNotNull(kids.get("b2")); [EOL]     assertEquals("a", kids.get("a1").name); [EOL]     assertEquals("b", kids.get("b2").name); [EOL]     assertSame(result, kids.get("a1").parent); [EOL]     assertSame(result, kids.get("b2").parent); [EOL] }
public void testSerializedAsListWithClassSerializer() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     SimpleValueListWithSerializer list = new SimpleValueListWithSerializer(); [EOL]     list.add(new ActualValue("foo")); [EOL]     assertEquals("[\"value foo\"]", m.writeValueAsString(list)); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testCustomDeserializationProperty() throws Exception { [EOL]     IdWrapperExt result = mapper.readValue(EXP_CUSTOM_VIA_PROP, IdWrapperExt.class); [EOL]     assertEquals(99, result.node.value); [EOL]     assertSame(result.node, result.node.next.node); [EOL]     assertEquals(3, result.node.customId); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testIssue877() throws Exception { [EOL]     BaseInterfaceImpl one = new BaseInterfaceImpl(); [EOL]     BaseInterfaceImpl two = new BaseInterfaceImpl(); [EOL]     one.addInstance(two); [EOL]     two.addInstance(one); [EOL]     ListWrapper<BaseInterfaceImpl> myList = new ListWrapper<BaseInterfaceImpl>(); [EOL]     myList.add(one); [EOL]     myList.add(two); [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, "@class"); [EOL]     String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList); [EOL]     ListWrapper<BaseInterfaceImpl> result; [EOL]     result = om.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     System.out.println("deserialised list size = " + result.size()); [EOL] }
public void testScalarsViaAbstractType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     AbstractWrapper result; [EOL]     json = m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper("abc")); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, AbstractWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new AbstractWrapper(TestEnum.B)); [EOL] }
public void testIssue877() throws Exception { [EOL]     BaseInterfaceImpl one = new BaseInterfaceImpl(); [EOL]     BaseInterfaceImpl two = new BaseInterfaceImpl(); [EOL]     one.addInstance(two); [EOL]     two.addInstance(one); [EOL]     ListWrapper<BaseInterfaceImpl> myList = new ListWrapper<BaseInterfaceImpl>(); [EOL]     myList.add(one); [EOL]     myList.add(two); [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, "@class"); [EOL]     String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList); [EOL]     ListWrapper<BaseInterfaceImpl> result; [EOL]     result = om.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     System.out.println("deserialised list size = " + result.size()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testAdds() { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     assertNotNull(n.addArray()); [EOL]     assertNotNull(n.addObject()); [EOL]     n.addPOJO("foobar"); [EOL]     n.add(1); [EOL]     n.add(1L); [EOL]     n.add(0.5); [EOL]     n.add(0.5f); [EOL]     assertEquals(7, n.size()); [EOL]     assertNotNull(n.insertArray(0)); [EOL]     assertNotNull(n.insertObject(0)); [EOL]     n.insertPOJO(2, "xxx"); [EOL]     assertEquals(10, n.size()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testPolymorphicRoundtrip() throws Exception { [EOL]     Impl in1 = new Impl(123, 456); [EOL]     in1.next = new Impl(111, 222); [EOL]     in1.next.next = in1; [EOL]     String json = mapper.writeValueAsString(in1); [EOL]     Base result0 = mapper.readValue(json, Base.class); [EOL]     assertNotNull(result0); [EOL]     assertSame(Impl.class, result0.getClass()); [EOL]     Impl result = (Impl) result0; [EOL]     assertEquals(123, result.value); [EOL]     assertEquals(456, result.extra); [EOL]     Impl result2 = (Impl) result.next; [EOL]     assertEquals(111, result2.value); [EOL]     assertEquals(222, result2.extra); [EOL]     assertSame(result, result2.next); [EOL] }
public void testIssue877() throws Exception { [EOL]     BaseInterfaceImpl one = new BaseInterfaceImpl(); [EOL]     BaseInterfaceImpl two = new BaseInterfaceImpl(); [EOL]     one.addInstance(two); [EOL]     two.addInstance(one); [EOL]     ListWrapper<BaseInterfaceImpl> myList = new ListWrapper<BaseInterfaceImpl>(); [EOL]     myList.add(one); [EOL]     myList.add(two); [EOL]     ObjectMapper om = new ObjectMapper(); [EOL]     om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, "@class"); [EOL]     String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList); [EOL]     ListWrapper<BaseInterfaceImpl> result; [EOL]     result = om.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     System.out.println("deserialised list size = " + result.size()); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testDefaultExclusion() throws IOException { [EOL]     MixedBean bean = new MixedBean(); [EOL]     StringWriter sw = new StringWriter(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.writerWithView(ViewA.class).writeValue(sw, bean); [EOL]     Map<String, Object> map = mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertEquals("2", map.get("b")); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false); [EOL]     String json = mapper.writerWithView(ViewA.class).writeValueAsString(bean); [EOL]     map = mapper.readValue(json, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals("1", map.get("a")); [EOL]     assertNull(map.get("b")); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testLong() { [EOL]     ShortNode n = ShortNode.valueOf(1L); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.LONG, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     ShortNode n = ShortNode.valueOf(1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testLong() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long value = 12345678L << 32; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isLong()); [EOL]     assertType(result, LongNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().longValue()); [EOL]     assertEquals(value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals(result, LongNode.valueOf(value)); [EOL] }
public void testLong() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long value = 12345678L << 32; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isLong()); [EOL]     assertType(result, LongNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().longValue()); [EOL]     assertEquals(value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals(result, LongNode.valueOf(value)); [EOL] }
public void testInt() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     int value = -90184; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().intValue()); [EOL]     assertEquals(value, result.intValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(result, IntNode.valueOf(value)); [EOL] }
public void testInt() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     int value = -90184; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().intValue()); [EOL]     assertEquals(value, result.intValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(result, IntNode.valueOf(value)); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.SHORT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     ShortNode n = ShortNode.valueOf(1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testInt() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testFromArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode root = mapper.createArrayNode(); [EOL]     root.add(TEXT1); [EOL]     root.add(3); [EOL]     ObjectNode obj = root.addObject(); [EOL]     obj.put(FIELD1, true); [EOL]     obj.putArray(FIELD2); [EOL]     root.add(false); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromArray(sw.toString()); [EOL]     } [EOL]     verifyFromArray(root.toString()); [EOL] }
public void testFromArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ArrayNode root = mapper.createArrayNode(); [EOL]     root.add(TEXT1); [EOL]     root.add(3); [EOL]     ObjectNode obj = root.addObject(); [EOL]     obj.put(FIELD1, true); [EOL]     obj.putArray(FIELD2); [EOL]     root.add(false); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         StringWriter sw = new StringWriter(); [EOL]         if (i == 0) { [EOL]             JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]             root.serialize(gen, null); [EOL]             gen.close(); [EOL]         } else { [EOL]             mapper.writeValue(sw, root); [EOL]         } [EOL]         verifyFromArray(sw.toString()); [EOL]     } [EOL]     verifyFromArray(root.toString()); [EOL] }
public void testShort() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     short value = -90184; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isShort()); [EOL]     assertType(result, ShortNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().longValue()); [EOL]     assertEquals(value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL] }
public void testShort() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     short value = -90184; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isShort()); [EOL]     assertType(result, ShortNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().longValue()); [EOL]     assertEquals(value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL] }
public void testShort() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     short value = -90184; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isShort()); [EOL]     assertType(result, ShortNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().shortValue()); [EOL]     assertEquals(value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(result, ShortNode.valueOf(value)); [EOL] }
public void testShort() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     short value = -90184; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isShort()); [EOL]     assertType(result, ShortNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().longValue()); [EOL]     assertEquals(value, result.longValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.SHORT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.SHORT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0!= n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.SHORT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf(0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt()); [EOL]     assertFalse(ShortNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(0L).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Long.MIN_VALUE).canConvertToLong()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testPropertyAnnotationForMaps() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperMap("a", 1, 2)); [EOL]     assertEquals("{\"values\":{\"a\":[1,2]}}", json); [EOL] }
public void testModifySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(newSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new Integer(123))); [EOL] }
public void testModifySerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(newSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new Integer(123))); [EOL] }
public void testTypeIdFromArray() throws Exception { [EOL]     assertEquals("[\"SomeType\",{\"a\":3}]", mapper.writeValueAsString(new TypeIdFromFieldArray())); [EOL] }
public void testJackson667() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     String json = mapper.writeValueAsString(new SetBean("abc")); [EOL]     SetBean bean = mapper.readValue(json, SetBean.class); [EOL]     assertNotNull(bean); [EOL]     assertTrue(bean.names instanceof HashSet); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("{\"b\":\"2\"}", mapper.writeValueAsString(bean)); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("{\"b\":\"2\"}", mapper.writeValueAsString(bean)); [EOL] }
public void testModifyEnumSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new EnumSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(EnumABC.C)); [EOL] }
public void testPropertyRemoval() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new RemovingModifier("a"))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("{\"b\":\"2\"}", mapper.writeValueAsString(bean)); [EOL] }
public void testModifyCollectionSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new CollectionSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>())); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testAlwaysIdForTree() throws Exception { [EOL]     TreeNode root = new TreeNode(null, 1, "root"); [EOL]     TreeNode leaf = new TreeNode(root, 2, "leaf"); [EOL]     root.child = leaf; [EOL]     String json = MAPPER.writeValueAsString(root); [EOL]     assertEquals("{\"id\":1,\"name\":\"root\",\"parent\":null,\"child\":" + "{\"id\":2,\"name\":\"leaf\",\"parent\":1,\"child\":null}}", json); [EOL] }
public void testIgnoreOver() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new BaseClassIgnore()); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL]     result = writeAndMap(m, new SubClassNonIgnore()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL]     assertEquals(Integer.valueOf(2), result.get("y")); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testCustomPropertyForClass() throws Exception { [EOL]     IdentifiableWithProp src = new IdentifiableWithProp(123, -19); [EOL]     src.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP, json); [EOL] }
public void testCustomPropertyViaProperty() throws Exception { [EOL]     IdWrapperCustom src = new IdWrapperCustom(123, 7); [EOL]     src.node.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP_VIA_REF, json); [EOL] }
public void testCustomPropertyForClass() throws Exception { [EOL]     IdentifiableWithProp src = new IdentifiableWithProp(123, -19); [EOL]     src.next = src; [EOL]     String json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP, json); [EOL]     json = MAPPER.writeValueAsString(src); [EOL]     assertEquals(EXP_CUSTOM_PROP, json); [EOL] }
public void testIOException() throws IOException { [EOL]     IOException ioe = new IOException("TEST"); [EOL]     String json = MAPPER.writeValueAsString(ioe); [EOL]     IOException result = MAPPER.readValue(json, IOException.class); [EOL]     assertEquals(ioe.getMessage(), result.getMessage()); [EOL] }
public void testIOException() throws IOException { [EOL]     IOException ioe = new IOException("TEST"); [EOL]     String json = MAPPER.writeValueAsString(ioe); [EOL]     IOException result = MAPPER.readValue(json, IOException.class); [EOL]     assertEquals(ioe.getMessage(), result.getMessage()); [EOL] }
public void testStaticTypingWithArrayList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     ValueList list = new ValueList(); [EOL]     list.add(new ValueClass()); [EOL]     assertEquals("[{\"x\":3}]", m.writeValueAsString(list)); [EOL] }
public void testStaticTypingWithLinkedList() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     ValueLinkedList list = new ValueLinkedList(); [EOL]     list.add(new ValueClass()); [EOL]     assertEquals("[{\"x\":3}]", serializeAsString(m, list)); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterator() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     ArrayList<Integer> l = new ArrayList<Integer>(); [EOL]     l.add(1); [EOL]     l.add(-9); [EOL]     l.add(0); [EOL]     MAPPER.writeValue(sw, l.iterator()); [EOL]     assertEquals("[1,-9,0]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testIterable() throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 })); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testEnumSet() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     EnumSet<TestEnum> value = EnumSet.of(TestEnum.B); [EOL]     mapper.writeValue(sw, value); [EOL]     assertEquals("[\"B\"]", sw.toString()); [EOL] }
public void testEnumSet() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     EnumSet<TestEnum> value = EnumSet.of(TestEnum.B); [EOL]     mapper.writeValue(sw, value); [EOL]     assertEquals("[\"B\"]", sw.toString()); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String value = "abc"; [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(value)); [EOL]     String expected = String.format("{\"nonRaw\":\"%s\",\"raw\":%s,\"value\":%s}", value, value, value); [EOL]     assertEquals(expected, result); [EOL] }
public void testSimpleFactory() throws Exception { [EOL]     FactoryBean bean = MAPPER.readValue("{ \"f\" : 0.25 }", FactoryBean.class); [EOL]     assertEquals(0.25, bean.d); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testSimpleFactory() throws Exception { [EOL]     FactoryBean bean = MAPPER.readValue("{ \"f\" : 0.25 }", FactoryBean.class); [EOL]     assertEquals(0.25, bean.d); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testSimple() { [EOL]     Number result = new ObjectMapper().readValue(quote("abc"), Number.class); [EOL]     assertEquals(Integer.valueOf(abc), result); [EOL]     result = new ObjectMapper().readValue(quote(""), Number.class); [EOL]     assertEquals(Integer.valueOf(-1), result); [EOL]     result = new ObjectMapper().readValue(quote(""), Number.class); [EOL]     assertEquals(Integer.valueOf(0), result); [EOL] }
public void testBigIntAsNumber() throws Exception { [EOL]     BigInteger biggie = new BigInteger("1234567890123456789012345678901234567890"); [EOL]     Number result = new ObjectMapper().readValue(biggie.toString(), Number.class); [EOL]     assertEquals(BigInteger.class, biggie.getClass()); [EOL]     assertEquals(biggie, result); [EOL] }
public void testDoubleWrapper() throws Exception { [EOL]     String[] STRS = new String[] { "1.0", "0.0", "-0.3", "0.7", "42.012", "-999.0", NAN_STRING }; [EOL]     for (String str : STRS) { [EOL]         Double exp = Double.valueOf(str); [EOL]         Double result; [EOL]         if (NAN_STRING!= str) { [EOL]             result = MAPPER.readValue(new StringReader(str), Double.class); [EOL]             assertEquals(exp, result); [EOL]         } [EOL]         result = MAPPER.readValue(new StringReader(" \"" + str + "\""), Double.class); [EOL]         assertEquals(exp, result); [EOL]     } [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testKeyViaFactory() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeFactory.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?,?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeFactory.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeFactory) key).value); [EOL] }
public void testKeyViaFactory() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeFactory.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?,?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeFactory.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeFactory) key).value); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testKeyViaFactory() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeFactory.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?,?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeFactory.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeFactory) key).value); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testKeyViaFactory() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeFactory.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?,?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeFactory.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeFactory) key).value); [EOL] }
public void testKeyViaFactory() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeFactory.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?,?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeFactory.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeFactory) key).value); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testAllowUnknownEnumValuesAsMapKeysReadAsNull() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     ClassWithEnumMapKey result = reader.withType(ClassWithEnumMapKey.class).readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}"); [EOL]     assertTrue(result.map.containsKey(null)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_STRINGS)); [EOL]     Map<String, String> result = writeAndMap(MAPPER, new Empty()); [EOL]     assertEquals(0, result.size()); [EOL]     assertFalse(result.containsKey("a")); [EOL]     assertFalse(result.containsKey("b")); [EOL]     assertNull(result.get("a")); [EOL]     assertTrue(result.containsKey("b")); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testKeyViaFactory() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<KeyTypeCtor, Integer> map = mapper.readValue("{\"a\":123}", TypeFactory.defaultInstance().constructMapType(HashMap.class, KeyTypeFactory.class, Integer.class)); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<?,?> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(123), entry.getValue()); [EOL]     Object key = entry.getKey(); [EOL]     assertEquals(KeyTypeFactory.class, key.getClass()); [EOL]     assertEquals("a", ((KeyTypeFactory) key).value); [EOL] }
public void testSimpleKeyDeser() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     MapBean result = mapper.readValue("{\"map\":{\"a\":3}}", MapBean.class); [EOL]     Map<String, Integer> map = result.map; [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     Map.Entry<String, Integer> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(Integer.valueOf(3), entry.getValue()); [EOL]     assertEquals("map:a", entry.getKey()); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testTextAsBinary() throws Exception { [EOL]     TextNode n = new TextNode("   APs=\n"); [EOL]     JsonParser jp = n.traverse(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     byte[] data = jp.getBinaryValue(); [EOL]     assertNotNull(data); [EOL]     assertArrayEquals(new byte[] { 0, -5 }, data); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(jp.isClosed()); [EOL]     n = new TextNode("?!??"); [EOL]     jp = n.traverse(); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     try { [EOL]         jp.getBinaryValue(); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal character"); [EOL]     } [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testNested() throws Exception { [EOL]     final String JSON = "{\"coordinates\":[[[-3,\n1],[179.859681,51.175092]]]}"; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(JSON); [EOL]     JsonParser jp = tree.traverse(); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] }
public void testScalarsWithTyping() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json; [EOL]     DynamicWrapper result; [EOL]     json = m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Integer.valueOf(3), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper("abc")); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals("abc", result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Boolean.TRUE)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Boolean.TRUE, result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L))); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(Long.valueOf(7), result.value); [EOL]     json = m.writeValueAsString(new DynamicWrapper(TestEnum.B)); [EOL]     result = m.readValue(json, DynamicWrapper.class); [EOL]     assertEquals(TestEnum.B, result.value); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumSet() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     EnumSet<TestEnum> value = MAPPER.readValue(sw, new TypeReference<EnumSet<TestEnum>>() { [EOL]     }); [EOL]     assertTrue(value.contains(TestEnum.B)); [EOL]     sw = new StringWriter(); [EOL]     mapper.writeValue(sw, value); [EOL]     assertTrue(value.contains(TestEnum.B)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEnumSet() throws Exception { [EOL]     EnumSet<Choice> set = EnumSet.of(Choice.NO); [EOL]     Object[] input = new Object[] { set }; [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String json = m.writeValueAsString(input); [EOL]     Object[] output = m.readValue(json, Object[].class); [EOL]     assertEquals(1, output.length); [EOL]     Object ob = output[0]; [EOL]     assertTrue(ob instanceof EnumSet<?>); [EOL]     EnumSet<Choice> set2 = (EnumSet<Choice>) ob; [EOL]     assertEquals(1, set2.size()); [EOL]     assertTrue(set2.contains(Choice.NO)); [EOL]     assertFalse(set2.contains(Choice.YES)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testDatesWithEmptyStrings() throws Exception { [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Date.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.util.Calendar.class)); [EOL]     assertNull(MAPPER.readValue(quote(""), java.sql.Date.class)); [EOL] }
public void testCalendarKeyMap() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testBasicsWithNullNode() throws Exception { [EOL]     NullNode n = NullNode.instance; [EOL]     assertFalse(n.isContainerNode()); [EOL]     assertFalse(n.isBigDecimal()); [EOL]     assertFalse(n.isBigInteger()); [EOL]     assertFalse(n.isBinary()); [EOL]     assertFalse(n.isBoolean()); [EOL]     assertFalse(n.isPojo()); [EOL]     assertFalse(n.isMissingNode()); [EOL]     assertFalse(n.booleanValue()); [EOL]     assertNull(n.numberValue()); [EOL]     assertEquals(0, n.intValue()); [EOL]     assertEquals(0L, n.longValue()); [EOL]     assertEquals(BigDecimal.ZERO, n.decimalValue()); [EOL]     assertEquals(BigInteger.ZERO, n.bigIntegerValue()); [EOL]     assertEquals(0, n.size()); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNotNull(n.path("xyz")); [EOL]     assertTrue(n.path("xyz").isMissingNode()); [EOL]     assertFalse(n.has("field")); [EOL]     assertFalse(n.has(3)); [EOL]     assertNodeNumbersForNonNumeric(n); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testEmptyListOrArray() throws IOException { [EOL]     EmptyListBean list = new EmptyListBean(); [EOL]     EmptyArrayBean array = new EmptyArrayBean(); [EOL]     assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(list)); [EOL]     assertEquals("{\"empty\":[]}", MAPPER.writeValueAsString(array)); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, false); [EOL]     assertEquals("{}", m.writeValueAsString(list)); [EOL]     assertEquals("{}", m.writeValueAsString(array)); [EOL] }
public void testAtomicReference() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String[] strs = new String[] { "abc" }; [EOL]     assertEquals("[\"abc\"]", serializeAsString(mapper, new AtomicReference<String[]>(strs))); [EOL] }
public void testAtomicLong() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long value = 12345678L << 32; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isLong()); [EOL]     assertType(result, LongNode.class); [EOL] }
public void testAtomicLong() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long value = 12345678L << 32; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isLong()); [EOL]     assertType(result, LongNode.class); [EOL] }
public void testBasics() { [EOL]     ObjectNode n = new ObjectNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fields().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("a")); [EOL]     assertTrue(n.path("a").isMissingNode()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.set("a", text); [EOL]     assertEquals(1, n.size()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertTrue(n.fields().hasNext()); [EOL]     assertTrue(n.fieldNames().hasNext()); [EOL]     assertSame(text, n.get("a")); [EOL]     assertSame(text, n.path("a")); [EOL]     assertNull(n.get("b")); [EOL]     assertNull(n.get(0)); [EOL]     assertFalse(n.has(0)); [EOL]     assertFalse(n.hasNonNull(0)); [EOL]     assertTrue(n.has("a")); [EOL]     assertTrue(n.hasNonNull("a")); [EOL]     assertFalse(n.has("b")); [EOL]     assertFalse(n.hasNonNull("b")); [EOL]     ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance); [EOL]     n2.put("b", 13); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.setAll(n2); [EOL]     assertEquals(2, n.size()); [EOL]     n.set("null", (JsonNode) null); [EOL]     assertEquals(3, n.size()); [EOL]     assertTrue(n.has("null")); [EOL]     assertFalse(n.hasNonNull("null")); [EOL]     n.put("null", "notReallNull"); [EOL]     assertEquals(3, n.size()); [EOL]
public void testParser() throws Exception { [EOL]     ArrayNode n = new ArrayNode(JsonNodeFactory.instance); [EOL]     n.add(123); [EOL]     TreeTraversingParser p = new TreeTraversingParser(n, null); [EOL]     p.setCodec(null); [EOL]     assertNull(p.getCodec()); [EOL]     assertNotNull(p.getParsingContext()); [EOL]     assertNotNull(p.getTokenLocation()); [EOL]     assertNotNull(p.getCurrentLocation()); [EOL]     assertNull(p.getEmbeddedObject()); [EOL]     assertNull(p.currentNode()); [EOL]     assertToken(JsonToken.START_ARRAY, p.nextToken()); [EOL]     p.skipChildren(); [EOL]     assertToken(JsonToken.END_ARRAY, p.getCurrentToken()); [EOL]     p.close(); [EOL]     p = new TreeTraversingParser(n, null); [EOL]     p.nextToken(); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, p.getNumberType()); [EOL]     p.close(); [EOL] }
public void testBasics() { [EOL]     ObjectNode n = new ObjectNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fields().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("a")); [EOL]     assertTrue(n.path("a").isMissingNode()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.set("a", text); [EOL]     assertEquals(1, n.size()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertTrue(n.fields().hasNext()); [EOL]     assertTrue(n.fieldNames().hasNext()); [EOL]     assertSame(text, n.get("a")); [EOL]     assertSame(text, n.path("a")); [EOL]     assertNull(n.get("b")); [EOL]     assertNull(n.get(0)); [EOL]     assertFalse(n.has(0)); [EOL]     assertFalse(n.hasNonNull(0)); [EOL]     assertTrue(n.has("a")); [EOL]     assertTrue(n.hasNonNull("a")); [EOL]     assertFalse(n.has("b")); [EOL]     assertFalse(n.hasNonNull("b")); [EOL]     ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance); [EOL]     n2.put("b", 13); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.setAll(n2); [EOL]     assertEquals(2, n.size()); [EOL]     n.set("null", (JsonNode) null); [EOL]     assertEquals(3, n.size()); [EOL]     assertTrue(n.has("null")); [EOL]     assertFalse(n.hasNonNull("null")); [EOL]     n.put("null", "notReallNull"); [EOL]     assertEquals(3, n.size()); [EOL]
public void testBasics() { [EOL]     ObjectNode n = new ObjectNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fields().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("a")); [EOL]     assertTrue(n.path("a").isMissingNode()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.set("a", text); [EOL]     assertEquals(1, n.size()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertTrue(n.fields().hasNext()); [EOL]     assertTrue(n.fieldNames().hasNext()); [EOL]     assertSame(text, n.get("a")); [EOL]     assertSame(text, n.path("a")); [EOL]     assertNull(n.get("b")); [EOL]     assertNull(n.get(0)); [EOL]     assertFalse(n.has(0)); [EOL]     assertFalse(n.hasNonNull(0)); [EOL]     assertTrue(n.has("a")); [EOL]     assertTrue(n.hasNonNull("a")); [EOL]     assertFalse(n.has("b")); [EOL]     assertFalse(n.hasNonNull("b")); [EOL]     ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance); [EOL]     n2.put("b", 13); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.setAll(n2); [EOL]     assertEquals(2, n.size()); [EOL]     n.set("null", (JsonNode) null); [EOL]     assertEquals(3, n.size()); [EOL]     assertTrue(n.has("null")); [EOL]     assertFalse(n.hasNonNull("null")); [EOL]     n.put("null", "notReallNull"); [EOL]     assertEquals(3, n.size()); [EOL]
public void testBasics() { [EOL]     ObjectNode n = new ObjectNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fields().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("a")); [EOL]     assertTrue(n.path("a").isMissingNode()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.set("a", text); [EOL]     assertEquals(1, n.size()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertTrue(n.fields().hasNext()); [EOL]     assertTrue(n.fieldNames().hasNext()); [EOL]     assertSame(text, n.get("a")); [EOL]     assertSame(text, n.path("a")); [EOL]     assertNull(n.get("b")); [EOL]     assertNull(n.get(0)); [EOL]     assertFalse(n.has(0)); [EOL]     assertFalse(n.hasNonNull(0)); [EOL]     assertTrue(n.has("a")); [EOL]     assertTrue(n.hasNonNull("a")); [EOL]     assertFalse(n.has("b")); [EOL]     assertFalse(n.hasNonNull("b")); [EOL]     ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance); [EOL]     n2.put("b", 13); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.setAll(n2); [EOL]     assertEquals(2, n.size()); [EOL]     n.set("null", (JsonNode) null); [EOL]     assertEquals(3, n.size()); [EOL]     assertTrue(n.has("null")); [EOL]     assertFalse(n.hasNonNull("null")); [EOL]     n.put("null", "notReallNull"); [EOL]     assertEquals(3, n.size()); [EOL]
public void testBasics() { [EOL]     ObjectNode n = new ObjectNode(JsonNodeFactory.instance); [EOL]     assertStandardEquals(n); [EOL]     assertFalse(n.elements().hasNext()); [EOL]     assertFalse(n.fields().hasNext()); [EOL]     assertFalse(n.fieldNames().hasNext()); [EOL]     assertNull(n.get("a")); [EOL]     assertTrue(n.path("a").isMissingNode()); [EOL]     TextNode text = TextNode.valueOf("x"); [EOL]     n.set("a", text); [EOL]     assertEquals(1, n.size()); [EOL]     assertTrue(n.elements().hasNext()); [EOL]     assertTrue(n.fields().hasNext()); [EOL]     assertTrue(n.fieldNames().hasNext()); [EOL]     assertSame(text, n.get("a")); [EOL]     assertSame(text, n.path("a")); [EOL]     assertNull(n.get("b")); [EOL]     assertNull(n.get(0)); [EOL]     assertFalse(n.has(0)); [EOL]     assertFalse(n.hasNonNull(0)); [EOL]     assertTrue(n.has("a")); [EOL]     assertTrue(n.hasNonNull("a")); [EOL]     assertFalse(n.has("b")); [EOL]     assertFalse(n.hasNonNull("b")); [EOL]     ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance); [EOL]     n2.put("b", 13); [EOL]     assertFalse(n.equals(n2)); [EOL]     n.setAll(n2); [EOL]     assertEquals(2, n.size()); [EOL]     n.set("null", (JsonNode) null); [EOL]     assertEquals(3, n.size()); [EOL]     assertTrue(n.has("null")); [EOL]     assertFalse(n.hasNonNull("null")); [EOL]     n.put("null", "notReallNull"); [EOL]     assertEquals(3, n.size()); [EOL]
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testMatchingMultiple() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     List<JsonNode> nodes = root.findValues("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertEquals(3, nodes.get(0).intValue()); [EOL]     assertEquals(42, nodes.get(1).intValue()); [EOL]     nodes = root.findParents("value"); [EOL]     assertEquals(2, nodes.size()); [EOL]     assertTrue(nodes.get(0).isObject()); [EOL]     assertTrue(nodes.get(1).isObject()); [EOL]     assertEquals(3, nodes.get(0).path("value").intValue()); [EOL]     assertEquals(42, nodes.get(1).path("value").intValue()); [EOL]     List<String> values = root.findValuesAsText("value"); [EOL]     assertEquals(2, values.size()); [EOL]     assertEquals("3", values.get(0)); [EOL]     assertEquals("42", values.get(1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testNullChecking() { [EOL]     ObjectNode o1 = JsonNodeFactory.instance.objectNode(); [EOL]     ObjectNode o2 = JsonNodeFactory.instance.objectNode(); [EOL]     o1.setAll(o2); [EOL]     assertEquals(0, o1.size()); [EOL]     assertEquals(0, o2.size()); [EOL]     o1.set("x", null); [EOL]     JsonNode n = o1.get("x"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("str", (String) null); [EOL]     n = o1.get("str"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("d", (BigDecimal) null); [EOL]     n = o1.get("d"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL] }
public void testObjectNodeEquality() { [EOL]     ObjectNode n1 = new ObjectNode(null); [EOL]     ObjectNode n2 = new ObjectNode(null); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL]     n1.set("x", TextNode.valueOf("Test")); [EOL]     assertFalse(n1.equals(n2)); [EOL]     assertFalse(n2.equals(n1)); [EOL]     n2.set("x", TextNode.valueOf("Test")); [EOL]     assertTrue(n1.equals(n2)); [EOL]     assertTrue(n2.equals(n1)); [EOL] }
public void testNullChecking() { [EOL]     ObjectNode o1 = JsonNodeFactory.instance.objectNode(); [EOL]     ObjectNode o2 = JsonNodeFactory.instance.objectNode(); [EOL]     o1.setAll(o2); [EOL]     assertEquals(0, o1.size()); [EOL]     assertEquals(0, o2.size()); [EOL]     o1.set("x", null); [EOL]     JsonNode n = o1.get("x"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("str", (String) null); [EOL]     n = o1.get("str"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL]     o1.put("d", (BigDecimal) null); [EOL]     n = o1.get("d"); [EOL]     assertNotNull(n); [EOL]     assertSame(n, NullNode.instance); [EOL] }
public void testInvalidWith() throws Exception { [EOL]     JsonNode root = MAPPER.createArrayNode(); [EOL]     try { [EOL]         root.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "not of type ObjectNode"); [EOL]     } [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.put("prop", 13); [EOL]     try { [EOL]         root2.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "has value that is not"); [EOL]     } [EOL] }
public void testInvalidWith() throws Exception { [EOL]     JsonNode root = MAPPER.createArrayNode(); [EOL]     try { [EOL]         root.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "not of type ObjectNode"); [EOL]     } [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.put("prop", 13); [EOL]     try { [EOL]         root2.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "has value that is not"); [EOL]     } [EOL] }
public void testInvalidWith() throws Exception { [EOL]     JsonNode root = MAPPER.createArrayNode(); [EOL]     try { [EOL]         root.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "not of type ObjectNode"); [EOL]     } [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.put("prop", 13); [EOL]     try { [EOL]         root2.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "has value that is not"); [EOL]     } [EOL] }
public void testInvalidWith() throws Exception { [EOL]     JsonNode root = MAPPER.createArrayNode(); [EOL]     try { [EOL]         root.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "not of type ObjectNode"); [EOL]     } [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.put("prop", 13); [EOL]     try { [EOL]         root2.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "has value that is not"); [EOL]     } [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testInvalidWith() throws Exception { [EOL]     JsonNode root = MAPPER.createArrayNode(); [EOL]     try { [EOL]         root.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "not of type ObjectNode"); [EOL]     } [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.put("prop", 13); [EOL]     try { [EOL]         root2.with("prop"); [EOL]         fail("Expected exception"); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         verifyException(e, "has value that is not"); [EOL]     } [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testRetain() { [EOL]     ObjectNode ob = MAPPER.createObjectNode(); [EOL]     ob.put("a", "a"); [EOL]     ob.put("b", "b"); [EOL]     ob.put("c", "c"); [EOL]     assertEquals(3, ob.size()); [EOL]     assertSame(ob, ob.retain("a", "c")); [EOL]     assertEquals(2, ob.size()); [EOL]     assertEquals("a", ob.get("a").textValue()); [EOL]     assertNull(ob.get("b")); [EOL]     assertEquals("c", ob.get("c").textValue()); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testReconfiguringOfWrapping() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final Bean input = new Bean(); [EOL]     String jsonUnwrapped = mapper.writeValueAsString(input); [EOL]     assertEquals("{\"a\":3}", jsonUnwrapped); [EOL]     String jsonWrapped = mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input); [EOL]     assertEquals("{\"rudy\":{\"a\":3}}", jsonWrapped); [EOL]     Bean result = mapper.readValue(jsonUnwrapped, Bean.class); [EOL]     assertNotNull(result); [EOL]     try { [EOL]         result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Root name 'a'"); [EOL]     } [EOL]     result = mapper.reader(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped); [EOL]     assertNotNull(result); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testCalendar() throws Exception { [EOL]     java.util.Calendar value = Calendar.getInstance(); [EOL]     long l = 12345678L; [EOL]     value.setTimeInMillis(l); [EOL]     Calendar result = MAPPER.readValue("" + l, Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL]     String dateStr = dateToString(new Date(l)); [EOL]     result = MAPPER.readValue(quote(dateStr), Calendar.class); [EOL]     assertEquals(l, result.getTimeInMillis()); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testWithObjectSimple() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     root.put("a", 3); [EOL]     assertEquals(1, root.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertEquals(1, copy.size()); [EOL]     root.put("b", 7); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(1, copy.size()); [EOL]     copy.put("c", 3); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, copy.size()); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     BigDecimal value = new BigDecimal("0.1"); [EOL]     JsonNode result = DecimalNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, DecimalNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, DecimalNode.valueOf(value)); [EOL] }
public void testDecimalNode() throws Exception { [EOL]     BigDecimal value = new BigDecimal("0.1"); [EOL]     JsonNode result = DecimalNode.valueOf(value); [EOL]     assertFalse(result.isArray()); [EOL]     assertFalse(result.isObject()); [EOL]     assertTrue(result.isNumber()); [EOL]     assertFalse(result.isIntegralNumber()); [EOL]     assertFalse(result.isLong()); [EOL]     assertType(result, DecimalNode.class); [EOL]     assertFalse(result.isInt()); [EOL]     assertTrue(result.isFloatingPointNumber()); [EOL]     assertTrue(result.isBigDecimal()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue()); [EOL]     assertEquals(value.toString(), result.asText()); [EOL]     assertEquals(result, DecimalNode.valueOf(value)); [EOL] }
public void testInt() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     int value = -90184; [EOL]     JsonNode result = mapper.readTree(String.valueOf(value)); [EOL]     assertTrue(result.isNumber()); [EOL]     assertTrue(result.isIntegralNumber()); [EOL]     assertTrue(result.isInt()); [EOL]     assertType(result, IntNode.class); [EOL]     assertFalse(result.isLong()); [EOL]     assertFalse(result.isFloatingPointNumber()); [EOL]     assertFalse(result.isDouble()); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(value, result.numberValue().intValue()); [EOL]     assertEquals(value, result.intValue()); [EOL]     assertEquals(String.valueOf(value), result.asText()); [EOL]     assertEquals((double) value, result.doubleValue()); [EOL]     assertEquals((long) value, result.longValue()); [EOL]     assertEquals(result, IntNode.valueOf(value)); [EOL] }
public void testAsInt() throws Exception { [EOL]     assertEquals(9, IntNode.valueOf(9).asInt()); [EOL]     assertEquals(7, LongNode.valueOf(7L).asInt()); [EOL]     assertEquals(13, new TextNode("13").asInt()); [EOL]     assertEquals(0, new TextNode("foobar").asInt()); [EOL]     assertEquals(27, new TextNode("foobar").asInt(27)); [EOL]     assertEquals(1, BooleanNode.TRUE.asInt()); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testDeepUnwrapping() throws Exception { [EOL]     DeepUnwrapping bean = mapper.readValue("{\"x\":3,\"name\":\"Bob\",\"y\":27}", DeepUnwrapping.class); [EOL]     Unwrapping uw = bean.unwrapped; [EOL]     assertNotNull(uw); [EOL]     assertEquals("Bob", uw.name); [EOL]     Location loc = uw.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(3, loc.x); [EOL]     assertEquals(27, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testSimpleClass() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addKeyDeserializer(String.class, new ContextualDeser("???")); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":3}", ContextualBean.class); [EOL]     assertEquals(3, bean.a); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(StringValue.class, new MyContextualDeserializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualBean.class); [EOL]     assertEquals("a=1", bean.a.value); [EOL]     assertEquals("b=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"3\",\"b\":\"4\"}", ContextualBean.class); [EOL]     assertEquals("a=3", bean.a.value); [EOL]     assertEquals("b=4", bean.b.value); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testByteArrayFrom() throws Exception { [EOL]     byte[] data = _convert("c3VyZS4=", byte[].class); [EOL]     byte[] exp = "sure.".getBytes("Ascii"); [EOL]     verifyIntegralArrays(exp, data, exp.length); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testDelegating() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addDeserializer(Immutable.class, new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode, Immutable>() { [EOL]  [EOL]         @Override [EOL]         public Immutable convert(JsonNode value) { [EOL]             int x = value.path("x").asInt(); [EOL]             int y = value.path("y").asInt(); [EOL]             return new Immutable(x, y); [EOL]         } [EOL]     })); [EOL]     mapper.registerModule(module); [EOL]     Immutable imm = mapper.readValue("{\"x\":3,\"y\":7}", Immutable.class); [EOL]     assertEquals(3, imm.x); [EOL]     assertEquals(7, imm.y); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testSimpleValueDefinition() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(m, new WrapperClassForAs()); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.get("value"); [EOL]     result = (Map<String, Object>) ob; [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(3), result.get("x")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testFullRefs() throws Exception { [EOL]     FullTreeNode root = new FullTreeNode("root"); [EOL]     FullTreeNode child1 = new FullTreeNode("kid1"); [EOL]     FullTreeNode child2 = new FullTreeNode("kid2"); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     root.firstChild = child1; [EOL]     child1.parent = root; [EOL]     child1.next = child2; [EOL]     child2.prev = child1; [EOL]     String json = mapper.writeValueAsString(root); [EOL]     FullTreeNode resultNode = mapper.readValue(json, FullTreeNode.class); [EOL]     assertEquals("root", resultNode.name); [EOL]     FullTreeNode resultChild = resultNode.firstChild; [EOL]     assertNotNull(resultChild); [EOL]     assertEquals("kid1", resultChild.name); [EOL]     assertSame(resultChild.parent, resultNode); [EOL]     assertNull(resultChild.prev); [EOL]     FullTreeNode resultChild2 = resultChild.next; [EOL]     assertNotNull(resultChild2); [EOL]     assertEquals("kid2", resultChild2.name); [EOL]     assertSame(resultChild, resultChild2.prev); [EOL]     assertNull(resultChild2.next); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testJsonLocation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonLocation loc = new JsonLocation("whatever", -1, -1, 100, 13); [EOL]     String ser = serializeAsString(m, loc); [EOL]     JsonLocation result = m.readValue(ser, JsonLocation.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(loc.getSourceRef(), result.getSourceRef()); [EOL]     assertEquals(loc.getByteOffset(), result.getByteOffset()); [EOL]     assertEquals(loc.getCharOffset(), result.getCharOffset()); [EOL]     assertEquals(loc.getColumnNr(), result.getColumnNr()); [EOL]     assertEquals(loc.getLineNr(), result.getLineNr()); [EOL] }
public void testPropertyAnnotationForLists() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new PointListWrapperList(7, 8)); [EOL]     assertEquals("{\"values\":[[7,8],[8,7]]}", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSerializeAsArrayWithSingleProperty() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED); [EOL]     String json = mapper.writeValueAsString(new SingleBean()); [EOL]     assertEquals("\"foo\"", json); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testBooleanDelegate() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     BooleanBean bb = m.readValue("true", BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL]     bb = m.readValue(quote("true"), BooleanBean.class); [EOL]     assertEquals(Boolean.TRUE, bb.value); [EOL] }
public void testInvalidFormat() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("foobar"), Date.class); [EOL]         fail("Should have failed with an exception"); [EOL]     } catch (InvalidFormatException e) { [EOL]         verifyException(e, "Can not construct instance"); [EOL]         assertEquals("foobar", e.getValue()); [EOL]         assertEquals(Date.class, e.getTargetType()); [EOL]     } catch (Exception e) { [EOL]         fail("Wrong type of exception (" + e.getClass().getName() + "), should get " + InvalidFormatException.class.getName()); [EOL]     } [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     verifyLongArrayConversion(data, long[].class); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     verifyLongArrayConversion(data, long[].class); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     verifyLongArrayConversion(data, long[].class); [EOL] }
public void testLongArray() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, new long[] { 1L, 2L, 3L }); [EOL]     assertEquals("[1,2,3]", sw.toString().trim()); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testSchemaSerialization() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); [EOL]     assertNotNull(result); [EOL]     assertEquals("object", result.get("type")); [EOL]     assertNull(result.get("required")); [EOL]     assertNotNull(result.get("properties")); [EOL] }
public void testArrayContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ArrayBean result = m.readValue(" { \"values\" : [ 1, 2, 3 ] } ", ArrayBean.class); [EOL]     assertNotNull(result); [EOL]     Object[] obs = result.values; [EOL]     assertNotNull(obs); [EOL]     assertEquals(3, obs.length); [EOL]     assertEquals(ValueClass.class, obs[0].getClass()); [EOL]     assertEquals(1, ((ValueClass) obs[0])._a); [EOL]     assertEquals(ValueClass.class, obs[1].getClass()); [EOL]     assertEquals(2, ((ValueClass) obs[1])._a); [EOL]     assertEquals(ValueClass.class, obs[2].getClass()); [EOL]     assertEquals(3, ((ValueClass) obs[2])._a); [EOL] }
public void testArrayContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     ArrayBean result = m.readValue(" { \"values\" : [ 1, 2, 3 ] } ", ArrayBean.class); [EOL]     assertNotNull(result); [EOL]     Object[] obs = result.values; [EOL]     assertNotNull(obs); [EOL]     assertEquals(3, obs.length); [EOL]     assertEquals(ValueClass.class, obs[0].getClass()); [EOL]     assertEquals(1, ((ValueClass) obs[0])._a); [EOL]     assertEquals(ValueClass.class, obs[1].getClass()); [EOL]     assertEquals(2, ((ValueClass) obs[1])._a); [EOL]     assertEquals(ValueClass.class, obs[2].getClass()); [EOL]     assertEquals(3, ((ValueClass) obs[2])._a); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testEnumPolymorphicSerializationTest() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     List<ITestType> testTypesList = new ArrayList<ITestType>(); [EOL]     testTypesList.add(ConcreteType.ONE); [EOL]     testTypesList.add(ConcreteType.TWO); [EOL]     ListContainer listContainer = new ListContainer(); [EOL]     listContainer.testTypes = testTypesList; [EOL]     String json = mapper.writeValueAsString(listContainer); [EOL]     listContainer = mapper.readValue(json, ListContainer.class); [EOL]     EnumMapContainer enumMapContainer = new EnumMapContainer(); [EOL]     EnumMap<KeyEnum, ITestType> testTypesMap = new EnumMap<KeyEnum, ITestType>(KeyEnum.class); [EOL]     testTypesMap.put(KeyEnum.A, ConcreteType.ONE); [EOL]     testTypesMap.put(KeyEnum.B, ConcreteType.TWO); [EOL]     enumMapContainer.testTypes = testTypesMap; [EOL]     json = mapper.writeValueAsString(enumMapContainer); [EOL]     enumMapContainer = mapper.readValue(json, EnumMapContainer.class); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testQNameSer() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     assertEquals(quote(qn.toString()), serializeAsString(qn)); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testCalendarDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     XMLGregorianCalendar cal = dtf.newXMLGregorianCalendar(1974, 10, 10, 18, 15, 17, 123, 0); [EOL]     String exp = cal.toXMLFormat(); [EOL]     assertEquals("Should deserialize to equal XMLGregorianCalendar ('" + exp + "')", cal, new ObjectMapper().readValue(quote(exp), XMLGregorianCalendar.class)); [EOL] }
public void testQNameSer() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     assertEquals(quote(qn.toString()), serializeAsString(qn)); [EOL] }
public void testDurationDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     Duration dur = dtf.newDurationDayTime(true, 27, 5, 15, 59); [EOL]     String exp = dur.toString(); [EOL]     assertEquals("Should deserialize to equal Duration ('" + exp + "')", dur, new ObjectMapper().readValue(quote(exp), Duration.class)); [EOL] }
public void testQNameSer() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     assertEquals(qn, mapper.readValue(quote(qn.toString()), QName.class)); [EOL] }
public void testGeneratingJsonSchema() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class); [EOL]     assertNotNull(jsonSchema); [EOL]     assertTrue(jsonSchema.equals(jsonSchema)); [EOL]     assertFalse(jsonSchema.equals(null)); [EOL]     assertFalse(jsonSchema.equals("foo")); [EOL]     assertNotNull(JsonSchema.getDefaultSchemaNode()); [EOL]     ObjectNode root = jsonSchema.getSchemaNode(); [EOL]     assertEquals("object", root.get("type").asText()); [EOL]     assertEquals(false, root.path("required").booleanValue()); [EOL]     JsonNode propertiesSchema = root.get("properties"); [EOL]     assertNotNull(propertiesSchema); [EOL]     JsonNode property1Schema = propertiesSchema.get("property1"); [EOL]     assertNotNull(property1Schema); [EOL]     assertEquals("integer", property1Schema.get("type").asText()); [EOL]     assertEquals(false, property1Schema.path("required").booleanValue()); [EOL]     JsonNode property2Schema = propertiesSchema.get("property2"); [EOL]     assertNotNull(property2Schema); [EOL]     assertEquals("string", property2Schema.get("type").asText()); [EOL]     assertEquals(false, property2Schema.path("required").booleanValue()); [EOL]     JsonNode property3Schema = propertiesSchema.get("property3"); [EOL]     assertNotNull(property3Schema); [EOL]     assertEquals("array", property3Schema.get("type").asText()); [EOL]     assertEquals(false, property3Schema.path("required").booleanValue()); [EOL]     assertEquals("string", property3Schema.get("items").get("type").asText()); [EOL]     JsonNode property4Schema = propertiesSchema.get("property4"); [EOL]     assertNotNull(property4Schema); [EOL]     assertEquals("array", property4Schema.get("type").asText()); [EOL]     assertEquals(false, property4Schema.path("required").booleanValue()); [EOL]     assertEquals("number", property4Schema.get("items").get("type").asText
public void testJDK7SuppressionProperty() throws IOException { [EOL]     Exception exc = MAPPER.readValue("{\"suppressed\":[]}", IOException.class); [EOL]     assertNotNull(exc); [EOL] }
public void testJDK7SuppressionProperty() throws IOException { [EOL]     Exception exc = MAPPER.readValue("{\"suppressed\":[]}", IOException.class); [EOL]     assertNotNull(exc); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testAnnotationsDisabled() throws Exception { [EOL]     assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS)); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, new AnnoBean()); [EOL]     assertEquals(2, result.size()); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.configure(MapperFeature.USE_ANNOTATIONS, false); [EOL]     result = writeAndMap(m2, new AnnoBean()); [EOL]     assertEquals(1, result.size()); [EOL] }
public void testEnumsWithJsonValue() throws Exception { [EOL]     EnumWithJsonValue e = MAPPER.readValue(quote("foo"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.A, e); [EOL]     e = MAPPER.readValue(quote("bar"), EnumWithJsonValue.class); [EOL]     assertSame(EnumWithJsonValue.B, e); [EOL]     EnumSet<EnumWithJsonValue> set = MAPPER.readValue("[\"bar\"]", new TypeReference<EnumSet<EnumWithJsonValue>>() { [EOL]     }); [EOL]     assertNotNull(set); [EOL]     assertEquals(1, set.size()); [EOL]     assertTrue(set.contains(EnumWithJsonValue.B)); [EOL]     assertFalse(set.contains(EnumWithJsonValue.A)); [EOL]     EnumMap<EnumWithJsonValue, Integer> map = MAPPER.readValue("{\"foo\":13}", new TypeReference<EnumMap<EnumWithJsonValue, Integer>>() { [EOL]     }); [EOL]     assertNotNull(map); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(13), map.get(EnumWithJsonValue.A)); [EOL] }
public void testEnumHandling() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setAnnotationIntrospector(new LcEnumIntrospector()); [EOL]     assertEquals("\"value1\"", mapper.writeValueAsString(EnumExample.VALUE1)); [EOL]     EnumExample result = mapper.readValue(quote("value1"), EnumExample.class); [EOL]     assertEquals(EnumExample.VALUE1, result); [EOL] }
public void testViaFactoryUsingString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     FactoryFromDecimalString result = m.readValue("\"12.57\"", FactoryFromDecimalString.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(12, result._value); [EOL] }
public void testViaFactoryUsingString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     FactoryFromDecimalString result = m.readValue("\"12.57\"", FactoryFromDecimalString.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(12, result._value); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object.class)); [EOL]     assertNull(m.readValue(quote(""), String.class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object.class)); [EOL]     assertNull(m.readValue(quote(""), String.class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object.class)); [EOL]     assertNull(m.readValue(quote(""), String.class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testFromEmptyString() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true); [EOL]     assertNull(m.readValue(quote(""), Object[].class)); [EOL]     assertNull(m.readValue(quote(""), String[].class)); [EOL]     assertNull(m.readValue(quote(""), int[].class)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testEmbeddedObjectInObject() throws Exception { [EOL]     TokenBuffer buf = new TokenBuffer(MAPPER); [EOL]     buf.writeStartObject(); [EOL]     buf.writeFieldName("pojo"); [EOL]     buf.writeObject(MARKER); [EOL]     buf.writeEndObject(); [EOL]     JsonNode node = MAPPER.readTree(buf.asParser()); [EOL]     buf.close(); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, node.size()); [EOL]     JsonNode n = node.get("pojo"); [EOL]     assertTrue(n.isPojo()); [EOL]     assertSame(MARKER, ((POJONode) n).getPojo()); [EOL] }
public void testEmbeddedObjectInObject() throws Exception { [EOL]     TokenBuffer buf = new TokenBuffer(MAPPER); [EOL]     buf.writeStartObject(); [EOL]     buf.writeFieldName("pojo"); [EOL]     buf.writeObject(MARKER); [EOL]     buf.writeEndObject(); [EOL]     JsonNode node = MAPPER.readTree(buf.asParser()); [EOL]     buf.close(); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, node.size()); [EOL]     JsonNode n = node.get("pojo"); [EOL]     assertTrue(n.isPojo()); [EOL]     assertSame(MARKER, ((POJONode) n).getPojo()); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testEmbeddedObjectInObject() throws Exception { [EOL]     TokenBuffer buf = new TokenBuffer(MAPPER); [EOL]     buf.writeStartObject(); [EOL]     buf.writeFieldName("pojo"); [EOL]     buf.writeObject(MARKER); [EOL]     buf.writeEndObject(); [EOL]     JsonNode node = MAPPER.readTree(buf.asParser()); [EOL]     buf.close(); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, node.size()); [EOL]     JsonNode n = node.get("pojo"); [EOL]     assertTrue(n.isPojo()); [EOL]     assertSame(MARKER, ((POJONode) n).getPojo()); [EOL] }
public void testEmbeddedObjectInObject() throws Exception { [EOL]     TokenBuffer buf = new TokenBuffer(MAPPER); [EOL]     buf.writeStartObject(); [EOL]     buf.writeFieldName("pojo"); [EOL]     buf.writeObject(MARKER); [EOL]     buf.writeEndObject(); [EOL]     JsonNode node = MAPPER.readTree(buf.asParser()); [EOL]     buf.close(); [EOL]     assertTrue(node.isObject()); [EOL]     assertEquals(1, node.size()); [EOL]     JsonNode n = node.get("pojo"); [EOL]     assertTrue(n.isPojo()); [EOL]     assertSame(MARKER, ((POJONode) n).getPojo()); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testExplicitIgnoralWithMap() throws Exception { [EOL]     MyMap value = new MyMap(); [EOL]     value.put("a", "b"); [EOL]     value.put("@class", MyMap.class.getName()); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, value); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("@class")); [EOL]     assertEquals(value.get("a"), result.get("a")); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testSerializedAsMapWithClassSerializer() throws IOException { [EOL]     SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer(); [EOL]     map.put(new SimpleKey("abc"), new ActualValue("123")); [EOL]     assertEquals("{\"key abc\":\"value 123\"}", MAPPER.writeValueAsString(map)); [EOL] }
public void testExplicitIgnoralWithMap() throws Exception { [EOL]     MyMap value = new MyMap(); [EOL]     value.put("a", "b"); [EOL]     value.put("@class", MyMap.class.getName()); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, value); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("@class")); [EOL]     assertEquals(value.get("a"), result.get("a")); [EOL] }
public void testExplicitIgnoralWithMap() throws Exception { [EOL]     MyMap value = new MyMap(); [EOL]     value.put("a", "b"); [EOL]     value.put("@class", MyMap.class.getName()); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, value); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("@class")); [EOL]     assertEquals(value.get("a"), result.get("a")); [EOL] }
public void testExplicitIgnoralWithMap() throws Exception { [EOL]     MyMap value = new MyMap(); [EOL]     value.put("a", "b"); [EOL]     value.put("@class", MyMap.class.getName()); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, value); [EOL]     assertEquals(1, result.size()); [EOL]     assertFalse(result.containsKey("@class")); [EOL]     assertEquals(value.get("a"), result.get("a")); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testSchemaId() throws Exception { [EOL]     JsonSchema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class); [EOL]     String json = jsonSchema.toString().replaceAll("\"", "'"); [EOL]     assertEquals("{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}", json); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testBeanAsObject() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     String str = m.writeValueAsString(new Object[] { new StringBean("abc") }); [EOL]     _verifySerializationAsMap(str); [EOL]     Object ob = m.readValue(str, Object[].class); [EOL]     assertNotNull(ob); [EOL]     Object[] result = (Object[]) ob; [EOL]     assertNotNull(result[0]); [EOL]     assertEquals(StringBean.class, result[0].getClass()); [EOL]     assertEquals("abc", ((StringBean) result[0]).name); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testListAsArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "[\n" + asJSONObjectValueString(m, "@classy", Cat.class.getName(), "name", "Hello", "furColor", "white") + ",\n" + asJSONObjectValueString(m, "boneCount", Integer.valueOf(1), "@classy", Dog.class.getName(), "name", "Bob") + ",\n" + asJSONObjectValueString(m, "@classy", Fish.class.getName()) + ", null\n]"; [EOL]     JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class); [EOL]     List<Animal> animals = m.readValue(JSON, expType); [EOL]     assertNotNull(animals); [EOL]     assertEquals(4, animals.size()); [EOL]     Cat c = (Cat) animals.get(0); [EOL]     assertEquals("Hello", c.name); [EOL]     assertEquals("white", c.furColor); [EOL]     Dog d = (Dog) animals.get(1); [EOL]     assertEquals("Bob", d.name); [EOL]     assertEquals(1, d.boneCount); [EOL]     Fish f = (Fish) animals.get(2); [EOL]     assertNotNull(f); [EOL]     assertNull(animals.get(3)); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testFactoryAndProps() throws Exception { [EOL]     FactoryAndPropsBean bean = MAPPER.readValue("{ \"a\" : [ false, true, false ], \"b\": 2, \"c\" : -1 }", FactoryAndPropsBean.class); [EOL]     assertEquals(2, bean.arg2); [EOL]     assertEquals(-1, bean.arg3); [EOL]     boolean[] arg1 = bean.arg1; [EOL]     assertNotNull(arg1); [EOL]     assertEquals(3, arg1.length); [EOL]     assertFalse(arg1[0]); [EOL]     assertTrue(arg1[1]); [EOL]     assertFalse(arg1[2]); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws Exception { [EOL]     final String json = "{\"a\":1,\"c\":3,\"b\":2}"; [EOL]     CreatorValue value = mapper.readValue(json, CreatorValue.class); [EOL]     assertEquals(1, value.a); [EOL]     assertEquals(2, value.b); [EOL]     assertEquals(3, value.c); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testEnumWithCreatorMaps() throws Exception { [EOL]     java.util.HashMap<EnumWithCreator, String> value = MAPPER.readValue("{\"enumA\":\"value\"}", new TypeReference<java.util.HashMap<EnumWithCreator, String>>() { [EOL]     }); [EOL]     assertEquals("value", value.get(EnumWithCreator.A)); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testWithCreator() throws IOException { [EOL]     final String MSG = "the message"; [EOL]     String json = MAPPER.writeValueAsString(new MyException(MSG, 3)); [EOL]     MyException result = MAPPER.readValue(json, MyException.class); [EOL]     assertEquals(MSG, result.getMessage()); [EOL]     assertEquals(3, result.value); [EOL]     assertEquals(1, result.stuff.size()); [EOL]     assertEquals(result.getFoo(), result.stuff.get("foo")); [EOL] }
public void testMapContentUsing() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapBean result = m.readValue(" { \"values\" : { \"a\": 1, \"b\":2 } } ", MapBean.class); [EOL]     assertNotNull(result); [EOL]     Map<String, Object> map = result.values; [EOL]     assertNotNull(map); [EOL]     assertEquals(2, map.size()); [EOL]     assertEquals(ValueClass.class, map.get("a").getClass()); [EOL]     assertEquals(1, ((ValueClass) map.get("a"))._a); [EOL]     assertEquals(ValueClass.class, map.get("b").getClass()); [EOL]     assertEquals(2, ((ValueClass) map.get("b"))._a); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testSimpleUnwrappedDeserialize() throws Exception { [EOL]     Unwrapping bean = mapper.readValue("{\"name\":\"Tatu\",\"y\":7,\"x\":-13}", Unwrapping.class); [EOL]     assertEquals("Tatu", bean.name); [EOL]     Location loc = bean.location; [EOL]     assertNotNull(loc); [EOL]     assertEquals(-13, loc.x); [EOL]     assertEquals(7, loc.y); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormat() { [EOL]     String result = ISO8601Utils.format(date); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
public void testEmptyStringForWrappers() throws IOException { [EOL]     WrappersBean bean; [EOL]     bean = mapper.readValue("{\"booleanValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.booleanValue); [EOL]     bean = mapper.readValue("{\"byteValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.byteValue); [EOL]     bean = mapper.readValue("{\"charValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.charValue); [EOL]     bean = mapper.readValue("{\"shortValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.shortValue); [EOL]     bean = mapper.readValue("{\"intValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.intValue); [EOL]     bean = mapper.readValue("{\"longValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.longValue); [EOL]     bean = mapper.readValue("{\"floatValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.floatValue); [EOL]     bean = mapper.readValue("{\"doubleValue\":\"\"}", WrappersBean.class); [EOL]     assertNull(bean.doubleValue); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testEmptyBeanEnumMap() throws IOException { [EOL]     EnumMap<Key, String> map = new EnumMap<Key, String>(Key.class); [EOL]     EnumMapBean b = new EnumMapBean(map); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, b); [EOL]     assertEquals(1, result.size()); [EOL]     assertTrue(result.containsKey("map")); [EOL]     Map<Object, Object> map2 = (Map<Object, Object>) result.get("map"); [EOL]     assertNotNull(map2); [EOL]     assertEquals(0, map2.size()); [EOL] }
public void testFindExplicit() throws JsonMappingException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SerializationConfig config = mapper.getSerializationConfig(); [EOL]     SerializerFactory f = new BeanSerializerFactory(null); [EOL]     DefaultSerializerProvider prov = new DefaultSerializerProvider.Impl().createInstance(config, f); [EOL]     assertNotNull(prov.findKeySerializer(mapper.constructType(String.class), null)); [EOL]     assertNotNull(prov.getDefaultNullKeySerializer()); [EOL]     assertNotNull(prov.getDefaultNullValueSerializer()); [EOL]     assertNotNull(prov.getUnknownTypeSerializer(getClass())); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL] }
public void testFindExplicit() throws JsonMappingException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SerializationConfig config = mapper.getSerializationConfig(); [EOL]     SerializerFactory f = new BeanSerializerFactory(null); [EOL]     DefaultSerializerProvider prov = new DefaultSerializerProvider.Impl().createInstance(config, f); [EOL]     assertNotNull(prov.findKeySerializer(mapper.constructType(String.class), null)); [EOL]     assertNotNull(prov.getDefaultNullKeySerializer()); [EOL]     assertNotNull(prov.getDefaultNullValueSerializer()); [EOL]     assertNotNull(prov.getUnknownTypeSerializer(getClass())); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL] }
public void testFindExplicit() throws JsonMappingException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SerializationConfig config = mapper.getSerializationConfig(); [EOL]     SerializerFactory f = new BeanSerializerFactory(null); [EOL]     DefaultSerializerProvider prov = new DefaultSerializerProvider.Impl().createInstance(config, f); [EOL]     assertNotNull(prov.findKeySerializer(mapper.constructType(String.class), null)); [EOL]     assertNotNull(prov.getDefaultNullKeySerializer()); [EOL]     assertNotNull(prov.getDefaultNullValueSerializer()); [EOL]     assertNotNull(prov.getUnknownTypeSerializer(getClass())); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL] }
public void testFindExplicit() throws JsonMappingException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SerializationConfig config = mapper.getSerializationConfig(); [EOL]     SerializerFactory f = new BeanSerializerFactory(null); [EOL]     DefaultSerializerProvider prov = new DefaultSerializerProvider.Impl().createInstance(config, f); [EOL]     assertNotNull(prov.findKeySerializer(mapper.constructType(String.class), null)); [EOL]     assertNotNull(prov.getDefaultNullKeySerializer()); [EOL]     assertNotNull(prov.getDefaultNullValueSerializer()); [EOL]     assertNotNull(prov.getUnknownTypeSerializer(getClass())); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL] }
public void testFindExplicit() throws JsonMappingException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SerializationConfig config = mapper.getSerializationConfig(); [EOL]     SerializerFactory f = new BeanSerializerFactory(null); [EOL]     DefaultSerializerProvider prov = new DefaultSerializerProvider.Impl().createInstance(config, f); [EOL]     assertNotNull(prov.findKeySerializer(mapper.constructType(String.class), null)); [EOL]     assertNotNull(prov.getDefaultNullKeySerializer()); [EOL]     assertNotNull(prov.getDefaultNullValueSerializer()); [EOL]     assertNotNull(prov.getUnknownTypeSerializer(getClass())); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL] }
public void testFindExplicit() throws JsonMappingException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SerializationConfig config = mapper.getSerializationConfig(); [EOL]     SerializerFactory f = new BeanSerializerFactory(null); [EOL]     DefaultSerializerProvider prov = new DefaultSerializerProvider.Impl().createInstance(config, f); [EOL]     assertNotNull(prov.findKeySerializer(mapper.constructType(String.class), null)); [EOL]     assertNotNull(prov.getDefaultNullKeySerializer()); [EOL]     assertNotNull(prov.getDefaultNullValueSerializer()); [EOL]     assertNotNull(prov.getUnknownTypeSerializer(getClass())); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(String.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL]     assertTrue(prov.createInstance(config, f).hasSerializerFor(MyBean.class)); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(quote("en"), MAPPER.writeValueAsString(Locale.CHINA)); [EOL]     assertEquals(quote("es", "ES"), MAPPER.writeValueAsString(Locale.CHINA)); [EOL]     assertEquals(quote("FI", "fi", "savo"), MAPPER.writeValueAsString(Locale.fi, "savo")); [EOL] }
public void testLocale() throws IOException { [EOL]     assertEquals(quote("en"), MAPPER.writeValueAsString(Locale.CHINA)); [EOL]     assertEquals(quote("es", "ES"), MAPPER.writeValueAsString(Locale.US)); [EOL]     assertEquals(quote("FI", "fi", "savo"), MAPPER.writeValueAsString(Locale.CHINA)); [EOL] }
public void testXMLGregorianCalendarSerAndDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     XMLGregorianCalendar cal = dtf.newXMLGregorianCalendar(1974, 10, 10, 18, 15, 17, 123, 0); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long timestamp = cal.toGregorianCalendar().getTimeInMillis(); [EOL]     String numStr = String.valueOf(timestamp); [EOL]     assertEquals(numStr, mapper.writeValueAsString(cal)); [EOL]     XMLGregorianCalendar calOut = mapper.readValue(numStr, XMLGregorianCalendar.class); [EOL]     assertNotNull(calOut); [EOL]     assertEquals(timestamp, calOut.toGregorianCalendar().getTimeInMillis()); [EOL]     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); [EOL]     String exp = cal.toXMLFormat(); [EOL]     String act = mapper.writeValueAsString(cal); [EOL]     act = act.substring(1, act.length() - 1); [EOL]     exp = removeZ(exp); [EOL]     act = removeZ(act); [EOL]     assertEquals(exp, act); [EOL] }
public void testXMLGregorianCalendarSerAndDeser() throws Exception { [EOL]     DatatypeFactory dtf = DatatypeFactory.newInstance(); [EOL]     XMLGregorianCalendar cal = dtf.newXMLGregorianCalendar(1974, 10, 10, 18, 15, 17, 123, 0); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     long timestamp = cal.toGregorianCalendar().getTimeInMillis(); [EOL]     String numStr = String.valueOf(timestamp); [EOL]     assertEquals(numStr, mapper.writeValueAsString(cal)); [EOL]     XMLGregorianCalendar calOut = mapper.readValue(numStr, XMLGregorianCalendar.class); [EOL]     assertNotNull(calOut); [EOL]     assertEquals(timestamp, calOut.toGregorianCalendar().getTimeInMillis()); [EOL]     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); [EOL]     String exp = cal.toXMLFormat(); [EOL]     String act = mapper.writeValueAsString(cal); [EOL]     act = act.substring(1, act.length() - 1); [EOL]     exp = removeZ(exp); [EOL]     act = removeZ(act); [EOL]     assertEquals(exp, act); [EOL] }
public void testClass() throws IOException { [EOL]     assertEquals(quote("java.lang.String"), MAPPER.writeValueAsString(String.class)); [EOL]     assertEquals(quote("int"), MAPPER.writeValueAsString(Integer.TYPE)); [EOL]     assertEquals(quote("boolean"), MAPPER.writeValueAsString(Boolean.TYPE)); [EOL]     assertEquals(quote("void"), MAPPER.writeValueAsString(Void.TYPE)); [EOL] }
public void testStringListAsObjectWrapper() throws Exception { [EOL]     TypedListAsWrapper<Boolean> input = new TypedListAsWrapper<Boolean>(); [EOL]     input.add(true); [EOL]     input.add(null); [EOL]     input.add(false); [EOL]     String expName = "TestTypedArraySerialization$TypedListAsWrapper"; [EOL]     assertEquals("{\"" + expName + "\":[true,null,false]}", serializeAsString(input)); [EOL] }
public void testSimpleNumberBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     NumberBean result = mapper.readValue("{\"number\":17}", NumberBean.class); [EOL]     assertEquals(17, result._number); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testTypedMaps() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Issue822Interface> map = new HashMap<String, Issue822Interface>(); [EOL]     map.put("a", new Issue822Impl()); [EOL]     String listJson = mapper.writerWithType(new TypeReference<Map<String, Issue822Interface>>() { [EOL]     }).writeValueAsString(map); [EOL]     assertEquals("{\"a\":{\"a\":3}}", listJson); [EOL] }
public void testSelfReference() throws Exception { [EOL]     Bean selfRef = new Bean(null, "self-refs"); [EOL]     Bean first = new Bean(selfRef, "first"); [EOL]     selfRef.assignNext(selfRef); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Bean[] wrapper = new Bean[] { first }; [EOL]     try { [EOL]         writeAndMap(m, wrapper); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Direct self-reference leading to cycle"); [EOL]     } [EOL] }
