public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     assertTrue(expected.getMessage().contains("ref")); [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     assertTrue(expected.getMessage().contains("ref")); [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     assertTrue(expected.getMessage().contains("ref")); [EOL]     } [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]     assertTrue(expected.getMessage().contains("ref")); [EOL]     } [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testPopTooMany() throws Exception { [EOL]     ObjectTypePair obj = new ObjectTypePair(this, getClass(), true); [EOL]     stack.push(obj); [EOL]     assertEquals(obj, stack.pop()); [EOL]     try { [EOL]         stack.pop(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testSelfReferenceSerialization() throws Exception { [EOL]     ClassOverridingEquals objA = new ClassOverridingEquals(); [EOL]     objA.ref = objA; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("ref")); [EOL]     } [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNumbers() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(new BigInteger("0")); [EOL]     jsonWriter.value(new BigInteger("9223372036854775808")); [EOL]     jsonWriter.value(new BigInteger("-9223372036854775809")); [EOL]     jsonWriter.value(new BigDecimal("3.141592653589793238462643383")); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[0," + "9223372036854775808," + "-9223372036854775809," + "3.141592653589793238462643383]", stringWriter.toString()); [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(true); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testBaseSerializedAsSub() { [EOL]     Base base = new Sub(); [EOL]     JsonObject json = gson.toJsonTree(base).getAsJsonObject(); [EOL]     assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString()); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testStringWithOctalPrefix() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientUnnecessaryArraySeparators() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true,,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[true,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL]     reader = new JsonReader(new StringReader("[,]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.nextNull(); [EOL]     reader.nextNull(); [EOL]     reader.endArray(); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testCharacterUnescaping() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() { [EOL]     Gson gson = gsonBuilder.generateNonExecutableJson().create(); [EOL]     String json = JSON_NON_EXECUTABLE_PREFIX + "{intValue:2,stringValue:')]}\\u0027\\n'}"; [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(")]    \n", target.stringValue); [EOL]     assertEquals(2, target.intValue); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testDefaultJavaSqlTimeDeserialization() { [EOL]     String json = "'1:18:02 PM'"; [EOL]     Time extracted = gson.fromJson(json, Time.class); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testDefaultJavaSqlTimeDeserialization() { [EOL]     String json = "'1:18:02 PM'"; [EOL]     Time extracted = gson.fromJson(json, Time.class); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testYearPropertySerialization() { [EOL]     ClassWithYear target = new ClassWithYear(); [EOL]     String json = gson.toJson(target); [EOL]     assertEquals(target.getExpectedJson(), json); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSECOND() throws Exception { [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testUrlDeserialization() { [EOL]     String json = "http://google.com/"; [EOL]     URL target = new URL(json); [EOL]     assertEquals(target.toASCIIString(), json); [EOL] }
public void testUrlDeserialization() { [EOL]     String json = "http://google.com/"; [EOL]     URL target = new URL(json); [EOL]     assertEquals(target.toASCIIString(), json); [EOL] }
public void testUrlDeserialization() { [EOL]     String json = "http://google.com/"; [EOL]     URL target = new URL(json); [EOL]     assertEquals(target.toASCIIString(), json); [EOL] }
public void testUuidSerialization() { [EOL]     String uuidValue = "c237bec1-19ef-4858-a98e-521cf0aad4c0"; [EOL]     String json = gson.toJson(uuidValue); [EOL]     assertEquals(uuidValue, json); [EOL] }
public void testUuidSerialization() { [EOL]     String uuidValue = "c237bec1-19ef-4858-a98e-521cf0aad4c0"; [EOL]     String json = gson.toJson(uuidValue); [EOL]     assertEquals(uuidValue, json); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale target = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, target); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testNullsInListSerialization() { [EOL]     List<String> list = new ArrayList<String>(); [EOL]     list.add("foo"); [EOL]     list.add(null); [EOL]     list.add("bar"); [EOL]     String json = gson.toJson(list); [EOL]     assertEquals("[\"foo\",null,\"bar\"]", json); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testPropertiesSerialization() { [EOL]     Properties props = new Properties(); [EOL]     props.setProperty("foo", "bar"); [EOL]     String json = gson.toJson(props); [EOL]     String expected = "{\"foo\":\"bar\"}"; [EOL]     assertEquals(expected, json); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testInvalidConstruction() throws Exception { [EOL]     try { [EOL]         new TypeInfoMap(String.class); [EOL]         fail("Must be a ParameterizedType"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testInvalidConstruction() throws Exception { [EOL]     try { [EOL]         new TypeInfoMap(String.class); [EOL]         fail("Must be a ParameterizedType"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testInvalidConstruction() throws Exception { [EOL]     try { [EOL]         new TypeInfoMap(String.class); [EOL]         fail("Must be a ParameterizedType"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testObjectType() throws Exception { [EOL]     TypeInfoMap typeInfoMap = new TypeInfoMap(String.class); [EOL]     assertTrue(typeInfoMap.isArray()); [EOL]     assertFalse(typeInfoMap.isEnum()); [EOL]     assertEquals(String.class, typeInfoMap.getKeyType()); [EOL]     assertEquals(String.class, typeInfoMap.getValueType()); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithCollection target = gson.fromJson(json, ClassWithCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithCollection target = gson.fromJson(json, ClassWithCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testEmptyStringDeserialization() throws Exception { [EOL]     Object object = gson.fromJson("", Object.class); [EOL]     assertNull(object); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidArrayDeserialization() { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, int[].class); [EOL]         fail("Gson should not deserialize array elements with missing,"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testWriterDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtml(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(jsonWriter); [EOL]     assertTrue(jsonWriter.isHtml()); [EOL]     jsonWriter.setHtml(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(jsonWriter); [EOL]     assertFalse(jsonWriter.isHtml()); [EOL] }
public void testWriterSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonReader parser = new JsonReader(reader); [EOL]     parser.beginArray(); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testArrayOfObjectsWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBigDecimalInASingleElementArrayDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("343434343424242423432323243243242"); [EOL]     BigDecimal actual = gson.fromJson("[343434343424242423432323243243242]", BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testBigDecimalInASingleElementArrayDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("34343434343424242423432323243243242"); [EOL]     BigDecimal actual = gson.fromJson("[34343434343424242423432323243243242]", BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testBigDecimalInASingleElementArrayDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("34343434343424242423432323243243242"); [EOL]     BigDecimal actual = gson.fromJson("[34343434343424242423432323243243242]", BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new FieldNamingPolicy2.UsingDashesInstead(); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getOwnerType()); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getOwnerType()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertEquals(parameterizedType, ourType.getRawType()); [EOL]     assertEquals(genericType, ourType); [EOL]     assertEquals(genericType.hashCode(), ourType.hashCode()); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL]     assertEquals(ourType.hashCode(), differentParameterizedType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertEquals(parameterizedType, ourType.getRawType()); [EOL]     assertEquals(genericType, ourType); [EOL]     assertEquals(genericType.hashCode(), ourType.hashCode()); [EOL] }
public void testGetActualTypeForFirstTypeVariable() { [EOL]     assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE)); [EOL] }
public void testGetActualTypeForFirstTypeVariable() { [EOL]     assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE)); [EOL] }
public void testIsArrayForArrayClasses() { [EOL]     assertTrue(TypeUtils.isArray(String[].class)); [EOL]     assertTrue(TypeUtils.isArray(Integer[][].class)); [EOL]     assertTrue(TypeUtils.isArray(Collection[].class)); [EOL] }
public void testIsArrayForArrayClasses() { [EOL]     assertTrue(TypeUtils.isArray(String[].class)); [EOL]     assertTrue(TypeUtils.isArray(Integer[][].class)); [EOL]     assertTrue(TypeUtils.isArray(Collection[].class)); [EOL] }
public void testIgnoreLaterVersionClassSerialization() throws Exception { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testIgnoreLaterVersionClassSerialization() throws Exception { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     assertEquals("", gson.toJson(new Version1_2())); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL]     jsonWriter.setHtmlSafe(false); [EOL]     jsonWriter.setLenient(false); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertFalse(jsonWriter.isHtmlSafe()); [EOL]     assertFalse(jsonWriter.isLenient()); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testNullObjectSerialization() throws Exception { [EOL]     Gson gson = gsonBuilder.create(); [EOL]     String actual = gson.toJson(null); [EOL]     assertEquals("null", actual); [EOL]     actual = gson.toJson(null, String.class); [EOL]     assertEquals("null", actual); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testExplicitSerializationOfNulls() { [EOL]     Gson gson = gsonBuilder.create(); [EOL]     ClassWithObjects target = new ClassWithObjects(null); [EOL]     String actual = gson.toJson(target); [EOL]     String expected = "{\"bag\":null}"; [EOL]     assertEquals(expected, actual); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testVariableTypeArrayDeserialization() throws Exception { [EOL]     Integer[] array = { 1, 2, 3 }; [EOL]     Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() { [EOL]     }.getType(); [EOL]     ObjectWithTypeVariables<Integer> objToSerialize = new ObjectWithTypeVariables<Integer>(null, array, null, null, null); [EOL]     String json = gson.toJson(objToSerialize, typeOfSrc); [EOL]     ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc); [EOL]     assertEquals(objAfterDeserialization.getExpectedJson(), json); [EOL] }
public void testVariableTypeArrayDeserialization() throws Exception { [EOL]     Integer[] array = { 1, 2, 3 }; [EOL]     Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() { [EOL]     }.getType(); [EOL]     ObjectWithTypeVariables<Integer> objToSerialize = new ObjectWithTypeVariables<Integer>(null, array, null, null, null, null); [EOL]     String json = gson.toJson(objToSerialize, typeOfSrc); [EOL]     ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc); [EOL]     assertEquals(objAfterDeserialization.getExpectedJson(), json); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testLruCacheSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     ClassWithObjects target = new ClassWithObjects(); [EOL]     String json = gson.toJson(target); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals(target.toJson(), actual); [EOL] }
public void testLruCacheSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     ClassWithObjects target = new ClassWithObjects(); [EOL]     String json = gson.toJson(target); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals(target.toJson(), actual); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testGetElement() throws Exception { [EOL]     MockObject objA = new MockObject(); [EOL]     MockObject objB = new MockObject(); [EOL]     assertEquals(objA, objB); [EOL]     assertEquals(objA.hashCode(), objB.hashCode()); [EOL] }
public void testSize() throws Exception { [EOL]     assertEquals(0, cache.size()); [EOL]     cache.addElement(KEY, VALUE); [EOL]     assertEquals(1, cache.size()); [EOL]     assertEquals(VALUE, cache.getElement(KEY)); [EOL] }
public void testSize() throws Exception { [EOL]     assertEquals(0, cache.size()); [EOL]     cache.addElement(KEY, VALUE); [EOL]     assertEquals(1, cache.size()); [EOL]     assertEquals(VALUE, cache.getElement(KEY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testRemoveEldestEntry() throws Exception { [EOL]     MockObject objA = new MockObject(); [EOL]     MockObject objB = new MockObject(); [EOL]     assertEquals(objA, objB); [EOL]     assertEquals(objA.hashCode(), objB.hashCode()); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testPolicyDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.FULL).create(); [EOL]     String json = "{\"longValue\":10,\"intValue\":20,\"booleanValue\":false}"; [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     expected.longValue = 10; [EOL]     expected.intValue = 20; [EOL]     expected.booleanValue = false; [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL]     gson = new GsonBuilder().disableInnerClassSerialization().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL]     gson = new GsonBuilder().disableInnerClassSerialization().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL]     gson = new GsonBuilder().disableInnerClassSerialization().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testHasModifier() throws Exception { [EOL]     assertFalse(fieldAttributes.hasModifier(Field.DEFAULT_MODIFIER)); [EOL]     assertTrue(fieldAttributes.hasModifier(Field.DEFAULT_ACCESSOR)); [EOL] }
public void testModifiers() throws Exception { [EOL]     Field f = MockObject.class.getField("someField"); [EOL]     assertFalse(strategy.shouldSkipModifier(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testBigDecimalNaNDeserializationNotSupported() { [EOL]     try { [EOL]         gson.fromJson("NaN", BigDecimal.class); [EOL]         fail("Gson should not accept NaN for deserialization by default."); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBigDecimalNaNDeserializationNotSupported() { [EOL]     try { [EOL]         gson.fromJson("NaN", BigDecimal.class); [EOL]         fail("Gson should not accept NaN for deserialization by default."); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base>() { [EOL]  [EOL]         public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) { [EOL]         JsonObject json = new JsonObject(); [EOL]         json.addProperty("value", src.baseValue); [EOL]         return json; [EOL]         } [EOL]     }).create(); [EOL]     Base b = new Base(); [EOL]     String json = gson.toJson(b); [EOL]     assertTrue(json.contains("value")); [EOL]     b = new Derived(); [EOL]     json = gson.toJson(b, Base.class); [EOL]     assertTrue(json.contains("value")); [EOL]     assertFalse(json.contains("derivedValue")); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testJsonObjectSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     String json = gson.toJson(obj); [EOL]     assertEquals("{}", json); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testParseMixedArray() { [EOL]     String json = "[{},13,\"stringValue\"]"; [EOL]     JsonElement e = parser.parse(json); [EOL]     assertTrue(e.isJsonArray()); [EOL]     JsonArray array = e.getAsJsonArray(); [EOL]     assertEquals("{}", array.get(0).toString()); [EOL]     assertEquals(13, array.get(1).getAsInt()); [EOL]     assertEquals("stringValue", array.get(2).getAsString()); [EOL] }
