@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\"class\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\"mellow yellow\", span.className()); [EOL]     assertTrue(span.hasClass(\"mellow\")); [EOL]     assertTrue(span.hasClass(\"yellow\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\"mellow\")); [EOL]     assertTrue(classes.contains(\"yellow\")); [EOL]     assertEquals(\"\", doc.className()); [EOL]     assertFalse(doc.hasClass(\"mellow\")); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.html(\"<p>there</p><p>now</p>\"); [EOL]     assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void testWrap() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     p.wrap(\"<div class='head'></div>\"); [EOL]     assertEquals(\"<div><div class=\\"head\\"><p>Hello</p></div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html())); [EOL]     Element ret = p.wrap(\"<div><div class=foo></div><p>What?</p></div>\"); [EOL]     assertEquals(\"<div><div class=\\"head\\"><div><div class=\\"foo\\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html())); [EOL]     assertEquals(ret, p); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = \"<p><b>This</b> is <b>jsoup</b></p>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\"b\").wrap(\"<i></i>\"); [EOL]     assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html()); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\"); [EOL]     assertEquals(\"<html><head></head><body><div title=\\"Tags &amp;c.\\"><img src=\\"foo.png\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\"); [EOL]     Elements els = doc.select(\"textarea\"); [EOL]     assertEquals(\"Hello\", els.text()); [EOL]     assertEquals(\"Hello\", els.val()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void testElementSiblingIndex() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(0 == ps.get(0).elementSiblingIndex()); [EOL]     assertTrue(1 == ps.get(1).elementSiblingIndex()); [EOL]     assertTrue(2 == ps.get(2).elementSiblingIndex()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void caseInsensitive() { [EOL]     String h = \"<dIv tItle=bAr><div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(2, doc.select(\"DIV\").size()); [EOL]     assertEquals(1, doc.select(\"DIV[TITLE]\").size()); [EOL]     assertEquals(1, doc.select(\"DIV[TITLE=BAR]\").size()); [EOL]     assertEquals(0, doc.select(\"DIV[TITLE=BARBARELLA\").size()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void normalisesEmptyDocument() { [EOL]     Document doc = Jsoup.parse(\"\"); [EOL]     assertEquals(\"<html><head></head><body></body></html>\", TextUtil.stripNewlines(doc.html())); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = \"foo <b>bar</b> baz\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals(\"foo bar baz\", doc.text()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\"); [EOL]     Elements els = doc.select(\"textarea\"); [EOL]     assertEquals(\"Hello\", els.text()); [EOL]     assertEquals(\"Hello\", els.val()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.html(\"<p>there</p><p>now</p>\"); [EOL]     assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void emptyOnNoKey() { [EOL]     String html = \"<a =empty />\"; [EOL]     Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0); [EOL]     Attributes attr = el.attributes(); [EOL]     assertEquals(0, attr.size()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\"); [EOL]     Elements els = doc.select(\"textarea\"); [EOL]     assertEquals(\"Hello\", els.text()); [EOL]     assertEquals(\"Hello\", els.val()); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\"a\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\"relHref\", \"/foo\"); [EOL]     attribs.put(\"absHref\", \"http://bar/qux\"); [EOL]     Element noBase = new Element(tag, \"\", attribs); [EOL]     assertEquals(\"\", noBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); [EOL]     Element withBase = new Element(tag, \"http://foo/\", attribs); [EOL]     assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", withBase.absUrl(\"noval\")); [EOL]     Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs); [EOL]     assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void parsesRoughAttributes() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p class=\\"foo > bar\\">First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     assertEquals(\"foo > bar\", p.attr(\"class\")); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = \"<div id=1/><div id=2><img /></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById(\"1\"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.html(\"<p>there</p><p>now</p>\"); [EOL]     assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.html(\"<p>there</p><p>now</p>\"); [EOL]     assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.html(\"<p>there</p><p>now</p>\"); [EOL]     assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.html(\"<p>there</p><p>now</p>\"); [EOL]     assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = \"<dt>Foo<dd>Bar<dt>Qux<dd>Zug\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag(\"dl\").first().children().size()); [EOL]     Elements dts = doc.select(\"dt\"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals(\"Zug\", dts.get(1).nextElementSibling().text()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(ps.hasAttr(\"class\")); [EOL]     assertFalse(ps.hasAttr(\"style\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\"; [EOL]     Document doc = Jsoup.parse(h, \"http://foo/\"); [EOL]     assertEquals(\"http://bar\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\"a\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\"http://foo/\", anchors.get(0).baseUri()); [EOL]     assertEquals(\"http://foo/2/\", anchors.get(1).baseUri()); [EOL]     assertEquals(\"http://bar\", anchors.get(2).baseUri()); [EOL]     assertEquals(\"http://foo/1\", anchors.get(0).absUrl(\"href\")); [EOL]     assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\")); [EOL]     assertEquals(\"http://bar/4\", anchors.get(2).absUrl(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void handlesCdata() { [EOL]     String h = \"<div id=1><![CData[<html>\n<foo><&amp;]]></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     assertEquals(\"<html> <foo><&amp;\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = \"foo <b>bar</b> baz\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals(\"foo bar baz\", doc.text()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesCdata() { [EOL]     String h = \"<div id=1><![CData[<html>\n<foo><&amp;]]></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     assertEquals(\"<html> <foo><&amp;\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\"); [EOL]     assertEquals(\"<html><head></head><body><div title=\\"Tags &amp;c.\\"><img src=\\"foo.png\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\"); [EOL]     Elements els = doc.select(\"textarea\"); [EOL]     assertEquals(\"Hello\", els.text()); [EOL]     assertEquals(\"Hello\", els.val()); [EOL] }
@Test [EOL] public void filter() { [EOL]     String h = \"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\".headline\").select(\"p\"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals(\"Hello\", els.get(0).text()); [EOL]     assertEquals(\"There\", els.get(1).text()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\"class\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\"mellow yellow\", span.className()); [EOL]     assertTrue(span.hasClass(\"mellow\")); [EOL]     assertTrue(span.hasClass(\"yellow\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\"mellow\")); [EOL]     assertTrue(classes.contains(\"yellow\")); [EOL]     assertEquals(\"\", doc.className()); [EOL]     assertFalse(doc.hasClass(\"mellow\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void parsesComments() { [EOL]     String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element body = doc.body(); [EOL]     Comment comment = (Comment) body.childNode(1); [EOL]     assertEquals(\" <table><tr><td></table> \", comment.getData()); [EOL]     Element p = body.child(1); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL] }
@Test [EOL] public void testSupportsLeadingCombinator() { [EOL]     String h = \"<div><p><span>One</span><span>Two</span></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element p = doc.select(\"div > p\").first(); [EOL]     Elements spans = p.select(\"> span\"); [EOL]     assertEquals(2, spans.size()); [EOL]     assertEquals(\"One\", spans.first().text()); [EOL]     h = \"<div id=1><div id=2><div id=3></div></div></div>\"; [EOL]     doc = Jsoup.parse(h); [EOL]     Element div = doc.select(\"div\").select(\" > div\").first(); [EOL]     assertEquals(\"2\", div.id()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = \"<dt>Foo<dd>Bar<dt>Qux<dd>Zug\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag(\"dl\").first().children().size()); [EOL]     Elements dts = doc.select(\"dt\"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals(\"Zug\", dts.get(1).nextElementSibling().text()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = \"<p><b>This</b> is <b>jsoup</b></p>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\"b\").wrap(\"<i></i>\"); [EOL]     assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.html(\"<p>there</p><p>now</p>\"); [EOL]     assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.appendText(\" there & now >\"); [EOL]     assertEquals(\"<p>Hello</p> there &amp; now &gt;\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void filter() { [EOL]     String h = \"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\".headline\").select(\"p\"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals(\"Hello\", els.get(0).text()); [EOL]     assertEquals(\"There\", els.get(1).text()); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\"class\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\"mellow yellow\", span.className()); [EOL]     assertTrue(span.hasClass(\"mellow\")); [EOL]     assertTrue(span.hasClass(\"yellow\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\"mellow\")); [EOL]     assertTrue(classes.contains(\"yellow\")); [EOL]     assertEquals(\"\", doc.className()); [EOL]     assertFalse(doc.hasClass(\"mellow\")); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = \"<p><b>This</b> is <b>jsoup</b></p>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\"b\").wrap(\"<i></i>\"); [EOL]     assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesCdata() { [EOL]     String h = \"<div id=1><![CData[<html>\n<foo><&amp;]]></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     assertEquals(\"<html> <foo><&amp;\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void basicWithImagesTest() { [EOL]     String h = \"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<p><img src=\\"http://example.com/\\" alt=\\"Image\\" /></p><p><img /></p>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag(\"div\"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals(\"div1\", divs.get(0).id()); [EOL]     assertEquals(\"div2\", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag(\"p\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"Hello\", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals(\"Another \", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag(\"P\"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag(\"img\"); [EOL]     assertEquals(\"foo.png\", imgs.get(0).attr(\"src\")); [EOL]     List<Element> empty = doc.getElementsByTag(\"wtf\"); [EOL]     assertEquals(0, empty.size()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<p>Hello</p>\n<p>There</p>\", divs.html()); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(ps.hasAttr(\"class\")); [EOL]     assertFalse(ps.hasAttr(\"style\")); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void basicWithImagesTest() { [EOL]     String h = \"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<p><img src=\\"http://example.com/\\" alt=\\"Image\\" /></p><p><img /></p>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\"); [EOL]     assertEquals(\"<p>Hello</p>\", doc.getElementsByTag(\"div\").get(0).html()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void handlesCdata() { [EOL]     String h = \"<div id=1><![CData[<html>\n<foo><&amp;]]></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     assertEquals(\"<html> <foo><&amp;\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setTextPreservesDocumentStructure() { [EOL]     Document doc = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     doc.text(\"Replaced\"); [EOL]     assertEquals(\"Replaced\", doc.text()); [EOL]     assertEquals(\"Replaced\", doc.body().text()); [EOL]     assertEquals(1, doc.select(\"head\").size()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile(\"/htmltests/smh-biz-article-1.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\"); [EOL]     assertEquals(\"The board鈥檚 next fear: the female quota\", doc.title()); [EOL]     assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\")); [EOL]     Elements articleBody = doc.select(\".articleBody > *\"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = \"foo <b>bar</b> baz\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals(\"foo bar baz\", doc.text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\"a\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\"relHref\", \"/foo\"); [EOL]     attribs.put(\"absHref\", \"http://bar/qux\"); [EOL]     Element noBase = new Element(tag, \"\", attribs); [EOL]     assertEquals(\"\", noBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); [EOL]     Element withBase = new Element(tag, \"http://foo/\", attribs); [EOL]     assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", withBase.absUrl(\"noval\")); [EOL]     Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs); [EOL]     assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void parsesRoughAttributes() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p class=\\"foo > bar\\">First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     assertEquals(\"foo > bar\", p.attr(\"class\")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<p>Hello</p>\n<p>There</p>\", divs.html()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.html(\"<p>there</p><p>now</p>\"); [EOL]     assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void normalisesEmptyDocument() { [EOL]     Document doc = Jsoup.parse(\"\"); [EOL]     assertEquals(\"<html><head></head><body></body></html>\", TextUtil.stripNewlines(doc.html())); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.prependText(\"there & now > \"); [EOL]     assertEquals(\"there & now > Hello\", div.text()); [EOL]     assertEquals(\"there &amp; now &gt; <p>Hello</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\"); [EOL]     assertEquals(\"<html><head></head><body><div title=\\"Tags &amp;c.\\"><img src=\\"foo.png\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = \"<p><b>This</b> is <b>jsoup</b></p>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\"b\").wrap(\"<i></i>\"); [EOL]     assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void mixCombinatorGroup() { [EOL]     String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\".foo > ol, ol > li + li\"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals(\"ol\", els.get(0).tagName()); [EOL]     assertEquals(\"Two\", els.get(1).text()); [EOL]     assertEquals(\"Three\", els.get(2).text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void mixCombinatorGroup() { [EOL]     String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\".foo > ol, ol > li + li\"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals(\"ol\", els.get(0).tagName()); [EOL]     assertEquals(\"Two\", els.get(1).text()); [EOL]     assertEquals(\"Three\", els.get(2).text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile(\"/htmltests/smh-biz-article-1.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\"); [EOL]     assertEquals(\"The board鈥檚 next fear: the female quota\", doc.title()); [EOL]     assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\")); [EOL]     Elements articleBody = doc.select(\".articleBody > *\"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testElementSiblingIndex() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(0 == ps.get(0).elementSiblingIndex()); [EOL]     assertTrue(1 == ps.get(1).elementSiblingIndex()); [EOL]     assertTrue(2 == ps.get(2).elementSiblingIndex()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\"two three\", p.text()); [EOL]     assertEquals(\"<span>two</span> three\", p.html()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\"two three\", p.text()); [EOL]     assertEquals(\"<span>two</span> three\", p.html()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\"; [EOL]     Document doc = Jsoup.parse(h, \"http://foo/\"); [EOL]     assertEquals(\"http://bar\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\"a\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\"http://foo/\", anchors.get(0).baseUri()); [EOL]     assertEquals(\"http://foo/2/\", anchors.get(1).baseUri()); [EOL]     assertEquals(\"http://bar\", anchors.get(2).baseUri()); [EOL]     assertEquals(\"http://foo/1\", anchors.get(0).absUrl(\"href\")); [EOL]     assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\")); [EOL]     assertEquals(\"http://bar/4\", anchors.get(2).absUrl(\"href\")); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf(\"span\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\"); [EOL]     String classVal = doc.select(\"p\").attr(\"class\"); [EOL]     assertEquals(\"foo\", classVal); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = \"<p><b>This</b> is <b>jsoup</b></p>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\"b\").wrap(\"<i></i>\"); [EOL]     assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html()); [EOL] }
@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\"); [EOL]     Elements els = doc.select(\"textarea\"); [EOL]     assertEquals(\"Hello\", els.text()); [EOL]     assertEquals(\"Hello\", els.val()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void normalisesEmptyDocument() { [EOL]     Document doc = Jsoup.parse(\"\"); [EOL]     assertEquals(\"<html><head></head><body></body></html>\", TextUtil.stripNewlines(doc.html())); [EOL] }
@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\"); [EOL]     assertEquals(\"<p>Hello</p>\", doc.getElementsByTag(\"div\").get(0).html()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\"); [EOL]     String classVal = doc.select(\"p\").attr(\"class\"); [EOL]     assertEquals(\"foo\", classVal); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = \"<div id=1/><div id=2><img /></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById(\"1\"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag(\"div\"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals(\"div1\", divs.get(0).id()); [EOL]     assertEquals(\"div2\", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag(\"p\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"Hello\", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals(\"Another \", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag(\"P\"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag(\"img\"); [EOL]     assertEquals(\"foo.png\", imgs.get(0).attr(\"src\")); [EOL]     List<Element> empty = doc.getElementsByTag(\"wtf\"); [EOL]     assertEquals(0, empty.size()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\"); [EOL]     assertEquals(\"<html><head></head><body><div title=\\"Tags &amp;c.\\"><img src=\\"foo.png\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void testGetElementById() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     Element div = doc.getElementById(\"div1\"); [EOL]     assertEquals(\"div1\", div.id()); [EOL]     assertNull(doc.getElementById(\"none\")); [EOL]     Document doc2 = Jsoup.parse(\"<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>\"); [EOL]     Element div2 = doc2.getElementById(\"2\"); [EOL]     assertEquals(\"div\", div2.tagName()); [EOL]     Element span = div2.child(0).getElementById(\"2\"); [EOL]     assertEquals(\"span\", span.tagName()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\"two three\", p.text()); [EOL]     assertEquals(\"<span>two</span> three\", p.html()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\"); [EOL]     String classVal = doc.select(\"p\").attr(\"class\"); [EOL]     assertEquals(\"foo\", classVal); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<p>Hello</p>\n<p>There</p>\", divs.html()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\"; [EOL]     Document doc = Jsoup.parse(h, \"http://foo/\"); [EOL]     assertEquals(\"http://bar\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\"a\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\"http://foo/\", anchors.get(0).baseUri()); [EOL]     assertEquals(\"http://foo/2/\", anchors.get(1).baseUri()); [EOL]     assertEquals(\"http://bar\", anchors.get(2).baseUri()); [EOL]     assertEquals(\"http://foo/1\", anchors.get(0).absUrl(\"href\")); [EOL]     assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\")); [EOL]     assertEquals(\"http://bar/4\", anchors.get(2).absUrl(\"href\")); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void setTextPreservesDocumentStructure() { [EOL]     Document doc = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     doc.text(\"Replaced\"); [EOL]     assertEquals(\"Replaced\", doc.text()); [EOL]     assertEquals(\"Replaced\", doc.body().text()); [EOL]     assertEquals(1, doc.select(\"head\").size()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.prependText(\"there & now > \"); [EOL]     assertEquals(\"there & now > Hello\", div.text()); [EOL]     assertEquals(\"there &amp; now &gt; <p>Hello</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\"); [EOL]     assertEquals(\"<p>Hello</p>\", doc.getElementsByTag(\"div\").get(0).html()); [EOL] }
@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(ps.hasAttr(\"class\")); [EOL]     assertFalse(ps.hasAttr(\"style\")); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\"); [EOL]     Elements els = doc.select(\"textarea\"); [EOL]     assertEquals(\"Hello\", els.text()); [EOL]     assertEquals(\"Hello\", els.val()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesCdata() { [EOL]     String h = \"<div id=1><![CData[<html>\n<foo><&amp;]]></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     assertEquals(\"<html> <foo><&amp;\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.appendText(\" there & now >\"); [EOL]     assertEquals(\"<p>Hello</p> there &amp; now &gt;\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(ps.hasAttr(\"class\")); [EOL]     assertFalse(ps.hasAttr(\"style\")); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void filter() { [EOL]     String h = \"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\".headline\").select(\"p\"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals(\"Hello\", els.get(0).text()); [EOL]     assertEquals(\"There\", els.get(1).text()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\"); [EOL]     String classVal = doc.select(\"p\").attr(\"class\"); [EOL]     assertEquals(\"foo\", classVal); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testSupportsLeadingCombinator() { [EOL]     String h = \"<div><p><span>One</span><span>Two</span></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element p = doc.select(\"div > p\").first(); [EOL]     Elements spans = p.select(\"> span\"); [EOL]     assertEquals(2, spans.size()); [EOL]     assertEquals(\"One\", spans.first().text()); [EOL]     h = \"<div id=1><div id=2><div id=3></div></div></div>\"; [EOL]     doc = Jsoup.parse(h); [EOL]     Element div = doc.select(\"div\").select(\" > div\").first(); [EOL]     assertEquals(\"2\", div.id()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.prependText(\"there & now > \"); [EOL]     assertEquals(\"there & now > Hello\", div.text()); [EOL]     assertEquals(\"there &amp; now &gt; <p>Hello</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void emptyOnNoKey() { [EOL]     String html = \"<a =empty />\"; [EOL]     Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0); [EOL]     Attributes attr = el.attributes(); [EOL]     assertEquals(0, attr.size()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\"a\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\"relHref\", \"/foo\"); [EOL]     attribs.put(\"absHref\", \"http://bar/qux\"); [EOL]     Element noBase = new Element(tag, \"\", attribs); [EOL]     assertEquals(\"\", noBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); [EOL]     Element withBase = new Element(tag, \"http://foo/\", attribs); [EOL]     assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", withBase.absUrl(\"noval\")); [EOL]     Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs); [EOL]     assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\"; [EOL]     Document doc = Jsoup.parse(h, \"http://foo/\"); [EOL]     assertEquals(\"http://bar\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\"a\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\"http://foo/\", anchors.get(0).baseUri()); [EOL]     assertEquals(\"http://foo/2/\", anchors.get(1).baseUri()); [EOL]     assertEquals(\"http://bar\", anchors.get(2).baseUri()); [EOL]     assertEquals(\"http://foo/1\", anchors.get(0).absUrl(\"href\")); [EOL]     assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\")); [EOL]     assertEquals(\"http://bar/4\", anchors.get(2).absUrl(\"href\")); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\"two three\", p.text()); [EOL]     assertEquals(\"<span>two</span> three\", p.html()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = \"<div id=1/><div id=2><img /></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById(\"1\"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\"a\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\"relHref\", \"/foo\"); [EOL]     attribs.put(\"absHref\", \"http://bar/qux\"); [EOL]     Element noBase = new Element(tag, \"\", attribs); [EOL]     assertEquals(\"\", noBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); [EOL]     Element withBase = new Element(tag, \"http://foo/\", attribs); [EOL]     assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", withBase.absUrl(\"noval\")); [EOL]     Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs); [EOL]     assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.appendText(\" there & now >\"); [EOL]     assertEquals(\"<p>Hello</p> there &amp; now &gt;\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<p>Hello</p>\n<p>There</p>\", divs.html()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void setTextPreservesDocumentStructure() { [EOL]     Document doc = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     doc.text(\"Replaced\"); [EOL]     assertEquals(\"Replaced\", doc.text()); [EOL]     assertEquals(\"Replaced\", doc.body().text()); [EOL]     assertEquals(1, doc.select(\"head\").size()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = \"foo <b>bar</b> baz\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals(\"foo bar baz\", doc.text()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf(\"img\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void parsesRoughAttributes() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p class=\\"foo > bar\\">First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     assertEquals(\"foo > bar\", p.attr(\"class\")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<p>Hello</p>\n<p>There</p>\", divs.html()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGetText() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     assertEquals(\"Hello Another element\", doc.text()); [EOL]     assertEquals(\"Another element\", doc.getElementsByTag(\"p\").get(1).text()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\"class\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\"mellow yellow\", span.className()); [EOL]     assertTrue(span.hasClass(\"mellow\")); [EOL]     assertTrue(span.hasClass(\"yellow\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\"mellow\")); [EOL]     assertTrue(classes.contains(\"yellow\")); [EOL]     assertEquals(\"\", doc.className()); [EOL]     assertFalse(doc.hasClass(\"mellow\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesCdata() { [EOL]     String h = \"<div id=1><![CData[<html>\n<foo><&amp;]]></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     assertEquals(\"<html> <foo><&amp;\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \"<p id=\\"foo\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\"foo\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\"p\", p.tagName()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\"class\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\"mellow yellow\", span.className()); [EOL]     assertTrue(span.hasClass(\"mellow\")); [EOL]     assertTrue(span.hasClass(\"yellow\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\"mellow\")); [EOL]     assertTrue(classes.contains(\"yellow\")); [EOL]     assertEquals(\"\", doc.className()); [EOL]     assertFalse(doc.hasClass(\"mellow\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(ps.hasAttr(\"class\")); [EOL]     assertFalse(ps.hasAttr(\"style\")); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\"); [EOL]     assertEquals(\"<html><head></head><body><div title=\\"Tags &amp;c.\\"><img src=\\"foo.png\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\"class\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\"mellow yellow\", span.className()); [EOL]     assertTrue(span.hasClass(\"mellow\")); [EOL]     assertTrue(span.hasClass(\"yellow\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\"mellow\")); [EOL]     assertTrue(classes.contains(\"yellow\")); [EOL]     assertEquals(\"\", doc.className()); [EOL]     assertFalse(doc.hasClass(\"mellow\")); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\"two three\", p.text()); [EOL]     assertEquals(\"<span>two</span> three\", p.html()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.prependText(\"there & now > \"); [EOL]     assertEquals(\"there & now > Hello\", div.text()); [EOL]     assertEquals(\"there &amp; now &gt; <p>Hello</p>\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void filter() { [EOL]     String h = \"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\".headline\").select(\"p\"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals(\"Hello\", els.get(0).text()); [EOL]     assertEquals(\"There\", els.get(1).text()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; [EOL]     String nok1 = \"<p><script></script>Not <b>OK</b></p>\"; [EOL]     String nok2 = \"<p align=right>Test Not <b>OK</b></p>\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void eq() { [EOL]     String h = \"<p>Hello<p>there<p>world\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"there\", doc.select(\"p\").eq(1).text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<p>Hello</p>\n<p>There</p>\", divs.html()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\"); [EOL]     Elements divs = doc.select(\"div\"); [EOL]     assertEquals(\"<p>Hello</p>\n<p>There</p>\", divs.html()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\"Hello there now\", doc.text()); [EOL]     assertEquals(\"there now\", doc.select(\"p\").get(0).text()); [EOL]     Element div = doc.getElementById(\"1\").text(\"Gone\"); [EOL]     assertEquals(\"Gone\", div.text()); [EOL]     assertEquals(0, doc.select(\"p\").size()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = \"<p><b>This</b> is <b>jsoup</b></p>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\"b\").wrap(\"<i></i>\"); [EOL]     assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\"); [EOL]     Element p = doc.getElementById(\"1\"); [EOL]     assertEquals(\"there\", p.text()); [EOL]     assertEquals(\"Hello\", p.previousElementSibling().text()); [EOL]     assertEquals(\"this\", p.nextElementSibling().text()); [EOL]     assertEquals(\"Hello\", p.firstElementSibling().text()); [EOL]     assertEquals(\"element\", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\"); [EOL]     assertEquals(\"<p>Hello</p>\", doc.getElementsByTag(\"div\").get(0).html()); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\"two three\", p.text()); [EOL]     assertEquals(\"<span>two</span> three\", p.html()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\"); [EOL]     Elements ps = doc.select(\"div p:eq(0)\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\"One\", ps.get(0).text()); [EOL]     assertEquals(\"Four\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\"One\", ps2.get(0).text()); [EOL]     assertEquals(\"p\", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\"); [EOL]     Element div = doc.select(\"div\").first(); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }
@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\"p\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\"foo.png\", img.attr(\"src\")); [EOL]     assertEquals(\"img\", img.tagName()); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\"class\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\"mellow yellow\", span.className()); [EOL]     assertTrue(span.hasClass(\"mellow\")); [EOL]     assertTrue(span.hasClass(\"yellow\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\"mellow\")); [EOL]     assertTrue(classes.contains(\"yellow\")); [EOL]     assertEquals(\"\", doc.className()); [EOL]     assertFalse(doc.hasClass(\"mellow\")); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\"<p>Hello</p>\"); [EOL]     Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\"); [EOL]     assertEquals(\"\", noTitle.title()); [EOL]     noTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", noTitle.title()); [EOL]     assertEquals(\"Hello\", noTitle.select(\"title\").first().text()); [EOL]     assertEquals(\"First\", withTitle.title()); [EOL]     withTitle.title(\"Hello\"); [EOL]     assertEquals(\"Hello\", withTitle.title()); [EOL]     assertEquals(\"Hello\", withTitle.select(\"title\").first().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\"/htmltests/news-com-au-home.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.news.com.au/\"); [EOL]     assertEquals(\"News.com.au | News from Australia and around the world online | NewsComAu\", doc.title()); [EOL]     assertEquals(\"Brace yourself for Metro meltdown\", doc.select(\".id1225817868581 h4\").text().trim()); [EOL]     Element a = doc.select(\"a[href=/entertainment/horoscopes]\").first(); [EOL]     assertEquals(\"/entertainment/horoscopes\", a.attr(\"href\")); [EOL]     assertEquals(\"http://www.news.com.au/entertainment/horoscopes\", a.attr(\"abs:href\")); [EOL]     Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first(); [EOL]     assertEquals(\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\", hs.attr(\"href\")); [EOL]     assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\"/htmltests/thumb.jpg\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\"); [EOL]     assertTrue(doc.text().contains(\"gd-jpeg\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\"two three\", p.text()); [EOL]     assertEquals(\"<span>two</span> three\", p.html()); [EOL] }
@Test [EOL] public void mixCombinatorGroup() { [EOL]     String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\".foo > ol, ol > li + li\"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals(\"ol\", els.get(0).tagName()); [EOL]     assertEquals(\"Two\", els.get(1).text()); [EOL]     assertEquals(\"Three\", els.get(2).text()); [EOL] }
@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\"class\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\"mellow yellow\", span.className()); [EOL]     assertTrue(span.hasClass(\"mellow\")); [EOL]     assertTrue(span.hasClass(\"yellow\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\"mellow\")); [EOL]     assertTrue(classes.contains(\"yellow\")); [EOL]     assertEquals(\"\", doc.className()); [EOL]     assertFalse(doc.hasClass(\"mellow\")); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\"); [EOL]     Element div = doc.getElementById(\"1\"); [EOL]     div.appendText(\" there & now >\"); [EOL]     assertEquals(\"<p>Hello</p> there &amp; now &gt;\", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void generalSiblings() { [EOL]     String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\"#1 ~ #3\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\"Three\", els.first().text()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\"<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \"<img alt=\\"\\" src= unknown=''>\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\"<img alt=\\"\\" />\", cleanHtml); [EOL] }
@Test [EOL] public void testElementSiblingIndex() { [EOL]     Document doc = Jsoup.parse(\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     assertTrue(0 == ps.get(0).elementSiblingIndex()); [EOL]     assertTrue(1 == ps.get(1).elementSiblingIndex()); [EOL]     assertTrue(2 == ps.get(2).elementSiblingIndex()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile(\"/htmltests/smh-biz-article-1.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\"); [EOL]     assertEquals(\"The board鈥檚 next fear: the female quota\", doc.title()); [EOL]     assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\")); [EOL]     Elements articleBody = doc.select(\".articleBody > *\"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\"p[title]\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\"title\")); [EOL]     assertFalse(withTitle.hasAttr(\"class\")); [EOL]     assertEquals(\"foo\", withTitle.attr(\"title\")); [EOL]     withTitle.removeAttr(\"title\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\"p[title]\").size()); [EOL]     Elements ps = doc.select(\"p\").attr(\"style\", \"classy\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\"classy\", ps.last().attr(\"style\")); [EOL]     assertEquals(\"bar\", ps.last().attr(\"class\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\"a\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\"relHref\", \"/foo\"); [EOL]     attribs.put(\"absHref\", \"http://bar/qux\"); [EOL]     Element noBase = new Element(tag, \"\", attribs); [EOL]     assertEquals(\"\", noBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); [EOL]     Element withBase = new Element(tag, \"http://foo/\", attribs); [EOL]     assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); [EOL]     assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", withBase.absUrl(\"noval\")); [EOL]     Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs); [EOL]     assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); [EOL]     assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\"div\"); [EOL]     Tag p = Tag.valueOf(\"p\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \"<style>font-family: bold</style>\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\"); [EOL]     assertEquals(\"font-family: bold\", tels.get(0).data()); [EOL]     assertEquals(\"\", tels.get(0).text()); [EOL]     String s = \"<p>Hello</p><script>Nope</script><p>There</p>\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\"Hello There\", doc.text()); [EOL]     assertEquals(\"Nope\", doc.data()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\"); [EOL]     assertEquals(\"<html><head></head><body><div title=\\"Tags &amp;c.\\"><img src=\\"foo.png\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }