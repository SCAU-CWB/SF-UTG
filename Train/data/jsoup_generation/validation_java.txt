@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     Element insert = doc.createElement(\"em\").text(\"foo\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\"One <em>foo</em> three\", p.html()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\"foo\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\"bar\", foos.first().attr(\"title\")); [EOL]     assertEquals(\"qux\", foos.last().attr(\"title\")); [EOL]     assertEquals(\"there\", foos.last().text()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\"); [EOL]     Element p = doc.select(\"p\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\"two three\", p.text()); [EOL]     assertEquals(\"<span>two</span> three\", p.html()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\"/htmltests/google-ipod.html\"); [EOL]     Document doc = Jsoup.parse(in, \"UTF-8\", \"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\"); [EOL]     assertEquals(\"ipod - Google Search\", doc.title()); [EOL]     Elements results = doc.select(\"h3.r > a\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\", results.get(0).attr(\"href\")); [EOL]     assertEquals(\"http://www.apple.com/itunes/\", results.get(1).attr(\"href\")); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \"<p>Hello<!-- <tr><td>\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\"p\").get(0); [EOL]     assertEquals(\"Hello\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\"Hello\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\" <tr><td>\", comment.getData()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\"div.foo\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\"div\", div.first().tagName()); [EOL]     Elements p = doc.select(\"div .foo\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\"p\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\"div\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\"div *.foo\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\"p\", p2.first().tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"http://jsoup.org/\"); [EOL]     Element a = doc.select(\"a\").first(); [EOL]     assertEquals(\"/foo\", a.attr(\"href\")); [EOL]     assertEquals(\"http://jsoup.org/foo\", a.attr(\"abs:href\")); [EOL]     assertFalse(a.hasAttr(\"abs:href\")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\"); [EOL]     Elements els = doc.select(\"p\"); [EOL]     assertTrue(els.hasClass(\"red\")); [EOL]     assertFalse(els.hasClass(\"blue\")); [EOL]     els.addClass(\"blue\"); [EOL]     els.removeClass(\"yellow\"); [EOL]     els.toggleClass(\"mellow\"); [EOL]     assertEquals(\"blue\", els.get(0).className()); [EOL]     assertEquals(\"red green blue mellow\", els.get(1).className()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\"div > *\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\"p\", divChilds.get(0).tagName()); [EOL]     assertEquals(\"p\", divChilds.get(1).tagName()); [EOL]     assertEquals(\"span\", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\"; [EOL]     Document doc = Jsoup.parse(h, \"http://foo/\"); [EOL]     assertEquals(\"http://bar\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\"a\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\"http://foo/\", anchors.get(0).baseUri()); [EOL]     assertEquals(\"http://foo/2/\", anchors.get(1).baseUri()); [EOL]     assertEquals(\"http://bar\", anchors.get(2).baseUri()); [EOL]     assertEquals(\"http://foo/1\", anchors.get(0).absUrl(\"href\")); [EOL]     assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\")); [EOL]     assertEquals(\"http://bar/4\", anchors.get(2).absUrl(\"href\")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\"); [EOL]     Elements ps = doc.select(\"p\"); [EOL]     ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\"); [EOL]     assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\"<span>Gone</span>\"); [EOL]     assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }