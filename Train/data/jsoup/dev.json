{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] children.add(c); [LINE] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.parent() != null && c.parent().equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] if (this == o) return true; [LINE] @Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     return false; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return false; [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] attributes.put(attribute); [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] return allElements(); [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\\\"two three\\\", p.text()); [EOL]     assertEquals(\\\"<span>two</span> three\\\", p.html()); [EOL] }", "nl": "[LINE] int index = indexInList(out, childNodes); [LINE] protected void removeChild(Node out) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     int index = indexInList(out, childNodes); [EOL]     childNodes.remove(index); [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] for (Element p : parents) { [LINE] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.parent() != null && c.parent().equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] seen = true; [LINE] public boolean consumeWhitespace() { [EOL]     boolean seen = false; [EOL]     while (!queue.isEmpty() && Character.isWhitespace(queue.peek())) { [EOL]         consume(); [EOL]         seen = true; [EOL]     } [EOL]     return seen; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return false; [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] tq.consume(\\\"<!--\\\"); [LINE] private void parseComment() { [EOL]     tq.consume(\\\"<!--\\\"); [EOL]     String data = tq.chompTo(\\\"->\\\"); [EOL]     if (data.endsWith(\\\"-\\\")) [EOL]         data = data.substring(0, data.length() - 1); [EOL]     Comment comment = new Comment(data, baseUri); [EOL]     last().appendChild(comment); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] Elements byId = new Elements(); [LINE] private Elements byId() { [EOL]     String id = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(id); [EOL]     Element found = root.getElementById(id); [EOL]     Elements byId = new Elements(); [EOL]     if (found != null) [EOL]         byId.add(found); [EOL]     return byId; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return Selector.select(query, this); [LINE] public Elements select(String query) { [EOL]     return Selector.select(query, this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return attributes.get(attributeKey); [LINE] public String attr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     if (hasAttr(attributeKey)) [EOL]         return attributes.get(attributeKey); [EOL]     else if (attributeKey.toLowerCase().startsWith(\\\"abs:\\\")) [EOL]         return absUrl(attributeKey.substring(\\\"abs:\\\".length())); [EOL]     else [EOL]         return \\\"\\\"; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public Elements removeClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.removeClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] child.setParentNode(this); [LINE] public Element prependChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(0, child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element appendChild(Node child) { [LINE] public Element appendChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] } else if (tq.matchChomp(\\\"*\\\")) { [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \\\"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\\\"; [EOL]     Document doc = Jsoup.parse(h, \\\"http://foo/\\\"); [EOL]     assertEquals(\\\"http://bar\\\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\\\"a\\\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\\\"http://foo/\\\", anchors.get(0).baseUri()); [EOL]     assertEquals(\\\"http://foo/2/\\\", anchors.get(1).baseUri()); [EOL]     assertEquals(\\\"http://bar\\\", anchors.get(2).baseUri()); [EOL]     assertEquals(\\\"http://foo/1\\\", anchors.get(0).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://foo/2/3\\\", anchors.get(1).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://bar/4\\\", anchors.get(2).absUrl(\\\"href\\\")); [EOL] }", "nl": "[LINE] this.baseUri = baseUri; [LINE] public void setBaseUri(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     this.baseUri = baseUri; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] empty(); [LINE] public Element html(String html) { [EOL]     empty(); [EOL]     append(html); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
