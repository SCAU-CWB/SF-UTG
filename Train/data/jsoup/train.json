{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] return Parser.parseBodyFragment(bodyHtml, baseUri); [LINE] public static Document parseBodyFragment(String bodyHtml, String baseUri) { [EOL]     return Parser.parseBodyFragment(bodyHtml, baseUri); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\\\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\\\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\\\"class\\\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\\\"mellow yellow\\\", span.className()); [EOL]     assertTrue(span.hasClass(\\\"mellow\\\")); [EOL]     assertTrue(span.hasClass(\\\"yellow\\\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\\\"mellow\\\")); [EOL]     assertTrue(classes.contains(\\\"yellow\\\")); [EOL]     assertEquals(\\\"\\\", doc.className()); [EOL]     assertFalse(doc.hasClass(\\\"mellow\\\")); [EOL] }", "nl": "[LINE] Validate.notEmpty(key); [LINE] public Elements getElementsByAttribute(String key) { [EOL]     Validate.notEmpty(key); [EOL]     key = key.trim().toLowerCase(); [EOL]     return Collector.collect(new Evaluator.Attribute(key), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.html(\\\"<p>there</p><p>now</p>\\\"); [EOL]     assertEquals(\\\"<p>there</p><p>now</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] public Element getElementById(String id) { [LINE] public Element getElementById(String id) { [EOL]     Validate.notEmpty(id); [EOL]     Elements elements = Collector.collect(new Evaluator.Id(id), this); [EOL]     if (elements.size() > 0) [EOL]         return elements.get(0); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] tagName = tagName.toLowerCase().trim(); [LINE] public Elements getElementsByTag(String tagName) { [EOL]     Validate.notEmpty(tagName); [EOL]     tagName = tagName.toLowerCase().trim(); [EOL]     return Collector.collect(new Evaluator.Tag(tagName), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] public Element nextElementSibling() { [LINE] public Element nextElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     Integer index = indexInList(this, siblings); [EOL]     Validate.notNull(index); [EOL]     if (siblings.size() > index + 1) [EOL]         return siblings.get(index + 1); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] this.value = value; [LINE] public Attribute(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notNull(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] for (int i = 0; i < nodes.size(); i++) { [LINE] protected static <N extends Node> Integer indexInList(N search, List<N> nodes) { [EOL]     Validate.notNull(search); [EOL]     Validate.notNull(nodes); [EOL]     for (int i = 0; i < nodes.size(); i++) { [EOL]         N node = nodes.get(i); [EOL]         if (node.equals(search)) [EOL]             return i; [EOL]     } [EOL]     return null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] if (el.hasText()) [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] Comment comment = new Comment(data, baseUri); [LINE] private void parseComment() { [EOL]     tq.consume(\\\"<!--\\\"); [EOL]     String data = tq.chompTo(\\\"->\\\"); [EOL]     if (data.endsWith(\\\"-\\\")) [EOL]         data = data.substring(0, data.length() - 1); [EOL]     Comment comment = new Comment(data, baseUri); [EOL]     last().appendChild(comment); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return (element.tagName().equals(tagName)); [LINE] public boolean matches(Element element) { [EOL]     return (element.tagName().equals(tagName)); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] return indexInList(this, parent().childNodes); [LINE] public Integer siblingIndex() { [EOL]     return indexInList(this, parent().childNodes); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testWrap() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p>There</p></div>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     p.wrap(\\\"<div class='head'></div>\\\"); [EOL]     assertEquals(\\\"<div><div class=\\\\\"head\\\\\"><p>Hello</p></div><p>There</p></div>\\\", TextUtil.stripNewlines(doc.body().html())); [EOL]     Element ret = p.wrap(\\\"<div><div class=foo></div><p>What?</p></div>\\\"); [EOL]     assertEquals(\\\"<div><div class=\\\\\"head\\\\\"><div><div class=\\\\\"foo\\\\\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>\\\", TextUtil.stripNewlines(doc.body().html())); [EOL]     assertEquals(ret, p); [EOL] }", "nl": "[LINE] return getDeepChild(children.get(0)); [LINE] private Element getDeepChild(Element el) { [EOL]     List<Element> children = el.children(); [EOL]     if (children.size() > 0) [EOL]         return getDeepChild(children.get(0)); [EOL]     else [EOL]         return el; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] consume(seq); [LINE] public boolean matchChomp(String seq) { [EOL]     if (matches(seq)) { [EOL]         consume(seq); [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return this; [LINE] public Element toggleClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     if (classes.contains(className)) [EOL]         classes.remove(className); [EOL]     else [EOL]         classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return this; [LINE] public Elements append(String html) { [EOL]     for (Element element : contents) { [EOL]         element.append(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] int read; [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] if (sb.length() == 0) [LINE] static boolean lastCharIsWhitespace(StringBuilder sb) { [EOL]     if (sb.length() == 0) [EOL]         return false; [EOL]     String lastChar = sb.substring(sb.length() - 1, sb.length()); [EOL]     Validate.isTrue(lastChar.length() == 1); [EOL]     return lastChar.equals(\\\" \\\"); [EOL] } public TextNode(String text, String baseUri); public String nodeName(); public String text(); public TextNode text(String text); public String getWholeText(); public boolean isBlank();  void outerHtml(StringBuilder accum); public String toString(); public static TextNode createFromEncoded(String encodedText, String baseUri);  static String normaliseWhitespace(String text);  static String stripLeadingWhitespace(String text);  static boolean lastCharIsWhitespace(StringBuilder sb); String TEXT_KEY=Optional[\\\"text\\\"]"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element prependChild(Node child) { [LINE] public Element prependChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(0, child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] Validate.notNull(roots); [LINE] public static Elements select(String query, Iterable<Element> roots) { [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(roots); [EOL]     LinkedHashSet<Element> elements = new LinkedHashSet<Element>(); [EOL]     for (Element root : roots) { [EOL]         elements.addAll(select(query, root)); [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] tq.consumeWhitespace(); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void wrap() { [EOL]     String h = \\\"<p><b>This</b> is <b>jsoup</b></p>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\\\"b\\\").wrap(\\\"<i></i>\\\"); [EOL]     assertEquals(\\\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\\\", doc.body().html()); [EOL] }", "nl": "[LINE] Validate.notEmpty(html); [LINE] public Elements wrap(String html) { [EOL]     Validate.notEmpty(html); [EOL]     for (Element element : contents) { [EOL]         element.wrap(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\\\"); [EOL]     assertEquals(\\\"<html><head></head><body><div title=\\\\\"Tags &amp;c.\\\\\"><img src=\\\\\"foo.png\\\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\\\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }", "nl": "[LINE] accum.append(String.format(\\\"<!--%s-->\\\", getData())); [LINE] void outerHtml(StringBuilder accum) { [EOL]     indent(accum); [EOL]     accum.append(String.format(\\\"<!--%s-->\\\", getData())); [EOL] } public Comment(String data, String baseUri); public String nodeName(); public String getData();  void outerHtml(StringBuilder accum); public String toString(); String COMMENT_KEY=Optional[\\\"comment\\\"]"}
{"code": "@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\\\"<textarea>Hello</textarea>\\\"); [EOL]     Elements els = doc.select(\\\"textarea\\\"); [EOL]     assertEquals(\\\"Hello\\\", els.text()); [EOL]     assertEquals(\\\"Hello\\\", els.val()); [EOL] }", "nl": "[LINE] if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?) [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] private Elements byClass() { [LINE] private Elements byClass() { [EOL]     String className = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(className); [EOL]     return root.getElementsByClass(className); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] CHILD: for (Element c : candidates) { [LINE] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.parent() != null && c.parent().equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] elements.addAll(add); [LINE] private void addElements(Collection<Element> add) { [EOL]     elements.addAll(add); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] contents = elements; [LINE] public Elements(List<Element> elements) { [EOL]     contents = elements; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] return accum.toString(); [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     for (Attribute attribute : this) { [EOL]         accum.append(\\\" \\\"); [EOL]         accum.append(attribute.html()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] continue CHILD; [LINE] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] boolean preserveWhitespace() { [LINE] boolean preserveWhitespace() { [EOL]     return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] StringBuilder accum = new StringBuilder(); [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     for (Attribute attribute : this) { [EOL]         accum.append(\\\" \\\"); [EOL]         accum.append(attribute.html()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] public String baseUri() { [LINE] public String baseUri() { [EOL]     return baseUri; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] element.attr(attributeKey, attributeValue); [LINE] public Elements attr(String attributeKey, String attributeValue) { [EOL]     for (Element element : contents) { [EOL]         element.attr(attributeKey, attributeValue); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] public Attribute(String key, String value) { [LINE] public Attribute(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notNull(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void testElementSiblingIndex() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(0 == ps.get(0).elementSiblingIndex()); [EOL]     assertTrue(1 == ps.get(1).elementSiblingIndex()); [EOL]     assertTrue(2 == ps.get(2).elementSiblingIndex()); [EOL] }", "nl": "[LINE] public Integer elementSiblingIndex() { [LINE] public Integer elementSiblingIndex() { [EOL]     if (parent() == null) [EOL]         return 0; [EOL]     return indexInList(this, parent().children()); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] List<Attribute> list = new ArrayList<Attribute>(attributes.size()); [LINE] public List<Attribute> asList() { [EOL]     List<Attribute> list = new ArrayList<Attribute>(attributes.size()); [EOL]     for (Map.Entry<String, Attribute> entry : attributes.entrySet()) { [EOL]         list.add(entry.getValue()); [EOL]     } [EOL]     return Collections.unmodifiableList(list); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] sb.append(data.getWholeData()); [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return this; [LINE] public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] Validate.notEmpty(key); [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] return key; [LINE] public String getKey() { [EOL]     return key; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return !queue.isEmpty() && Character.isLetterOrDigit(queue.peek()); [LINE] public boolean matchesWord() { [EOL]     return !queue.isEmpty() && Character.isLetterOrDigit(queue.peek()); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] node.parentNode = null; [LINE] public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] AttributeWithValueContaining(String key, String value) { [LINE] AttributeWithValueContaining(String key, String value) { [EOL]     super(key, value); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] tq.consume(\\\"<\\\"); [LINE] private void parseXmlDecl() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     Character firstChar = tq.consume(); [EOL]     boolean procInstr = firstChar.toString().equals(\\\"!\\\"); [EOL]     String data = tq.chompTo(\\\">\\\"); [EOL]     XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr); [EOL]     last().appendChild(decl); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] boolean found = false; [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] childNodes.set(index, in); [LINE] protected void replaceChild(Node out, Node in) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     Validate.notNull(in); [EOL]     if (in.parentNode != null) [EOL]         in.parentNode.removeChild(in); [EOL]     Integer index = indexInList(out, childNodes); [EOL]     childNodes.set(index, in); [EOL]     in.parentNode = this; [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return this; [LINE] public Element prependChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(0, child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] public boolean hasAttr(String attributeKey) { [LINE] public boolean hasAttr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     return attributes.hasKey(attributeKey); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] attributes.put(COMMENT_KEY, data); [LINE] public Comment(String data, String baseUri) { [EOL]     super(baseUri); [EOL]     attributes.put(COMMENT_KEY, data); [EOL] } public Comment(String data, String baseUri); public String nodeName(); public String getData();  void outerHtml(StringBuilder accum); public String toString(); String COMMENT_KEY=Optional[\\\"comment\\\"]"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] appendChild(textNode); [LINE] public Element text(String text) { [EOL]     Validate.notNull(text); [EOL]     empty(); [EOL]     TextNode textNode = new TextNode(text, baseUri); [EOL]     appendChild(textNode); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void caseInsensitive() { [EOL]     String h = \\\"<dIv tItle=bAr><div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(2, doc.select(\\\"DIV\\\").size()); [EOL]     assertEquals(1, doc.select(\\\"DIV[TITLE]\\\").size()); [EOL]     assertEquals(1, doc.select(\\\"DIV[TITLE=BAR]\\\").size()); [EOL]     assertEquals(0, doc.select(\\\"DIV[TITLE=BARBARELLA\\\").size()); [EOL] }", "nl": "[LINE] return root.getElementsByAttribute(key); [LINE] private Elements byAttribute() { [EOL]     String key = tq.consumeToAny(\\\"=\\\", \\\"!=\\\", \\\"^=\\\", \\\"$=\\\", \\\"*=\\\", \\\"]\\\"); [EOL]     Validate.notEmpty(key); [EOL]     if (tq.matchChomp(\\\"]\\\")) { [EOL]         return root.getElementsByAttribute(key); [EOL]     } else { [EOL]         if (tq.matchChomp(\\\"=\\\")) [EOL]             return root.getElementsByAttributeValue(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"!=\\\")) [EOL]             return root.getElementsByAttributeValueNot(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"^=\\\")) [EOL]             return root.getElementsByAttributeValueStarting(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"$=\\\")) [EOL]             return root.getElementsByAttributeValueEnding(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"*=\\\")) [EOL]             return root.getElementsByAttributeValueContaining(key, tq.chompTo(\\\"]\\\")); [EOL]         else [EOL]             throw new SelectorParseException(\\\"Could not parse attribute query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] IndexEquals(int index) { [LINE] IndexEquals(int index) { [EOL]     super(index); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] classes.remove(className); [LINE] public Element removeClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.remove(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] value = tq.chompTo(DQ); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] int ePos = e.elementSiblingIndex(); [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] char[] chars = data.toCharArray(); [LINE] public TokenQueue(String data) { [EOL]     Validate.notNull(data); [EOL]     queue = new LinkedList<Character>(); [EOL]     char[] chars = data.toCharArray(); [EOL]     for (char c : chars) { [EOL]         queue.add(c); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] if (eval.matches(element)) [LINE] private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element) { [EOL]     if (eval.matches(element)) [EOL]         elements.add(element); [EOL]     for (Element child : element.children()) accumulateMatches(eval, elements, child); [EOL] } public static Elements collect(Evaluator eval, Element root); private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element)"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] element.addClass(className); [LINE] public Elements addClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.addClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void normalisesEmptyDocument() { [EOL]     Document doc = Jsoup.parse(\\\"\\\"); [EOL]     assertEquals(\\\"<html><head></head><body></body></html>\\\", TextUtil.stripNewlines(doc.html())); [EOL] }", "nl": "[LINE] select(\\\"html\\\").first().prependElement(\\\"head\\\"); [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] stack.add(doc.body()); [LINE] private Parser(String html, String baseUri, boolean isBodyFragment) { [EOL]     Validate.notNull(html); [EOL]     Validate.notNull(baseUri); [EOL]     stack = new LinkedList<Element>(); [EOL]     tq = new TokenQueue(html); [EOL]     this.baseUri = baseUri; [EOL]     if (isBodyFragment) { [EOL]         doc = Document.createShell(baseUri); [EOL]         stack.add(doc.body()); [EOL]     } else { [EOL]         doc = new Document(baseUri); [EOL]         stack.add(doc); [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] public boolean matches(Element element) { [LINE] public boolean matches(Element element) { [EOL]     return true; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Validate.notNull(baseUri); [LINE] static public Document createShell(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     Document doc = new Document(baseUri); [EOL]     Element html = doc.appendElement(\\\"html\\\"); [EOL]     html.appendElement(\\\"head\\\"); [EOL]     html.appendElement(\\\"body\\\"); [EOL]     return doc; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] Validate.notEmpty(query); [LINE] public static Elements select(String query, Iterable<Element> roots) { [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(roots); [EOL]     LinkedHashSet<Element> elements = new LinkedHashSet<Element>(); [EOL]     for (Element root : roots) { [EOL]         elements.addAll(select(query, root)); [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] elements.clear(); elements.addAll(output); [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] URL base; [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = \\\"foo <b>bar</b> baz\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals(\\\"foo bar baz\\\", doc.text()); [EOL] }", "nl": "[LINE] body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] AttributeKeyPair(String key, String value) { [LINE] AttributeKeyPair(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value.trim().toLowerCase(); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] node.outerHtml(accum); [LINE] private void html(StringBuilder accum) { [EOL]     for (Node node : childNodes) node.outerHtml(accum); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] String value = StringEscapeUtils.unescapeHtml(encodedValue); [LINE] public static Attribute createFromEncoded(String unencodedKey, String encodedValue) { [EOL]     String value = StringEscapeUtils.unescapeHtml(encodedValue); [EOL]     return new Attribute(unencodedKey, value); [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] Validate.notEmpty(key); [LINE] public Attribute(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notNull(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] text(sb); [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     text(sb); [EOL]     return sb.toString().trim(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] queue.add(c); [LINE] public TokenQueue(String data) { [EOL]     Validate.notNull(data); [EOL]     queue = new LinkedList<Character>(); [EOL]     char[] chars = data.toCharArray(); [EOL]     for (char c : chars) { [EOL]         queue.add(c); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] public static Whitelist basic() { [LINE] public static Whitelist basic() { [EOL]     return new Whitelist().addTags(\\\"a\\\", \\\"b\\\", \\\"blockquote\\\", \\\"br\\\", \\\"cite\\\", \\\"code\\\", \\\"dd\\\", \\\"dl\\\", \\\"dt\\\", \\\"em\\\", \\\"i\\\", \\\"li\\\", \\\"ol\\\", \\\"p\\\", \\\"pre\\\", \\\"q\\\", \\\"small\\\", \\\"strike\\\", \\\"strong\\\", \\\"sub\\\", \\\"sup\\\", \\\"u\\\", \\\"ul\\\").addAttributes(\\\"a\\\", \\\"href\\\").addAttributes(\\\"blockquote\\\", \\\"cite\\\").addAttributes(\\\"q\\\", \\\"cite\\\").addProtocols(\\\"a\\\", \\\"href\\\", \\\"ftp\\\", \\\"http\\\", \\\"https\\\", \\\"mailto\\\").addProtocols(\\\"blockquote\\\", \\\"cite\\\", \\\"http\\\", \\\"https\\\").addProtocols(\\\"cite\\\", \\\"cite\\\", \\\"http\\\", \\\"https\\\").addEnforcedAttribute(\\\"a\\\", \\\"rel\\\", \\\"nofollow\\\"); [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] String data = tq.chompTo(\\\"->\\\"); [LINE] private void parseComment() { [EOL]     tq.consume(\\\"<!--\\\"); [EOL]     String data = tq.chompTo(\\\"->\\\"); [EOL]     if (data.endsWith(\\\"-\\\")) [EOL]         data = data.substring(0, data.length() - 1); [EOL]     Comment comment = new Comment(data, baseUri); [EOL]     last().appendChild(comment); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\\\"<textarea>Hello</textarea>\\\"); [EOL]     Elements els = doc.select(\\\"textarea\\\"); [EOL]     assertEquals(\\\"Hello\\\", els.text()); [EOL]     assertEquals(\\\"Hello\\\", els.val()); [EOL] }", "nl": "[LINE] Node dataNode; [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] Validate.notEmpty(value); [LINE] AttributeKeyPair(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value.trim().toLowerCase(); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] return this; [LINE] private Tag setContainInlineOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] int cPos = c.elementSiblingIndex(); [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] if (c.parent() != null && c.parent().equals(p)) { [LINE] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.parent() != null && c.parent().equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }", "nl": "[LINE] return sb.toString(); [LINE] public String outerHtml() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.outerHtml()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] text = TextNode.stripLeadingWhitespace(text); [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] if (head() == null) [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] return baseUri; [LINE] public String baseUri() { [EOL]     return baseUri; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] Attribute attr = attributes.get(key.toLowerCase()); [LINE] public String get(String key) { [EOL]     Validate.notEmpty(key); [EOL]     Attribute attr = attributes.get(key.toLowerCase()); [EOL]     return attr != null ? attr.getValue() : \\\"\\\"; [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] synchronized (tags) { [LINE] private static Tag register(Tag tag) { [EOL]     tag.setAncestor(defaultAncestor.tagName); [EOL]     synchronized (tags) { [EOL]         tags.put(tag.tagName, tag); [EOL]     } [EOL]     return tag; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] protected int nodeDepth() { [LINE] protected int nodeDepth() { [EOL]     if (parentNode == null) [EOL]         return 0; [EOL]     else [EOL]         return parentNode.nodeDepth() + 1; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.html(\\\"<p>there</p><p>now</p>\\\"); [EOL]     assertEquals(\\\"<p>there</p><p>now</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] return id == null ? \\\"\\\" : id; [LINE] public String id() { [EOL]     String id = attr(\\\"id\\\"); [EOL]     return id == null ? \\\"\\\" : id; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void emptyOnNoKey() { [EOL]     String html = \\\"<a =empty />\\\"; [EOL]     Element el = Jsoup.parse(html).getElementsByTag(\\\"a\\\").get(0); [EOL]     Attributes attr = el.attributes(); [EOL]     assertEquals(0, attr.size()); [EOL] }", "nl": "[LINE] return attributes.size(); [LINE] public int size() { [EOL]     return attributes.size(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [LINE] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] public boolean isValid(Document dirtyDocument) { [LINE] public boolean isValid(Document dirtyDocument) { [EOL]     Validate.notNull(dirtyDocument); [EOL]     Document clean = Document.createShell(dirtyDocument.baseUri()); [EOL]     int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body()); [EOL]     return numDiscarded == 0; [EOL] } public Cleaner(Whitelist whitelist);  ElementMeta(Element el, int numAttribsDiscarded); public Document clean(Document dirtyDocument); public boolean isValid(Document dirtyDocument); private int copySafeNodes(Element source, Element dest); private ElementMeta createSafeElement(Element sourceEl); Whitelist whitelist"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] return true; [LINE] boolean isValidParent(Tag child) { [EOL]     if (child.ancestors.isEmpty()) [EOL]         return true; [EOL]     for (Tag tag : child.ancestors) { [EOL]         if (this.equals(tag)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] TagName tagName = TagName.valueOf(tag); [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\\\"<textarea>Hello</textarea>\\\"); [EOL]     Elements els = doc.select(\\\"textarea\\\"); [EOL]     assertEquals(\\\"Hello\\\", els.text()); [EOL]     assertEquals(\\\"Hello\\\", els.val()); [EOL] }", "nl": "[LINE] child.appendChild(dataNode); [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] inStream.close(); [LINE] static String load(File in, String charsetName) throws IOException { [EOL]     InputStream inStream = new FileInputStream(in); [EOL]     String data = readInputStream(inStream, charsetName); [EOL]     inStream.close(); [EOL]     return data; [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] tq.consumeWhitespace(); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] for (Node child: childNodes) { [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return absUrl(attributeKey.substring(\\\"abs:\\\".length())); [LINE] public String attr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     if (hasAttr(attributeKey)) [EOL]         return attributes.get(attributeKey); [EOL]     else if (attributeKey.toLowerCase().startsWith(\\\"abs:\\\")) [EOL]         return absUrl(attributeKey.substring(\\\"abs:\\\".length())); [EOL]     else [EOL]         return \\\"\\\"; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] sb.append(elementData); [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return child; [LINE] public Element appendElement(String tagName) { [EOL]     Element child = new Element(Tag.valueOf(tagName), baseUri()); [EOL]     appendChild(child); [EOL]     return child; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] public String getKey() { [LINE] public String getKey() { [EOL]     return key; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return false; [LINE] public boolean matchesAny(String... seq) { [EOL]     for (String s : seq) { [EOL]         if (matches(s)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] public Elements getElementsByAttributeValueContaining(String key, String match) { [LINE] public Elements getElementsByAttributeValueContaining(String key, String match) { [EOL]     return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }", "nl": "[LINE] public String outerHtml() { [LINE] public String outerHtml() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.outerHtml()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] if (combinator.equals(\\\">\\\")) [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] public void put(Attribute attribute) { [LINE] public void put(Attribute attribute) { [EOL]     Validate.notNull(attribute); [EOL]     attributes.put(attribute.getKey(), attribute); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [LINE] public Element append(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     for (Node node : fragment.childNodes()) { [EOL]         node.parentNode = null; [EOL]         appendChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] return new Element(Tag.valueOf(tagName), this.baseUri()); [LINE] public Element createElement(String tagName) { [EOL]     return new Element(Tag.valueOf(tagName), this.baseUri()); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] classes.add(className); [LINE] public Element addClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] childNodes.add(0, child); [LINE] public Element prependChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(0, child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] return this; [LINE] private Tag setEmpty() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     empty = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] tags.put(tag.tagName, tag); [LINE] private static Tag register(Tag tag) { [EOL]     tag.setAncestor(defaultAncestor.tagName); [EOL]     synchronized (tags) { [EOL]         tags.put(tag.tagName, tag); [EOL]     } [EOL]     return tag; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] normalise(this); [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] TextNode textNode = new TextNode(text, baseUri); [LINE] public Element text(String text) { [EOL]     Validate.notNull(text); [EOL]     empty(); [EOL]     TextNode textNode = new TextNode(text, baseUri); [EOL]     appendChild(textNode); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] if (body() == null) [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] for (char c : chars) { [LINE] public TokenQueue(String data) { [EOL]     Validate.notNull(data); [EOL]     queue = new LinkedList<Character>(); [EOL]     char[] chars = data.toCharArray(); [EOL]     for (char c : chars) { [EOL]         queue.add(c); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] if (tq.matchChomp(\\\",\\\")) { // group or [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\\\"a\\\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\\\"relHref\\\", \\\"/foo\\\"); [EOL]     attribs.put(\\\"absHref\\\", \\\"http://bar/qux\\\"); [EOL]     Element noBase = new Element(tag, \\\"\\\", attribs); [EOL]     assertEquals(\\\"\\\", noBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", noBase.absUrl(\\\"absHref\\\")); [EOL]     Element withBase = new Element(tag, \\\"http://foo/\\\", attribs); [EOL]     assertEquals(\\\"http://foo/foo\\\", withBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", withBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", withBase.absUrl(\\\"noval\\\")); [EOL]     Element dodgyBase = new Element(tag, \\\"wtf://no-such-protocol/\\\", attribs); [EOL]     assertEquals(\\\"http://bar/qux\\\", dodgyBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", dodgyBase.absUrl(\\\"relHref\\\")); [EOL] }", "nl": "[LINE] return abs.toExternalForm(); [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] Validate.notNull(query); [LINE] private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element(Tag tag, String baseUri, Attributes attributes) { [LINE] public Element(Tag tag, String baseUri, Attributes attributes) { [EOL]     super(baseUri, attributes); [EOL]     Validate.notNull(tag); [EOL]     this.tag = tag; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] String key = tq.consumeAttributeKey(); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] if (child.tagName.equals(\\\"base\\\") || child.tagName.equals(\\\"script\\\") || child.tagName.equals(\\\"noscript\\\") || child.tagName.equals(\\\"link\\\") || [LINE] boolean canContain(Tag child) { [EOL]     Validate.notNull(child); [EOL]     if (child.isBlock && !this.canContainBlock) [EOL]         return false; [EOL]     if (!child.isBlock && !this.canContainInline) [EOL]         return false; [EOL]     if (this.optionalClosing && this.equals(child)) [EOL]         return false; [EOL]     if (this.empty || this.isData()) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"head\\\")) { [EOL]         if (child.tagName.equals(\\\"base\\\") || child.tagName.equals(\\\"script\\\") || child.tagName.equals(\\\"noscript\\\") || child.tagName.equals(\\\"link\\\") || child.tagName.equals(\\\"meta\\\") || child.tagName.equals(\\\"title\\\") || child.tagName.equals(\\\"style\\\") || child.tagName.equals(\\\"object\\\")) { [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (this.tagName.equals(\\\"dt\\\") && child.tagName.equals(\\\"dd\\\")) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"dd\\\") && child.tagName.equals(\\\"dt\\\")) [EOL]         return false; [EOL]     return true; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] classNames(classes); [LINE] public Element addClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesRoughAttributes() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p class=\\\\\"foo > bar\\\\\">First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     assertEquals(\\\"foo > bar\\\", p.attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] public void put(String key, String value) { [LINE] public void put(String key, String value) { [EOL]     Attribute attr = new Attribute(key, value); [EOL]     put(attr); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = \\\"<div id=1/><div id=2><img /></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById(\\\"1\\\"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }", "nl": "[LINE] isEmptyElement = true; [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] preserveWhitespace = true; [LINE] private Tag setPreserveWhitespace() { [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] contents = new ArrayList<Element>(elements); [LINE] public Elements(Collection<Element> elements) { [EOL]     contents = new ArrayList<Element>(elements); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] Validate.notNull(attributeKey); [LINE] public String attr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     if (hasAttr(attributeKey)) [EOL]         return attributes.get(attributeKey); [EOL]     else if (attributeKey.toLowerCase().startsWith(\\\"abs:\\\")) [EOL]         return absUrl(attributeKey.substring(\\\"abs:\\\".length())); [EOL]     else [EOL]         return \\\"\\\"; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] for (Node child : childNodes) { [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.html(\\\"<p>there</p><p>now</p>\\\"); [EOL]     assertEquals(\\\"<p>there</p><p>now</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] public String id() { [LINE] public String id() { [EOL]     String id = attr(\\\"id\\\"); [EOL]     return id == null ? \\\"\\\" : id; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] base = new URL(baseUri); [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return this; [LINE] public Elements html(String html) { [EOL]     for (Element element : contents) { [EOL]         element.html(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] super(baseUri); [LINE] public Comment(String data, String baseUri) { [EOL]     super(baseUri); [EOL]     attributes.put(COMMENT_KEY, data); [EOL] } public Comment(String data, String baseUri); public String nodeName(); public String getData();  void outerHtml(StringBuilder accum); public String toString(); String COMMENT_KEY=Optional[\\\"comment\\\"]"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] continue SIBLING; [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return abs.toExternalForm(); [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] for (int i = 0; i < len; i++) { [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public boolean consumeWhitespace() { [LINE] public boolean consumeWhitespace() { [EOL]     boolean seen = false; [EOL]     while (!queue.isEmpty() && Character.isWhitespace(queue.peek())) { [EOL]         consume(); [EOL]         seen = true; [EOL]     } [EOL]     return seen; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] return this; [LINE] private Tag setPreserveWhitespace() { [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Elements(List<Element> elements) { [LINE] public Elements(List<Element> elements) { [EOL]     contents = elements; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return attributes.hasKey(\\\"class\\\") ? attributes.get(\\\"class\\\") : \\\"\\\"; [LINE] public String className() { [EOL]     return attributes.hasKey(\\\"class\\\") ? attributes.get(\\\"class\\\") : \\\"\\\"; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] static String stripLeadingWhitespace(String text) { [LINE] static String stripLeadingWhitespace(String text) { [EOL]     return text.replaceFirst(\\\"^\\\\s+\\\", \\\"\\\"); [EOL] } public TextNode(String text, String baseUri); public String nodeName(); public String text(); public TextNode text(String text); public String getWholeText(); public boolean isBlank();  void outerHtml(StringBuilder accum); public String toString(); public static TextNode createFromEncoded(String encodedText, String baseUri);  static String normaliseWhitespace(String text);  static String stripLeadingWhitespace(String text);  static boolean lastCharIsWhitespace(StringBuilder sb); String TEXT_KEY=Optional[\\\"text\\\"]"}
{"code": "@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.html(\\\"<p>there</p><p>now</p>\\\"); [EOL]     assertEquals(\\\"<p>there</p><p>now</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] if (elements.size() > 0) [LINE] public Element getElementById(String id) { [EOL]     Validate.notEmpty(id); [EOL]     Elements elements = Collector.collect(new Evaluator.Id(id), this); [EOL]     if (elements.size() > 0) [EOL]         return elements.get(0); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] tag.setAncestor(defaultAncestor.tagName); [LINE] private static Tag register(Tag tag) { [EOL]     tag.setAncestor(defaultAncestor.tagName); [EOL]     synchronized (tags) { [EOL]         tags.put(tag.tagName, tag); [EOL]     } [EOL]     return tag; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.html(\\\"<p>there</p><p>now</p>\\\"); [EOL]     assertEquals(\\\"<p>there</p><p>now</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] Validate.notEmpty(id); [LINE] public Element getElementById(String id) { [EOL]     Validate.notEmpty(id); [EOL]     Elements elements = Collector.collect(new Evaluator.Id(id), this); [EOL]     if (elements.size() > 0) [EOL]         return elements.get(0); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] public Document(String baseUri) { [LINE] public Document(String baseUri) { [EOL]     super(Tag.valueOf(\\\"#root\\\"), baseUri); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] String value = \\\"\\\"; [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] Validate.notEmpty(key); [LINE] public String get(String key) { [EOL]     Validate.notEmpty(key); [EOL]     Attribute attr = attributes.get(key.toLowerCase()); [EOL]     return attr != null ? attr.getValue() : \\\"\\\"; [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] classes.add(className); [LINE] public Element toggleClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     if (classes.contains(className)) [EOL]         classes.remove(className); [EOL]     else [EOL]         classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return queue.removeFirst(); [LINE] public Character consume() { [EOL]     return queue.removeFirst(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }", "nl": "[LINE] sb.append(element.outerHtml()); [LINE] public String outerHtml() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.outerHtml()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return (element.hasClass(className)); [LINE] public boolean matches(Element element) { [EOL]     return (element.hasClass(className)); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.html(\\\"<p>there</p><p>now</p>\\\"); [EOL]     assertEquals(\\\"<p>there</p><p>now</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] String id = attr(\\\"id\\\"); [LINE] public String id() { [EOL]     String id = attr(\\\"id\\\"); [EOL]     return id == null ? \\\"\\\" : id; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] public String get(String key) { [LINE] public String get(String key) { [EOL]     Validate.notEmpty(key); [EOL]     Attribute attr = attributes.get(key.toLowerCase()); [EOL]     return attr != null ? attr.getValue() : \\\"\\\"; [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] attributes.put(\\\"class\\\", StringUtils.join(classNames, \\\" \\\")); [LINE] public Element classNames(Set<String> classNames) { [EOL]     Validate.notNull(classNames); [EOL]     attributes.put(\\\"class\\\", StringUtils.join(classNames, \\\" \\\")); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] return i; [LINE] protected static <N extends Node> Integer indexInList(N search, List<N> nodes) { [EOL]     Validate.notNull(search); [EOL]     Validate.notNull(nodes); [EOL]     for (int i = 0; i < nodes.size(); i++) { [EOL]         N node = nodes.get(i); [EOL]         if (node.equals(search)) [EOL]             return i; [EOL]     } [EOL]     return null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] protected static <N extends Node> Integer indexInList(N search, List<N> nodes) { [LINE] protected static <N extends Node> Integer indexInList(N search, List<N> nodes) { [EOL]     Validate.notNull(search); [EOL]     Validate.notNull(nodes); [EOL]     for (int i = 0; i < nodes.size(); i++) { [EOL]         N node = nodes.get(i); [EOL]         if (node.equals(search)) [EOL]             return i; [EOL]     } [EOL]     return null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] public void remove(String key) { [LINE] public void remove(String key) { [EOL]     Validate.notEmpty(key); [EOL]     attributes.remove(key.toLowerCase()); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] return true; [LINE] private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) { [EOL]     String value = el.absUrl(attr.getKey()); [EOL]     attr.setValue(value); [EOL]     for (Protocol protocol : protocols) { [EOL]         String prot = protocol.toString() + \\\":\\\"; [EOL]         if (value.toString().toLowerCase().startsWith(prot)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] return String.format(\\\"%s=\\\\\"%s\\\\\"\\\", key, StringEscapeUtils.escapeHtml(value)); [LINE] public String html() { [EOL]     return String.format(\\\"%s=\\\\\"%s\\\\\"\\\", key, StringEscapeUtils.escapeHtml(value)); [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] else if (attributeKey.toLowerCase().startsWith(\\\"abs:\\\")) [LINE] public String attr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     if (hasAttr(attributeKey)) [EOL]         return attributes.get(attributeKey); [EOL]     else if (attributeKey.toLowerCase().startsWith(\\\"abs:\\\")) [EOL]         return absUrl(attributeKey.substring(\\\"abs:\\\".length())); [EOL]     else [EOL]         return \\\"\\\"; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] public static Attribute createFromEncoded(String unencodedKey, String encodedValue) { [LINE] public static Attribute createFromEncoded(String unencodedKey, String encodedValue) { [EOL]     String value = StringEscapeUtils.unescapeHtml(encodedValue); [EOL]     return new Attribute(unencodedKey, value); [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = \\\"<dt>Foo<dd>Bar<dt>Qux<dd>Zug\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag(\\\"dl\\\").first().children().size()); [EOL]     Elements dts = doc.select(\\\"dt\\\"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals(\\\"Zug\\\", dts.get(1).nextElementSibling().text()); [EOL] }", "nl": "[LINE] return false; [LINE] boolean canContain(Tag child) { [EOL]     Validate.notNull(child); [EOL]     if (child.isBlock && !this.canContainBlock) [EOL]         return false; [EOL]     if (!child.isBlock && !this.canContainInline) [EOL]         return false; [EOL]     if (this.optionalClosing && this.equals(child)) [EOL]         return false; [EOL]     if (this.empty || this.isData()) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"head\\\")) { [EOL]         if (child.tagName.equals(\\\"base\\\") || child.tagName.equals(\\\"script\\\") || child.tagName.equals(\\\"noscript\\\") || child.tagName.equals(\\\"link\\\") || child.tagName.equals(\\\"meta\\\") || child.tagName.equals(\\\"title\\\") || child.tagName.equals(\\\"style\\\") || child.tagName.equals(\\\"object\\\")) { [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (this.tagName.equals(\\\"dt\\\") && child.tagName.equals(\\\"dd\\\")) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"dd\\\") && child.tagName.equals(\\\"dt\\\")) [EOL]         return false; [EOL]     return true; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] Validate.notNull(in); [LINE] protected void replaceChild(Node out, Node in) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     Validate.notNull(in); [EOL]     if (in.parentNode != null) [EOL]         in.parentNode.removeChild(in); [EOL]     Integer index = indexInList(out, childNodes); [EOL]     childNodes.set(index, in); [EOL]     in.parentNode = this; [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] doc = Document.createShell(baseUri); [LINE] private Parser(String html, String baseUri, boolean isBodyFragment) { [EOL]     Validate.notNull(html); [EOL]     Validate.notNull(baseUri); [EOL]     stack = new LinkedList<Element>(); [EOL]     tq = new TokenQueue(html); [EOL]     this.baseUri = baseUri; [EOL]     if (isBodyFragment) { [EOL]         doc = Document.createShell(baseUri); [EOL]         stack.add(doc.body()); [EOL]     } else { [EOL]         doc = new Document(baseUri); [EOL]         stack.add(doc); [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(ps.hasAttr(\\\"class\\\")); [EOL]     assertFalse(ps.hasAttr(\\\"style\\\")); [EOL] }", "nl": "[LINE] if (element.hasAttr(attributeKey)) [LINE] public boolean hasAttr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasAttr(attributeKey)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] LinkedHashSet<Element> elements = new LinkedHashSet<Element>(); [LINE] public static Elements select(String query, Iterable<Element> roots) { [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(roots); [EOL]     LinkedHashSet<Element> elements = new LinkedHashSet<Element>(); [EOL]     for (Element root : roots) { [EOL]         elements.addAll(select(query, root)); [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] super(value); [LINE] AttributeValue(String value) { [EOL]     super(value); [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] element.text(accum); [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [LINE] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.parent() != null && c.parent().equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] } while (read >= 0); [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] Elements output; [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] private Attribute parseAttribute() { [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Elements prepend(String html) { [LINE] public Elements prepend(String html) { [EOL]     for (Element element : contents) { [EOL]         element.prepend(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] indent(accum); [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] Validate.notNull(in); [LINE] public void replaceWith(Node in) { [EOL]     Validate.notNull(in); [EOL]     Validate.notNull(parentNode); [EOL]     parentNode.replaceChild(this, in); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] return this; [LINE] private Tag setOptionalClosing() { [EOL]     optionalClosing = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return this; [LINE] public Element appendChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] public void replaceWith(Node in) { [LINE] public void replaceWith(Node in) { [EOL]     Validate.notNull(in); [EOL]     Validate.notNull(parentNode); [EOL]     parentNode.replaceChild(this, in); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] super(Tag.valueOf(\\\"#root\\\"), baseUri); [LINE] public Document(String baseUri) { [EOL]     super(Tag.valueOf(\\\"#root\\\"), baseUri); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] String relUrl = attr(attributeKey); [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \\\"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\\\"; [EOL]     Document doc = Jsoup.parse(h, \\\"http://foo/\\\"); [EOL]     assertEquals(\\\"http://bar\\\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\\\"a\\\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\\\"http://foo/\\\", anchors.get(0).baseUri()); [EOL]     assertEquals(\\\"http://foo/2/\\\", anchors.get(1).baseUri()); [EOL]     assertEquals(\\\"http://bar\\\", anchors.get(2).baseUri()); [EOL]     assertEquals(\\\"http://foo/1\\\", anchors.get(0).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://foo/2/3\\\", anchors.get(1).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://bar/4\\\", anchors.get(2).absUrl(\\\"href\\\")); [EOL] }", "nl": "[LINE] Validate.notNull(baseUri); [LINE] public void setBaseUri(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     this.baseUri = baseUri; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public Elements append(String html) { [EOL]     for (Element element : contents) { [EOL]         element.append(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] StringBuilder valueAccum = new StringBuilder(); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void handlesCdata() { [EOL]     String h = \\\"<div id=1><![CData[<html>\\n<foo><&amp;]]></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"<html> <foo><&amp;\\\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }", "nl": "[LINE] private void parseCdata() { [LINE] private void parseCdata() { [EOL]     tq.consume(\\\"<![CDATA[\\\"); [EOL]     String rawText = tq.chompTo(\\\"]]>\\\"); [EOL]     TextNode textNode = new TextNode(rawText, baseUri); [EOL]     last().appendChild(textNode); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return !contents.isEmpty() ? contents.get(0) : null; [LINE] public Element first() { [EOL]     return !contents.isEmpty() ? contents.get(0) : null; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] Validate.notNull(attributeKey); [LINE] public boolean hasAttr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     return attributes.hasKey(attributeKey); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element html(String html) { [LINE] public Element html(String html) { [EOL]     empty(); [EOL]     append(html); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] if (attribute != null) [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] return this; [LINE] public Element text(String text) { [EOL]     Validate.notNull(text); [EOL]     empty(); [EOL]     TextNode textNode = new TextNode(text, baseUri); [EOL]     appendChild(textNode); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = \\\"foo <b>bar</b> baz\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals(\\\"foo bar baz\\\", doc.text()); [EOL] }", "nl": "[LINE] element.removeChild(node); [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] public Element text(String text) { [LINE] public Element text(String text) { [EOL]     Validate.notNull(text); [EOL]     empty(); [EOL]     TextNode textNode = new TextNode(text, baseUri); [EOL]     appendChild(textNode); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] AttributeValue(String value) { [LINE] AttributeValue(String value) { [EOL]     super(value); [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] protected void indent(StringBuilder accum) { [LINE] protected void indent(StringBuilder accum) { [EOL]     accum.append(\\\"\\n\\\").append(StringUtils.leftPad(\\\"\\\", nodeDepth() - 1 * 2)); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void handlesCdata() { [EOL]     String h = \\\"<div id=1><![CData[<html>\\n<foo><&amp;]]></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"<html> <foo><&amp;\\\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }", "nl": "[LINE] tq.consume(\\\"<![CDATA[\\\"); [LINE] private void parseCdata() { [EOL]     tq.consume(\\\"<![CDATA[\\\"); [EOL]     String rawText = tq.chompTo(\\\"]]>\\\"); [EOL]     TextNode textNode = new TextNode(rawText, baseUri); [EOL]     last().appendChild(textNode); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] return element.elementSiblingIndex() == index; [LINE] public boolean matches(Element element) { [EOL]     return element.elementSiblingIndex() == index; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] for (Element root : roots) { [LINE] public static Elements select(String query, Iterable<Element> roots) { [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(roots); [EOL]     LinkedHashSet<Element> elements = new LinkedHashSet<Element>(); [EOL]     for (Element root : roots) { [EOL]         elements.addAll(select(query, root)); [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] Validate.notNull(classNames); [LINE] public Element classNames(Set<String> classNames) { [EOL]     Validate.notNull(classNames); [EOL]     attributes.put(\\\"class\\\", StringUtils.join(classNames, \\\" \\\")); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] inline.isBlock = false; [LINE] private static Tag createInline(String tagName) { [EOL]     Tag inline = new Tag(tagName); [EOL]     inline.isBlock = false; [EOL]     inline.canContainBlock = false; [EOL]     return register(inline); [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] for (Element p : parents) { [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\\\"); [EOL]     assertEquals(\\\"<html><head></head><body><div title=\\\\\"Tags &amp;c.\\\\\"><img src=\\\\\"foo.png\\\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\\\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }", "nl": "[LINE] return super.html(); // no outer wrapper tag [LINE] @Override [EOL] public String outerHtml() { [EOL]     return super.html(); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] return isBlock; [LINE] public boolean isBlock() { [EOL]     return isBlock; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return false; [LINE] public boolean matchChomp(String seq) { [EOL]     if (matches(seq)) { [EOL]         consume(seq); [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] return attributes; [LINE] public Attributes attributes() { [EOL]     return attributes; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] normalise(select(\\\"html\\\").first()); [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] combinator(tq.consume().toString()); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] if (tag.canContainBlock()) indent(accum); [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] if (c.equals(p)) { [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] Cleaner cleaner = new Cleaner(whitelist); [LINE] public static boolean isValid(String bodyHtml, Whitelist whitelist) { [EOL]     Document dirty = parseBodyFragment(bodyHtml, \\\"\\\"); [EOL]     Cleaner cleaner = new Cleaner(whitelist); [EOL]     return cleaner.isValid(dirty); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] StringBuilder accum = new StringBuilder(); [LINE] public String consumeCssIdentifier() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     Character c = queue.peek(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) { [EOL]         accum.append(queue.removeFirst()); [EOL]         c = queue.peek(); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] public void addAll(Attributes incoming) { [LINE] public void addAll(Attributes incoming) { [EOL]     attributes.putAll(incoming.attributes); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\\\"<textarea>Hello</textarea>\\\"); [EOL]     Elements els = doc.select(\\\"textarea\\\"); [EOL]     assertEquals(\\\"Hello\\\", els.text()); [EOL]     assertEquals(\\\"Hello\\\", els.val()); [EOL] }", "nl": "[LINE] dataNode = TextNode.createFromEncoded(data, baseUri); [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void filter() { [EOL]     String h = \\\"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\".headline\\\").select(\\\"p\\\"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals(\\\"Hello\\\", els.get(0).text()); [EOL]     assertEquals(\\\"There\\\", els.get(1).text()); [EOL] }", "nl": "[LINE] sb.append(\\\" \\\"); [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\" \\\"); [EOL]         sb.append(element.text()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] return getElementsByTag(\\\"body\\\").first(); [LINE] public Element body() { [EOL]     return getElementsByTag(\\\"body\\\").first(); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return this; [LINE] public Elements toggleClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.toggleClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] Validate.notNull(dirtyDocument); [LINE] public boolean isValid(Document dirtyDocument) { [EOL]     Validate.notNull(dirtyDocument); [EOL]     Document clean = Document.createShell(dirtyDocument.baseUri()); [EOL]     int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body()); [EOL]     return numDiscarded == 0; [EOL] } public Cleaner(Whitelist whitelist);  ElementMeta(Element el, int numAttribsDiscarded); public Document clean(Document dirtyDocument); public boolean isValid(Document dirtyDocument); private int copySafeNodes(Element source, Element dest); private ElementMeta createSafeElement(Element sourceEl); Whitelist whitelist"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] Character found = Character.toLowerCase(chars.get(i)); [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\\\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\\\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\\\"class\\\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\\\"mellow yellow\\\", span.className()); [EOL]     assertTrue(span.hasClass(\\\"mellow\\\")); [EOL]     assertTrue(span.hasClass(\\\"yellow\\\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\\\"mellow\\\")); [EOL]     assertTrue(classes.contains(\\\"yellow\\\")); [EOL]     assertEquals(\\\"\\\", doc.className()); [EOL]     assertFalse(doc.hasClass(\\\"mellow\\\")); [EOL] }", "nl": "[LINE] public boolean matches(Element element) { [LINE] public boolean matches(Element element) { [EOL]     return (element.hasAttr(key)); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] matchChomp(seq); [LINE] public String chompTo(String seq) { [EOL]     String data = consumeTo(seq); [EOL]     matchChomp(seq); [EOL]     return data; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] AttributeWithValue(String key, String value) { [LINE] AttributeWithValue(String key, String value) { [EOL]     super(key, value); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] element.append(html); [LINE] public Elements append(String html) { [EOL]     for (Element element : contents) { [EOL]         element.append(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] classNames = new LinkedHashSet<String>(Arrays.asList(names)); [LINE] public Set<String> classNames() { [EOL]     if (classNames == null) { [EOL]         String[] names = className().split(\\\"\\\\s+\\\"); [EOL]         classNames = new LinkedHashSet<String>(Arrays.asList(names)); [EOL]     } [EOL]     return classNames; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] private Evaluator() {} [LINE] private Evaluator() { [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] canContainBlock = false; [LINE] private Tag setEmpty() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     empty = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] return output; [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parsesComments() { [EOL]     String html = \\\"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element body = doc.body(); [EOL]     Comment comment = (Comment) body.childNode(1); [EOL]     assertEquals(\\\" <table><tr><td></table> \\\", comment.getData()); [EOL]     Element p = body.child(1); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL] }", "nl": "[LINE] data = data.substring(0, data.length()-1); [LINE] private void parseComment() { [EOL]     tq.consume(\\\"<!--\\\"); [EOL]     String data = tq.chompTo(\\\"->\\\"); [EOL]     if (data.endsWith(\\\"-\\\")) [EOL]         data = data.substring(0, data.length() - 1); [EOL]     Comment comment = new Comment(data, baseUri); [EOL]     last().appendChild(comment); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testSupportsLeadingCombinator() { [EOL]     String h = \\\"<div><p><span>One</span><span>Two</span></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element p = doc.select(\\\"div > p\\\").first(); [EOL]     Elements spans = p.select(\\\"> span\\\"); [EOL]     assertEquals(2, spans.size()); [EOL]     assertEquals(\\\"One\\\", spans.first().text()); [EOL]     h = \\\"<div id=1><div id=2><div id=3></div></div></div>\\\"; [EOL]     doc = Jsoup.parse(h); [EOL]     Element div = doc.select(\\\"div\\\").select(\\\" > div\\\").first(); [EOL]     assertEquals(\\\"2\\\", div.id()); [EOL] }", "nl": "[LINE] elements.add(root); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] return true; [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] public void setValue(String value) { [LINE] public void setValue(String value) { [EOL]     Validate.notNull(value); [EOL]     this.value = value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = \\\"<dt>Foo<dd>Bar<dt>Qux<dd>Zug\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag(\\\"dl\\\").first().children().size()); [EOL]     Elements dts = doc.select(\\\"dt\\\"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals(\\\"Zug\\\", dts.get(1).nextElementSibling().text()); [EOL] }", "nl": "[LINE] return false; [LINE] boolean canContain(Tag child) { [EOL]     Validate.notNull(child); [EOL]     if (child.isBlock && !this.canContainBlock) [EOL]         return false; [EOL]     if (!child.isBlock && !this.canContainInline) [EOL]         return false; [EOL]     if (this.optionalClosing && this.equals(child)) [EOL]         return false; [EOL]     if (this.empty || this.isData()) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"head\\\")) { [EOL]         if (child.tagName.equals(\\\"base\\\") || child.tagName.equals(\\\"script\\\") || child.tagName.equals(\\\"noscript\\\") || child.tagName.equals(\\\"link\\\") || child.tagName.equals(\\\"meta\\\") || child.tagName.equals(\\\"title\\\") || child.tagName.equals(\\\"style\\\") || child.tagName.equals(\\\"object\\\")) { [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (this.tagName.equals(\\\"dt\\\") && child.tagName.equals(\\\"dd\\\")) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"dd\\\") && child.tagName.equals(\\\"dt\\\")) [EOL]         return false; [EOL]     return true; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] inline.canContainBlock = false; [LINE] private static Tag createInline(String tagName) { [EOL]     Tag inline = new Tag(tagName); [EOL]     inline.isBlock = false; [EOL]     inline.canContainBlock = false; [EOL]     return register(inline); [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] private Elements select() { [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] public String data() { [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] return getElementsByTag(\\\"head\\\").first(); [LINE] public Element head() { [EOL]     return getElementsByTag(\\\"head\\\").first(); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return true; [LINE] public boolean matchChomp(String seq) { [EOL]     if (matches(seq)) { [EOL]         consume(seq); [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] public String getValue() { [LINE] public String getValue() { [EOL]     return value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] private Tag setEmpty() { [LINE] private Tag setEmpty() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     empty = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] public Element createElement(String tagName) { [LINE] public Element createElement(String tagName) { [EOL]     return new Element(Tag.valueOf(tagName), this.baseUri()); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] String data = consumeTo(seq); [LINE] public String chompTo(String seq) { [EOL]     String data = consumeTo(seq); [EOL]     matchChomp(seq); [EOL]     return data; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] Elements candidates = findElements(); // take next el, #. etc off queue [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void wrap() { [EOL]     String h = \\\"<p><b>This</b> is <b>jsoup</b></p>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\\\"b\\\").wrap(\\\"<i></i>\\\"); [EOL]     assertEquals(\\\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\\\", doc.body().html()); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public Elements wrap(String html) { [EOL]     Validate.notEmpty(html); [EOL]     for (Element element : contents) { [EOL]         element.wrap(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] in.parentNode = this; [LINE] protected void replaceChild(Node out, Node in) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     Validate.notNull(in); [EOL]     if (in.parentNode != null) [EOL]         in.parentNode.removeChild(in); [EOL]     Integer index = indexInList(out, childNodes); [EOL]     childNodes.set(index, in); [EOL]     in.parentNode = this; [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] head().appendElement(\\\"title\\\").text(title); [LINE] public void title(String title) { [EOL]     Validate.notNull(title); [EOL]     Element titleEl = getElementsByTag(\\\"title\\\").first(); [EOL]     if (titleEl == null) { [EOL]         head().appendElement(\\\"title\\\").text(title); [EOL]     } else { [EOL]         titleEl.text(title); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.html(\\\"<p>there</p><p>now</p>\\\"); [EOL]     assertEquals(\\\"<p>there</p><p>now</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] return elements.get(0); [LINE] public Element getElementById(String id) { [EOL]     Validate.notEmpty(id); [EOL]     Elements elements = Collector.collect(new Evaluator.Id(id), this); [EOL]     if (elements.size() > 0) [EOL]         return elements.get(0); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element) { [LINE] private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element) { [EOL]     if (eval.matches(element)) [EOL]         elements.add(element); [EOL]     for (Element child : element.children()) accumulateMatches(eval, elements, child); [EOL] } public static Elements collect(Evaluator eval, Element root); private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element)"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] Id (String id) { [LINE] Id(String id) { [EOL]     this.id = id; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public void consume(String seq) { [LINE] public void consume(String seq) { [EOL]     if (!matches(seq)) [EOL]         throw new IllegalStateException(\\\"Queue did not match expected sequence\\\"); [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         throw new IllegalStateException(\\\"Queue not long enough to consume sequence\\\"); [EOL]     for (int i = 0; i < len; i++) { [EOL]         consume(); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] byId.add(found); [LINE] private Elements byId() { [EOL]     String id = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(id); [EOL]     Element found = root.getElementById(id); [EOL]     Elements byId = new Elements(); [EOL]     if (found != null) [EOL]         byId.add(found); [EOL]     return byId; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] for (Node node: element.childNodes) { [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public boolean isEmpty() {return contents.isEmpty();} [LINE] public boolean isEmpty() { [EOL]     return contents.isEmpty(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] Set<String> classes = classNames(); [LINE] public Element toggleClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     if (classes.contains(className)) [EOL]         classes.remove(className); [EOL]     else [EOL]         classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Validate.notNull(child); [LINE] public Element prependChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(0, child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] element.toggleClass(className); [LINE] public Elements toggleClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.toggleClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return classNames; [LINE] public Set<String> classNames() { [EOL]     if (classNames == null) { [EOL]         String[] names = className().split(\\\"\\\\s+\\\"); [EOL]         classNames = new LinkedHashSet<String>(Arrays.asList(names)); [EOL]     } [EOL]     return classNames; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] public static Document parseBodyFragment(String bodyHtml) { [LINE] public static Document parseBodyFragment(String bodyHtml) { [EOL]     return Parser.parseBodyFragment(bodyHtml, \\\"\\\"); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.appendText(\\\" there & now >\\\"); [EOL]     assertEquals(\\\"<p>Hello</p> there &amp; now &gt;\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] TextNode node = new TextNode(text, baseUri()); [LINE] public Element appendText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     appendChild(node); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] public Element body() { [LINE] public Element body() { [EOL]     return getElementsByTag(\\\"body\\\").first(); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void filter() { [EOL]     String h = \\\"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\".headline\\\").select(\\\"p\\\"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals(\\\"Hello\\\", els.get(0).text()); [EOL]     assertEquals(\\\"There\\\", els.get(1).text()); [EOL] }", "nl": "[LINE] Validate.notEmpty(className); [LINE] public Elements getElementsByClass(String className) { [EOL]     Validate.notEmpty(className); [EOL]     return Collector.collect(new Evaluator.Class(className), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\\\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\\\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\\\"class\\\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\\\"mellow yellow\\\", span.className()); [EOL]     assertTrue(span.hasClass(\\\"mellow\\\")); [EOL]     assertTrue(span.hasClass(\\\"yellow\\\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\\\"mellow\\\")); [EOL]     assertTrue(classes.contains(\\\"yellow\\\")); [EOL]     assertEquals(\\\"\\\", doc.className()); [EOL]     assertFalse(doc.hasClass(\\\"mellow\\\")); [EOL] }", "nl": "[LINE] return (element.hasAttr(key)); [LINE] public boolean matches(Element element) { [EOL]     return (element.hasAttr(key)); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] if (key.length() != 0) [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] Element titleEl = getElementsByTag(\\\"title\\\").first(); [LINE] public String title() { [EOL]     Element titleEl = getElementsByTag(\\\"title\\\").first(); [EOL]     return titleEl != null ? titleEl.text().trim() : \\\"\\\"; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] Validate.notEmpty(id); [LINE] private Elements byId() { [EOL]     String id = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(id); [EOL]     Element found = root.getElementById(id); [EOL]     Elements byId = new Elements(); [EOL]     if (found != null) [EOL]         byId.add(found); [EOL]     return byId; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] private Elements byTag() { [LINE] private Elements byTag() { [EOL]     String tagName = tq.consumeWord(); [EOL]     Validate.notEmpty(tagName); [EOL]     return root.getElementsByTag(tagName); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return tag.getName(); [LINE] public String tagName() { [EOL]     return tag.getName(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] this(tag, baseUri, new Attributes()); [LINE] public Element(Tag tag, String baseUri) { [EOL]     this(tag, baseUri, new Attributes()); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] int result = super.hashCode(); [LINE] @Override [EOL] public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     result = 31 * result + (tag != null ? tag.hashCode() : 0); [EOL]     return result; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] return sb.toString(); [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] sb.append(element.text()); [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\" \\\"); [EOL]         sb.append(element.text()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] return sb.toString(); [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\" \\\"); [EOL]         sb.append(element.text()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] Attribute attribute = parseAttribute(); [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace(); [LINE] boolean preserveWhitespace() { [EOL]     return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] accum.append(text); [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] public Elements attr(String attributeKey, String attributeValue) { [LINE] public Elements attr(String attributeKey, String attributeValue) { [EOL]     for (Element element : contents) { [EOL]         element.attr(attributeKey, attributeValue); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] while (!queue.isEmpty() && (Character.isLetterOrDigit(queue.peek()) || matchesAny(\\\"-\\\", \\\"_\\\", \\\":\\\"))) { [LINE] public String consumeAttributeKey() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(queue.peek()) || matchesAny(\\\"-\\\", \\\"_\\\", \\\":\\\"))) { [EOL]         accum.append(queue.removeFirst()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] public Attributes attributes() { [LINE] public Attributes attributes() { [EOL]     return attributes; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] public boolean canContainBlock() { [LINE] public boolean canContainBlock() { [EOL]     return canContainBlock; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] String subQuery = tq.consumeToAny(combinators); // support multi > childs [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] private Elements findElements() { [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] attributes.remove(key.toLowerCase()); [LINE] public void remove(String key) { [EOL]     Validate.notEmpty(key); [EOL]     attributes.remove(key.toLowerCase()); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] return numDiscarded == 0; [LINE] public boolean isValid(Document dirtyDocument) { [EOL]     Validate.notNull(dirtyDocument); [EOL]     Document clean = Document.createShell(dirtyDocument.baseUri()); [EOL]     int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body()); [EOL]     return numDiscarded == 0; [EOL] } public Cleaner(Whitelist whitelist);  ElementMeta(Element el, int numAttribsDiscarded); public Document clean(Document dirtyDocument); public boolean isValid(Document dirtyDocument); private int copySafeNodes(Element source, Element dest); private ElementMeta createSafeElement(Element sourceEl); Whitelist whitelist"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element(Tag tag, String baseUri) { [LINE] public Element(Tag tag, String baseUri) { [EOL]     this(tag, baseUri, new Attributes()); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }", "nl": "[LINE] sb.append(\\\"\\n\\\"); [LINE] public String outerHtml() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.outerHtml()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] empty(); [LINE] public Element text(String text) { [EOL]     Validate.notNull(text); [EOL]     empty(); [EOL]     TextNode textNode = new TextNode(text, baseUri); [EOL]     appendChild(textNode); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void wrap() { [EOL]     String h = \\\"<p><b>This</b> is <b>jsoup</b></p>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\\\"b\\\").wrap(\\\"<i></i>\\\"); [EOL]     assertEquals(\\\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\\\", doc.body().html()); [EOL] }", "nl": "[LINE] public int size() {return contents.size();} [LINE] public int size() { [EOL]     return contents.size(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] public Element head() { [LINE] public Element head() { [EOL]     return getElementsByTag(\\\"head\\\").first(); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element empty() { [LINE] public Element empty() { [EOL]     childNodes.clear(); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] return byTag(); [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesCdata() { [EOL]     String h = \\\"<div id=1><![CData[<html>\\n<foo><&amp;]]></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"<html> <foo><&amp;\\\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }", "nl": "[LINE] parseCdata(); [LINE] private Document parse() { [EOL]     while (!tq.isEmpty()) { [EOL]         if (tq.matches(\\\"<!--\\\")) { [EOL]             parseComment(); [EOL]         } else if (tq.matches(\\\"<![CDATA[\\\")) { [EOL]             parseCdata(); [EOL]         } else if (tq.matches(\\\"<?\\\") || tq.matches(\\\"<!\\\")) { [EOL]             parseXmlDecl(); [EOL]         } else if (tq.matches(\\\"</\\\")) { [EOL]             parseEndTag(); [EOL]         } else if (tq.matches(\\\"<\\\")) { [EOL]             parseStartTag(); [EOL]         } else { [EOL]             parseTextNode(); [EOL]         } [EOL]     } [EOL]     return doc.normalise(); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] return attributes != null ? attributes.hashCode() : 0; [LINE] @Override [EOL] public int hashCode() { [EOL]     return attributes != null ? attributes.hashCode() : 0; [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void basicWithImagesTest() { [EOL]     String h = \\\"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<p><img src=\\\\\"http://example.com/\\\\\" alt=\\\\\"Image\\\\\" /></p><p><img /></p>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] public static Whitelist basicWithImages() { [LINE] public static Whitelist basicWithImages() { [EOL]     return basic().addTags(\\\"img\\\").addAttributes(\\\"img\\\", \\\"align\\\", \\\"alt\\\", \\\"height\\\", \\\"src\\\", \\\"title\\\", \\\"width\\\").addProtocols(\\\"img\\\", \\\"src\\\", \\\"http\\\", \\\"https\\\"); [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] public String title() { [LINE] public String title() { [EOL]     Element titleEl = getElementsByTag(\\\"title\\\").first(); [EOL]     return titleEl != null ? titleEl.text().trim() : \\\"\\\"; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag(\\\"div\\\"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals(\\\"div1\\\", divs.get(0).id()); [EOL]     assertEquals(\\\"div2\\\", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag(\\\"p\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"Hello\\\", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals(\\\"Another \\\", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag(\\\"P\\\"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag(\\\"img\\\"); [EOL]     assertEquals(\\\"foo.png\\\", imgs.get(0).attr(\\\"src\\\")); [EOL]     List<Element> empty = doc.getElementsByTag(\\\"wtf\\\"); [EOL]     assertEquals(0, empty.size()); [EOL] }", "nl": "[LINE] public ListIterator<Element> listIterator() {return contents.listIterator();} [LINE] public ListIterator<Element> listIterator() { [EOL]     return contents.listIterator(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] public String text() { [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\" \\\"); [EOL]         sb.append(element.text()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return this; [LINE] public Element classNames(Set<String> classNames) { [EOL]     Validate.notNull(classNames); [EOL]     attributes.put(\\\"class\\\", StringUtils.join(classNames, \\\" \\\")); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return Parser.parse(html, \\\"\\\"); [LINE] public static Document parse(String html) { [EOL]     return Parser.parse(html, \\\"\\\"); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] } else if (tq.matchChomp(DQ)) { [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\n<p>There</p>\\\", divs.html()); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public String html() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.html()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] StringBuilder sb = new StringBuilder(); [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(ps.hasAttr(\\\"class\\\")); [EOL]     assertFalse(ps.hasAttr(\\\"style\\\")); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public boolean hasAttr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasAttr(attributeKey)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] Element element = (Element) child; [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] children.add(c); [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public boolean matchesWhitespace() { [LINE] public boolean matchesWhitespace() { [EOL]     return !queue.isEmpty() && Character.isWhitespace(queue.peek()); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] this.className = className; [LINE] Class(String className) { [EOL]     this.className = className; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] accum.append(\\\"\\n\\\").append(StringUtils.leftPad(\\\"\\\", nodeDepth() -1 * 2)); [LINE] protected void indent(StringBuilder accum) { [EOL]     accum.append(\\\"\\n\\\").append(StringUtils.leftPad(\\\"\\\", nodeDepth() - 1 * 2)); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] Validate.notEmpty(key); [LINE] private Elements byAttribute() { [EOL]     String key = tq.consumeToAny(\\\"=\\\", \\\"!=\\\", \\\"^=\\\", \\\"$=\\\", \\\"*=\\\", \\\"]\\\"); [EOL]     Validate.notEmpty(key); [EOL]     if (tq.matchChomp(\\\"]\\\")) { [EOL]         return root.getElementsByAttribute(key); [EOL]     } else { [EOL]         if (tq.matchChomp(\\\"=\\\")) [EOL]             return root.getElementsByAttributeValue(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"!=\\\")) [EOL]             return root.getElementsByAttributeValueNot(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"^=\\\")) [EOL]             return root.getElementsByAttributeValueStarting(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"$=\\\")) [EOL]             return root.getElementsByAttributeValueEnding(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"*=\\\")) [EOL]             return root.getElementsByAttributeValueContaining(key, tq.chompTo(\\\"]\\\")); [EOL]         else [EOL]             throw new SelectorParseException(\\\"Could not parse attribute query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void basicWithImagesTest() { [EOL]     String h = \\\"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<p><img src=\\\\\"http://example.com/\\\\\" alt=\\\\\"Image\\\\\" /></p><p><img /></p>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] return basic() [LINE] public static Whitelist basicWithImages() { [EOL]     return basic().addTags(\\\"img\\\").addAttributes(\\\"img\\\", \\\"align\\\", \\\"alt\\\", \\\"height\\\", \\\"src\\\", \\\"title\\\", \\\"width\\\").addProtocols(\\\"img\\\", \\\"src\\\", \\\"http\\\", \\\"https\\\"); [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] public Iterator<Attribute> iterator() { [LINE] public Iterator<Attribute> iterator() { [EOL]     return asList().iterator(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Elements(Collection<Element> elements) { [LINE] public Elements(Collection<Element> elements) { [EOL]     contents = new ArrayList<Element>(elements); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div>\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\\", doc.getElementsByTag(\\\"div\\\").get(0).html()); [EOL] }", "nl": "[LINE] public String html() { [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     html(accum); [EOL]     return accum.toString().trim(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] empty = true; [LINE] private Tag setEmpty() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     empty = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Elements getElementsByTag(String tagName) { [LINE] public Elements getElementsByTag(String tagName) { [EOL]     Validate.notEmpty(tagName); [EOL]     tagName = tagName.toLowerCase().trim(); [EOL]     return Collector.collect(new Evaluator.Tag(tagName), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] if (!tn.isBlank()) [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] public String getData() { [LINE] public String getData() { [EOL]     return attributes.get(COMMENT_KEY); [EOL] } public Comment(String data, String baseUri); public String nodeName(); public String getData();  void outerHtml(StringBuilder accum); public String toString(); String COMMENT_KEY=Optional[\\\"comment\\\"]"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] return new Attribute(unencodedKey, value); [LINE] public static Attribute createFromEncoded(String unencodedKey, String encodedValue) { [EOL]     String value = StringEscapeUtils.unescapeHtml(encodedValue); [EOL]     return new Attribute(unencodedKey, value); [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void handlesCdata() { [EOL]     String h = \\\"<div id=1><![CData[<html>\\n<foo><&amp;]]></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"<html> <foo><&amp;\\\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }", "nl": "[LINE] String rawText = tq.chompTo(\\\"]]>\\\"); [LINE] private void parseCdata() { [EOL]     tq.consume(\\\"<![CDATA[\\\"); [EOL]     String rawText = tq.chompTo(\\\"]]>\\\"); [EOL]     TextNode textNode = new TextNode(rawText, baseUri); [EOL]     last().appendChild(textNode); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] return true; [LINE] public boolean matches(Element element) { [EOL]     return true; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setTextPreservesDocumentStructure() { [EOL]     Document doc = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     doc.text(\\\"Replaced\\\"); [EOL]     assertEquals(\\\"Replaced\\\", doc.text()); [EOL]     assertEquals(\\\"Replaced\\\", doc.body().text()); [EOL]     assertEquals(1, doc.select(\\\"head\\\").size()); [EOL] }", "nl": "[LINE] return this; [LINE] @Override [EOL] public Element text(String text) { [EOL]     body().text(text); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] if (matches(seq)) { [LINE] public boolean matchChomp(String seq) { [EOL]     if (matches(seq)) { [EOL]         consume(seq); [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] Validate.notNull(title); [LINE] public void title(String title) { [EOL]     Validate.notNull(title); [EOL]     Element titleEl = getElementsByTag(\\\"title\\\").first(); [EOL]     if (titleEl == null) { [EOL]         head().appendElement(\\\"title\\\").text(title); [EOL]     } else { [EOL]         titleEl.text(title); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] if (child instanceof TextNode) { [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] for (Element child: element.children()) [LINE] private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element) { [EOL]     if (eval.matches(element)) [EOL]         elements.add(element); [EOL]     for (Element child : element.children()) accumulateMatches(eval, elements, child); [EOL] } public static Elements collect(Evaluator eval, Element root); private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element)"}
{"code": "@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/smh-biz-article-1.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\\\"); [EOL]     assertEquals(\\\"The board\u9225\u6a9a next fear: the female quota\\\", doc.title()); [EOL]     assertEquals(\\\"en\\\", doc.select(\\\"html\\\").attr(\\\"xml:lang\\\")); [EOL]     Elements articleBody = doc.select(\\\".articleBody > *\\\"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }", "nl": "[LINE] super(baseUri); [LINE] public DataNode(String data, String baseUri) { [EOL]     super(baseUri); [EOL]     attributes.put(DATA_KEY, data); [EOL] } public DataNode(String data, String baseUri); public String nodeName(); public String getWholeData();  void outerHtml(StringBuilder accum); public String toString(); public static DataNode createFromEncoded(String encodedData, String baseUri); String DATA_KEY=Optional[\\\"data\\\"]"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] return !tagName.equals(\\\":all\\\") && isSafeAttribute(\\\":all\\\", el, attr); [LINE] boolean isSafeAttribute(String tagName, Element el, Attribute attr) { [EOL]     TagName tag = TagName.valueOf(tagName); [EOL]     AttributeKey key = AttributeKey.valueOf(attr.getKey()); [EOL]     if (attributes.containsKey(tag)) { [EOL]         if (attributes.get(tag).contains(key)) { [EOL]             if (protocols.containsKey(tag)) { [EOL]                 Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag); [EOL]                 return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key)); [EOL]             } else { [EOL]                 return true; [EOL]             } [EOL]         } [EOL]     } else { [EOL]         return !tagName.equals(\\\":all\\\") && isSafeAttribute(\\\":all\\\", el, attr); [EOL]     } [EOL]     return false; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] String elementData = element.data(); [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = \\\"foo <b>bar</b> baz\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals(\\\"foo bar baz\\\", doc.text()); [EOL] }", "nl": "[LINE] body().prependChild(node); [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Elements append(String html) { [LINE] public Elements append(String html) { [EOL]     for (Element element : contents) { [EOL]         element.append(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Element child = new Element(Tag.valueOf(tagName), baseUri()); [LINE] public Element appendElement(String tagName) { [EOL]     Element child = new Element(Tag.valueOf(tagName), baseUri()); [EOL]     appendChild(child); [EOL]     return child; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\\\"a\\\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\\\"relHref\\\", \\\"/foo\\\"); [EOL]     attribs.put(\\\"absHref\\\", \\\"http://bar/qux\\\"); [EOL]     Element noBase = new Element(tag, \\\"\\\", attribs); [EOL]     assertEquals(\\\"\\\", noBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", noBase.absUrl(\\\"absHref\\\")); [EOL]     Element withBase = new Element(tag, \\\"http://foo/\\\", attribs); [EOL]     assertEquals(\\\"http://foo/foo\\\", withBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", withBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", withBase.absUrl(\\\"noval\\\")); [EOL]     Element dodgyBase = new Element(tag, \\\"wtf://no-such-protocol/\\\", attribs); [EOL]     assertEquals(\\\"http://bar/qux\\\", dodgyBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", dodgyBase.absUrl(\\\"relHref\\\")); [EOL] }", "nl": "[LINE] return \\\"\\\"; [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] if (TextNode.lastCharIsWhitespace(accum)) [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public boolean matchesWord() { [LINE] public boolean matchesWord() { [EOL]     return !queue.isEmpty() && Character.isLetterOrDigit(queue.peek()); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] if (!preserveWhitespace()) { [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Validate.notNull(child); [LINE] public Element appendChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] Element found = root.getElementById(id); [LINE] private Elements byId() { [EOL]     String id = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(id); [EOL]     Element found = root.getElementById(id); [EOL]     Elements byId = new Elements(); [EOL]     if (found != null) [EOL]         byId.add(found); [EOL]     return byId; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parsesRoughAttributes() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p class=\\\\\"foo > bar\\\\\">First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     assertEquals(\\\"foo > bar\\\", p.attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] Attribute attr = new Attribute(key, value); [LINE] public void put(String key, String value) { [EOL]     Attribute attr = new Attribute(key, value); [EOL]     put(attr); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] Reader inReader = new InputStreamReader(inStream, charsetName); [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element first() { [LINE] public Element first() { [EOL]     return !contents.isEmpty() ? contents.get(0) : null; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] return children; [LINE] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] public Element lastElementSibling() { [LINE] public Element lastElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public Elements prepend(String html) { [EOL]     for (Element element : contents) { [EOL]         element.prepend(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public Elements addClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.addClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return parentNode.nodeDepth() + 1; [LINE] protected int nodeDepth() { [EOL]     if (parentNode == null) [EOL]         return 0; [EOL]     else [EOL]         return parentNode.nodeDepth() + 1; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) { [LINE] public String consumeCssIdentifier() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     Character c = queue.peek(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) { [EOL]         accum.append(queue.removeFirst()); [EOL]         c = queue.peek(); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public String tagName() { [LINE] public String tagName() { [EOL]     return tag.getName(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] queue = new LinkedList<Character>(); [LINE] public TokenQueue(String data) { [EOL]     Validate.notNull(data); [EOL]     queue = new LinkedList<Character>(); [EOL]     char[] chars = data.toCharArray(); [EOL]     for (char c : chars) { [EOL]         queue.add(c); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] return this; [LINE] public Elements removeAttr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         element.removeAttr(attributeKey); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] public Elements getElementsByIndexEquals(int index) { [LINE] public Elements getElementsByIndexEquals(int index) { [EOL]     return Collector.collect(new Evaluator.IndexEquals(index), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return false; [LINE] public boolean hasClass(String className) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasClass(className)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] public static boolean isValid(String bodyHtml, Whitelist whitelist) { [LINE] public static boolean isValid(String bodyHtml, Whitelist whitelist) { [EOL]     Document dirty = parseBodyFragment(bodyHtml, \\\"\\\"); [EOL]     Cleaner cleaner = new Cleaner(whitelist); [EOL]     return cleaner.isValid(dirty); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] public boolean matches(Element element) { [LINE] public boolean matches(Element element) { [EOL]     return element.attr(key).toLowerCase().contains(value); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return this; [LINE] public Element html(String html) { [EOL]     empty(); [EOL]     append(html); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\n<p>There</p>\\\", divs.html()); [EOL] }", "nl": "[LINE] sb.append(element.html()); [LINE] public String html() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.html()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] public static Elements select(String query, Iterable<Element> roots) { [LINE] public static Elements select(String query, Iterable<Element> roots) { [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(roots); [EOL]     LinkedHashSet<Element> elements = new LinkedHashSet<Element>(); [EOL]     for (Element root : roots) { [EOL]         elements.addAll(select(query, root)); [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] if (data.endsWith(\\\"-\\\")) // i.e. was --> [LINE] private void parseComment() { [EOL]     tq.consume(\\\"<!--\\\"); [EOL]     String data = tq.chompTo(\\\"->\\\"); [EOL]     if (data.endsWith(\\\"-\\\")) [EOL]         data = data.substring(0, data.length() - 1); [EOL]     Comment comment = new Comment(data, baseUri); [EOL]     last().appendChild(comment); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] Validate.notEmpty(tagName); [LINE] private Elements byTag() { [EOL]     String tagName = tq.consumeWord(); [EOL]     Validate.notEmpty(tagName); [EOL]     return root.getElementsByTag(tagName); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.html(\\\"<p>there</p><p>now</p>\\\"); [EOL]     assertEquals(\\\"<p>there</p><p>now</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] Elements elements = Collector.collect(new Evaluator.Id(id), this); [LINE] public Element getElementById(String id) { [EOL]     Validate.notEmpty(id); [EOL]     Elements elements = Collector.collect(new Evaluator.Id(id), this); [EOL]     if (elements.size() > 0) [EOL]         return elements.get(0); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] accum.append(queue.removeFirst()); [LINE] public String consumeAttributeKey() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(queue.peek()) || matchesAny(\\\"-\\\", \\\"_\\\", \\\":\\\"))) { [EOL]         accum.append(queue.removeFirst()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] Validate.isTrue(lastChar.length() == 1); // todo: remove check [LINE] static boolean lastCharIsWhitespace(StringBuilder sb) { [EOL]     if (sb.length() == 0) [EOL]         return false; [EOL]     String lastChar = sb.substring(sb.length() - 1, sb.length()); [EOL]     Validate.isTrue(lastChar.length() == 1); [EOL]     return lastChar.equals(\\\" \\\"); [EOL] } public TextNode(String text, String baseUri); public String nodeName(); public String text(); public TextNode text(String text); public String getWholeText(); public boolean isBlank();  void outerHtml(StringBuilder accum); public String toString(); public static TextNode createFromEncoded(String encodedText, String baseUri);  static String normaliseWhitespace(String text);  static String stripLeadingWhitespace(String text);  static boolean lastCharIsWhitespace(StringBuilder sb); String TEXT_KEY=Optional[\\\"text\\\"]"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] elements.addAll(select(query, root)); [LINE] public static Elements select(String query, Iterable<Element> roots) { [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(roots); [EOL]     LinkedHashSet<Element> elements = new LinkedHashSet<Element>(); [EOL]     for (Element root : roots) { [EOL]         elements.addAll(select(query, root)); [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void normalisesEmptyDocument() { [EOL]     Document doc = Jsoup.parse(\\\"\\\"); [EOL]     assertEquals(\\\"<html><head></head><body></body></html>\\\", TextUtil.stripNewlines(doc.html())); [EOL] }", "nl": "[LINE] appendElement(\\\"html\\\"); [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] StringBuilder data = new StringBuilder(0x20000); [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] element.prepend(html); [LINE] public Elements prepend(String html) { [EOL]     for (Element element : contents) { [EOL]         element.prepend(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] if (len > queue.size()) [LINE] public void consume(String seq) { [EOL]     if (!matches(seq)) [EOL]         throw new IllegalStateException(\\\"Queue did not match expected sequence\\\"); [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         throw new IllegalStateException(\\\"Queue not long enough to consume sequence\\\"); [EOL]     for (int i = 0; i < len; i++) { [EOL]         consume(); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.prependText(\\\"there & now > \\\"); [EOL]     assertEquals(\\\"there & now > Hello\\\", div.text()); [EOL]     assertEquals(\\\"there &amp; now &gt; <p>Hello</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] TextNode node = new TextNode(text, baseUri()); [LINE] public Element prependText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     prependChild(node); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] return byClass(); [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return this; [LINE] public Element append(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     for (Node node : fragment.childNodes()) { [EOL]         node.parentNode = null; [EOL]         appendChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] this.query = query; [LINE] private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] public boolean matches(Element element) { [LINE] public boolean matches(Element element) { [EOL]     return element.elementSiblingIndex() == index; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] this.key = key.trim().toLowerCase(); [LINE] public Attribute(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notNull(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] char[] buffer = new char[0x20000]; // ~ 130K [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] private Elements allElements() { [LINE] private Elements allElements() { [EOL]     return root.getAllElements(); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] return this; [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public boolean hasClass(String className) { [LINE] public boolean hasClass(String className) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasClass(className)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] accum.append(attribute.html()); [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     for (Attribute attribute : this) { [EOL]         accum.append(\\\" \\\"); [EOL]         accum.append(attribute.html()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] consume(); [LINE] public void consume(String seq) { [EOL]     if (!matches(seq)) [EOL]         throw new IllegalStateException(\\\"Queue did not match expected sequence\\\"); [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         throw new IllegalStateException(\\\"Queue not long enough to consume sequence\\\"); [EOL]     for (int i = 0; i < len; i++) { [EOL]         consume(); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] @Override [LINE] @Override [EOL] public int hashCode() { [EOL]     return attributes != null ? attributes.hashCode() : 0; [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Node node = nodes.get(i); [LINE] public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] this.id = id; [LINE] Id(String id) { [EOL]     this.id = id; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] this.tag = tag; [LINE] public Element(Tag tag, String baseUri, Attributes attributes) { [EOL]     super(baseUri, attributes); [EOL]     Validate.notNull(tag); [EOL]     this.tag = tag; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] } else if (childNode instanceof Element) { [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\\\"); [EOL]     assertEquals(\\\"<html><head></head><body><div title=\\\\\"Tags &amp;c.\\\\\"><img src=\\\\\"foo.png\\\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\\\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }", "nl": "[LINE] accum.append(\\\" />\\\"); [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] enforcedAttributes.put(tagName, attrMap); [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] if (hasAttr(attributeKey)) [LINE] public String attr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     if (hasAttr(attributeKey)) [EOL]         return attributes.get(attributeKey); [EOL]     else if (attributeKey.toLowerCase().startsWith(\\\"abs:\\\")) [EOL]         return absUrl(attributeKey.substring(\\\"abs:\\\".length())); [EOL]     else [EOL]         return \\\"\\\"; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] if (tq.matchChomp(\\\"=\\\")) [LINE] private Elements byAttribute() { [EOL]     String key = tq.consumeToAny(\\\"=\\\", \\\"!=\\\", \\\"^=\\\", \\\"$=\\\", \\\"*=\\\", \\\"]\\\"); [EOL]     Validate.notEmpty(key); [EOL]     if (tq.matchChomp(\\\"]\\\")) { [EOL]         return root.getElementsByAttribute(key); [EOL]     } else { [EOL]         if (tq.matchChomp(\\\"=\\\")) [EOL]             return root.getElementsByAttributeValue(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"!=\\\")) [EOL]             return root.getElementsByAttributeValueNot(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"^=\\\")) [EOL]             return root.getElementsByAttributeValueStarting(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"$=\\\")) [EOL]             return root.getElementsByAttributeValueEnding(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"*=\\\")) [EOL]             return root.getElementsByAttributeValueContaining(key, tq.chompTo(\\\"]\\\")); [EOL]         else [EOL]             throw new SelectorParseException(\\\"Could not parse attribute query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return Collections.unmodifiableList(childNodes); [LINE] public List<Node> childNodes() { [EOL]     return Collections.unmodifiableList(childNodes); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] Validate.notNull(attributeKey); [LINE] public Node removeAttr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     attributes.remove(attributeKey); [EOL]     return this; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return this; [LINE] public Element addClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public Element classNames(Set<String> classNames) { [LINE] public Element classNames(Set<String> classNames) { [EOL]     Validate.notNull(classNames); [EOL]     attributes.put(\\\"class\\\", StringUtils.join(classNames, \\\" \\\")); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void wrap() { [EOL]     String h = \\\"<p><b>This</b> is <b>jsoup</b></p>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\\\"b\\\").wrap(\\\"<i></i>\\\"); [EOL]     assertEquals(\\\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\\\", doc.body().html()); [EOL] }", "nl": "[LINE] return this; [LINE] public Elements wrap(String html) { [EOL]     Validate.notEmpty(html); [EOL]     for (Element element : contents) { [EOL]         element.wrap(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] static AttributeValue valueOf(String value) { [LINE] static AttributeValue valueOf(String value) { [EOL]     return new AttributeValue(value); [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return this; [LINE] public Elements addClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.addClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) { [LINE] Attributes getEnforcedAttributes(String tagName) { [EOL]     Attributes attrs = new Attributes(); [EOL]     TagName tag = TagName.valueOf(tagName); [EOL]     if (enforcedAttributes.containsKey(tag)) { [EOL]         Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag); [EOL]         for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) { [EOL]             attrs.put(entry.getKey().toString(), entry.getValue().toString()); [EOL]         } [EOL]     } [EOL]     return attrs; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] value = valueAccum.toString(); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void mixCombinatorGroup() { [EOL]     String h = \\\"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\".foo > ol, ol > li + li\\\"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals(\\\"ol\\\", els.get(0).tagName()); [EOL]     assertEquals(\\\"Two\\\", els.get(1).text()); [EOL]     assertEquals(\\\"Three\\\", els.get(2).text()); [EOL] }", "nl": "[LINE] while (!tq.isEmpty()) { [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] for (Node node : childNodes) { [LINE] public Elements children() { [EOL]     List<Element> elements = new ArrayList<Element>(); [EOL]     for (Node node : childNodes) { [EOL]         if (node instanceof Element) [EOL]             elements.add((Element) node); [EOL]     } [EOL]     return new Elements(elements); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] TextNode textNode = (TextNode) child; [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public String consumeWord() { [LINE] public String consumeWord() { [EOL]     StringBuilder wordAccum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && Character.isLetterOrDigit(queue.peek())) { [EOL]         wordAccum.append(queue.removeFirst()); [EOL]     } [EOL]     return wordAccum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] Validate.notNull(attribute); [LINE] public void put(Attribute attribute) { [EOL]     Validate.notNull(attribute); [EOL]     attributes.put(attribute.getKey(), attribute); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] this(Arrays.asList(elements)); [LINE] public Elements(Element... elements) { [EOL]     this(Arrays.asList(elements)); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return attributes.hasKey(attributeKey); [LINE] public boolean hasAttr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     return attributes.hasKey(attributeKey); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return this; [LINE] public Elements prepend(String html) { [EOL]     for (Element element : contents) { [EOL]         element.prepend(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] } else if (tq.matchesWord()) { [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void mixCombinatorGroup() { [EOL]     String h = \\\"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\".foo > ol, ol > li + li\\\"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals(\\\"ol\\\", els.get(0).tagName()); [EOL]     assertEquals(\\\"Two\\\", els.get(1).text()); [EOL]     assertEquals(\\\"Three\\\", els.get(2).text()); [EOL] }", "nl": "[LINE] String subQuery = tq.chompTo(\\\",\\\"); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public static Elements collect (Evaluator eval, Element root) { [LINE] public static Elements collect(Evaluator eval, Element root) { [EOL]     Elements elements = new Elements(); [EOL]     accumulateMatches(eval, elements, root); [EOL]     return elements; [EOL] } public static Elements collect(Evaluator eval, Element root); private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element)"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] if (!hasAttr(attributeKey)) { [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] List<Node> nodes = fragment.childNodes(); [LINE] public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] return this; [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/smh-biz-article-1.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\\\"); [EOL]     assertEquals(\\\"The board\u9225\u6a9a next fear: the female quota\\\", doc.title()); [EOL]     assertEquals(\\\"en\\\", doc.select(\\\"html\\\").attr(\\\"xml:lang\\\")); [EOL]     Elements articleBody = doc.select(\\\".articleBody > *\\\"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }", "nl": "[LINE] public DataNode(String data, String baseUri) { [LINE] public DataNode(String data, String baseUri) { [EOL]     super(baseUri); [EOL]     attributes.put(DATA_KEY, data); [EOL] } public DataNode(String data, String baseUri); public String nodeName(); public String getWholeData();  void outerHtml(StringBuilder accum); public String toString(); public static DataNode createFromEncoded(String encodedData, String baseUri); String DATA_KEY=Optional[\\\"data\\\"]"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return true; [LINE] public boolean matchesAny(String... seq) { [EOL]     for (String s : seq) { [EOL]         if (matches(s)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testElementSiblingIndex() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(0 == ps.get(0).elementSiblingIndex()); [EOL]     assertTrue(1 == ps.get(1).elementSiblingIndex()); [EOL]     assertTrue(2 == ps.get(2).elementSiblingIndex()); [EOL] }", "nl": "[LINE] return indexInList(this, parent().children()); [LINE] public Integer elementSiblingIndex() { [EOL]     if (parent() == null) [EOL]         return 0; [EOL]     return indexInList(this, parent().children()); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] appendChild(node); [LINE] public Element append(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     for (Node node : fragment.childNodes()) { [EOL]         node.parentNode = null; [EOL]         appendChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] Set<String> classes = classNames(); [LINE] public Element addClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] attributes.put(attribute.getKey(), attribute); [LINE] public void put(Attribute attribute) { [EOL]     Validate.notNull(attribute); [EOL]     attributes.put(attribute.getKey(), attribute); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\\\"two three\\\", p.text()); [EOL]     assertEquals(\\\"<span>two</span> three\\\", p.html()); [EOL] }", "nl": "[LINE] Validate.isTrue(out.parentNode == this); [LINE] protected void removeChild(Node out) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     int index = indexInList(out, childNodes); [EOL]     childNodes.remove(index); [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] if (classNames == null) { [LINE] public Set<String> classNames() { [EOL]     if (classNames == null) { [EOL]         String[] names = className().split(\\\"\\\\s+\\\"); [EOL]         classNames = new LinkedHashSet<String>(Arrays.asList(names)); [EOL]     } [EOL]     return classNames; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public String consumeCssIdentifier() { [LINE] public String consumeCssIdentifier() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     Character c = queue.peek(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) { [EOL]         accum.append(queue.removeFirst()); [EOL]         c = queue.peek(); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Validate.notNull(tag); [LINE] public Element(Tag tag, String baseUri, Attributes attributes) { [EOL]     super(baseUri, attributes); [EOL]     Validate.notNull(tag); [EOL]     this.tag = tag; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] html.appendElement(\\\"body\\\"); [LINE] static public Document createShell(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     Document doc = new Document(baseUri); [EOL]     Element html = doc.appendElement(\\\"html\\\"); [EOL]     html.appendElement(\\\"head\\\"); [EOL]     html.appendElement(\\\"body\\\"); [EOL]     return doc; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] } else if (tq.matchChomp(\\\":eq(\\\")) { [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] return siblings.get(index+1); [LINE] public Element nextElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     Integer index = indexInList(this, siblings); [EOL]     Validate.notNull(index); [EOL]     if (siblings.size() > index + 1) [EOL]         return siblings.get(index + 1); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return parse(html, baseUri); [LINE] public static Document parse(File in, String charsetName, String baseUri) throws IOException { [EOL]     String html = DataUtil.load(in, charsetName); [EOL]     return parse(html, baseUri); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] attributes.remove(attributeKey); [LINE] public Node removeAttr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     attributes.remove(attributeKey); [EOL]     return this; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\" \\\"); [EOL]         sb.append(element.text()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public Set<String> classNames() { [LINE] public Set<String> classNames() { [EOL]     if (classNames == null) { [EOL]         String[] names = className().split(\\\"\\\\s+\\\"); [EOL]         classNames = new LinkedHashSet<String>(Arrays.asList(names)); [EOL]     } [EOL]     return classNames; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] this.value = value.trim().toLowerCase(); [LINE] AttributeKeyPair(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value.trim().toLowerCase(); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [LINE] public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] elements.add((Element) node); [LINE] public Elements children() { [EOL]     List<Element> elements = new ArrayList<Element>(); [EOL]     for (Node node : childNodes) { [EOL]         if (node instanceof Element) [EOL]             elements.add((Element) node); [EOL]     } [EOL]     return new Elements(elements); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\\\"two three\\\", p.text()); [EOL]     assertEquals(\\\"<span>two</span> three\\\", p.html()); [EOL] }", "nl": "[LINE] public void remove() { [LINE] public void remove() { [EOL]     Validate.notNull(parentNode); [EOL]     parentNode.removeChild(this); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] element.html(html); [LINE] public Elements html(String html) { [EOL]     for (Element element : contents) { [EOL]         element.html(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \\\"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\\\"; [EOL]     Document doc = Jsoup.parse(h, \\\"http://foo/\\\"); [EOL]     assertEquals(\\\"http://bar\\\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\\\"a\\\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\\\"http://foo/\\\", anchors.get(0).baseUri()); [EOL]     assertEquals(\\\"http://foo/2/\\\", anchors.get(1).baseUri()); [EOL]     assertEquals(\\\"http://bar\\\", anchors.get(2).baseUri()); [EOL]     assertEquals(\\\"http://foo/1\\\", anchors.get(0).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://foo/2/3\\\", anchors.get(1).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://bar/4\\\", anchors.get(2).absUrl(\\\"href\\\")); [EOL] }", "nl": "[LINE] baseUri = href; [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] for (Node node: toMove) { [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] } else if (child instanceof Element) { [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void spanSemantics() { [EOL]     Tag span = Tag.valueOf(\\\"span\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     assertTrue(span.canContain(span)); [EOL]     assertFalse(span.canContain(p)); [EOL]     assertFalse(span.canContain(div)); [EOL] }", "nl": "[LINE] return false; [LINE] boolean canContain(Tag child) { [EOL]     Validate.notNull(child); [EOL]     if (child.isBlock && !this.canContainBlock) [EOL]         return false; [EOL]     if (!child.isBlock && !this.canContainInline) [EOL]         return false; [EOL]     if (this.optionalClosing && this.equals(child)) [EOL]         return false; [EOL]     if (this.empty || this.isData()) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"head\\\")) { [EOL]         if (child.tagName.equals(\\\"base\\\") || child.tagName.equals(\\\"script\\\") || child.tagName.equals(\\\"noscript\\\") || child.tagName.equals(\\\"link\\\") || child.tagName.equals(\\\"meta\\\") || child.tagName.equals(\\\"title\\\") || child.tagName.equals(\\\"style\\\") || child.tagName.equals(\\\"object\\\")) { [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (this.tagName.equals(\\\"dt\\\") && child.tagName.equals(\\\"dd\\\")) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"dd\\\") && child.tagName.equals(\\\"dt\\\")) [EOL]         return false; [EOL]     return true; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Tag tag() { [LINE] public Tag tag() { [EOL]     return tag; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] return true; [LINE] private boolean stackHasValidParent(Tag childTag) { [EOL]     if (stack.size() == 1 && childTag.equals(htmlTag)) [EOL]         return true; [EOL]     for (int i = stack.size() - 1; i >= 0; i--) { [EOL]         Element el = stack.get(i); [EOL]         Tag parent2 = el.tag(); [EOL]         if (parent2.isValidParent(childTag)) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse(\\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"); [EOL]     String classVal = doc.select(\\\"p\\\").attr(\\\"class\\\"); [EOL]     assertEquals(\\\"foo\\\", classVal); [EOL] }", "nl": "[LINE] return element.attr(attributeKey); [LINE] public String attr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasAttr(attributeKey)) [EOL]             return element.attr(attributeKey); [EOL]     } [EOL]     return \\\"\\\"; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] if (!found.equals(check)) [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] c = queue.peek(); [LINE] public String consumeCssIdentifier() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     Character c = queue.peek(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) { [EOL]         accum.append(queue.removeFirst()); [EOL]         c = queue.peek(); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public Elements toggleClass(String className) { [LINE] public Elements toggleClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.toggleClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] if (in.parentNode != null) [LINE] protected void replaceChild(Node out, Node in) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     Validate.notNull(in); [EOL]     if (in.parentNode != null) [EOL]         in.parentNode.removeChild(in); [EOL]     Integer index = indexInList(out, childNodes); [EOL]     childNodes.set(index, in); [EOL]     in.parentNode = this; [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] Elements children = new Elements(); [LINE] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.parent() != null && c.parent().equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return !queue.isEmpty() && Character.isWhitespace(queue.peek()); [LINE] public boolean matchesWhitespace() { [EOL]     return !queue.isEmpty() && Character.isWhitespace(queue.peek()); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] String data = readInputStream(inStream, charsetName); [LINE] static String load(File in, String charsetName) throws IOException { [EOL]     InputStream inStream = new FileInputStream(in); [EOL]     String data = readInputStream(inStream, charsetName); [EOL]     inStream.close(); [EOL]     return data; [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] super(index); [LINE] IndexEquals(int index) { [EOL]     super(index); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public List<Node> childNodes() { [LINE] public List<Node> childNodes() { [EOL]     return Collections.unmodifiableList(childNodes); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] return (id.equals(element.id())); [LINE] public boolean matches(Element element) { [EOL]     return (id.equals(element.id())); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void wrap() { [EOL]     String h = \\\"<p><b>This</b> is <b>jsoup</b></p>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\\\"b\\\").wrap(\\\"<i></i>\\\"); [EOL]     assertEquals(\\\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\\\", doc.body().html()); [EOL] }", "nl": "[LINE] element.wrap(html); [LINE] public Elements wrap(String html) { [EOL]     Validate.notEmpty(html); [EOL]     for (Element element : contents) { [EOL]         element.wrap(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\\\"<textarea>Hello</textarea>\\\"); [EOL]     Elements els = doc.select(\\\"textarea\\\"); [EOL]     assertEquals(\\\"Hello\\\", els.text()); [EOL]     assertEquals(\\\"Hello\\\", els.val()); [EOL] }", "nl": "[LINE] String data = tq.chompTo(\\\"</\\\" + tagName); [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return seen; [LINE] public boolean consumeWhitespace() { [EOL]     boolean seen = false; [EOL]     while (!queue.isEmpty() && Character.isWhitespace(queue.peek())) { [EOL]         consume(); [EOL]         seen = true; [EOL]     } [EOL]     return seen; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] for (Map.Entry<String, Attribute> entry : attributes.entrySet()) { [LINE] public List<Attribute> asList() { [EOL]     List<Attribute> list = new ArrayList<Attribute>(attributes.size()); [EOL]     for (Map.Entry<String, Attribute> entry : attributes.entrySet()) { [EOL]         list.add(entry.getValue()); [EOL]     } [EOL]     return Collections.unmodifiableList(list); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] return byId; [LINE] private Elements byId() { [EOL]     String id = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(id); [EOL]     Element found = root.getElementById(id); [EOL]     Elements byId = new Elements(); [EOL]     if (found != null) [EOL]         byId.add(found); [EOL]     return byId; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] public Comment(String data, String baseUri) { [LINE] public Comment(String data, String baseUri) { [EOL]     super(baseUri); [EOL]     attributes.put(COMMENT_KEY, data); [EOL] } public Comment(String data, String baseUri); public String nodeName(); public String getData();  void outerHtml(StringBuilder accum); public String toString(); String COMMENT_KEY=Optional[\\\"comment\\\"]"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] private Elements byId() { [LINE] private Elements byId() { [EOL]     String id = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(id); [EOL]     Element found = root.getElementById(id); [EOL]     Elements byId = new Elements(); [EOL]     if (found != null) [EOL]         byId.add(found); [EOL]     return byId; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] Tag (String tagName) { [LINE] Tag(String tagName) { [EOL]     this.tagName = tagName; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Iterator<Element> iterator() {return contents.iterator();} [LINE] public Iterator<Element> iterator() { [EOL]     return contents.iterator(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] for (String s : seq) { [LINE] public boolean matchesAny(String... seq) { [EOL]     for (String s : seq) { [EOL]         if (matches(s)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void normalisesEmptyDocument() { [EOL]     Document doc = Jsoup.parse(\\\"\\\"); [EOL]     assertEquals(\\\"<html><head></head><body></body></html>\\\", TextUtil.stripNewlines(doc.html())); [EOL] }", "nl": "[LINE] select(\\\"html\\\").first().appendElement(\\\"body\\\"); [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div>\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\\", doc.getElementsByTag(\\\"div\\\").get(0).html()); [EOL] }", "nl": "[LINE] return accum.toString().trim(); [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     html(accum); [EOL]     return accum.toString().trim(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] Validate.notNull(value); [LINE] public Attribute(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notNull(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] return siblings.size() > 1 ? siblings.get(0) : null; [LINE] public Element firstElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     return siblings.size() > 1 ? siblings.get(0) : null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element get(int index) {return contents.get(index);} [LINE] public Element get(int index) { [EOL]     return contents.get(index); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] boolean procInstr = firstChar.toString().equals(\\\"!\\\"); [LINE] private void parseXmlDecl() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     Character firstChar = tq.consume(); [EOL]     boolean procInstr = firstChar.toString().equals(\\\"!\\\"); [EOL]     String data = tq.chompTo(\\\">\\\"); [EOL]     XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr); [EOL]     last().appendChild(decl); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] List<Node> toMove = new ArrayList<Node>(); [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] for (Element p : parents) { [LINE] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse(\\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"); [EOL]     String classVal = doc.select(\\\"p\\\").attr(\\\"class\\\"); [EOL]     assertEquals(\\\"foo\\\", classVal); [EOL] }", "nl": "[LINE] public String attr(String attributeKey) { [LINE] public String attr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasAttr(attributeKey)) [EOL]             return element.attr(attributeKey); [EOL]     } [EOL]     return \\\"\\\"; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public Element toggleClass(String className) { [LINE] public Element toggleClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     if (classes.contains(className)) [EOL]         classes.remove(className); [EOL]     else [EOL]         classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public boolean matches(Element element) { [LINE] public boolean matches(Element element) { [EOL]     return (element.tagName().equals(tagName)); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return tag; [LINE] public Tag tag() { [EOL]     return tag; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] return children; [LINE] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.parent() != null && c.parent().equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] accumulateMatches(eval, elements, child); [LINE] private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element) { [EOL]     if (eval.matches(element)) [EOL]         elements.add(element); [EOL]     for (Element child : element.children()) accumulateMatches(eval, elements, child); [EOL] } public static Elements collect(Evaluator eval, Element root); private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element)"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] Element titleEl = getElementsByTag(\\\"title\\\").first(); [LINE] public void title(String title) { [EOL]     Validate.notNull(title); [EOL]     Element titleEl = getElementsByTag(\\\"title\\\").first(); [EOL]     if (titleEl == null) { [EOL]         head().appendElement(\\\"title\\\").text(title); [EOL]     } else { [EOL]         titleEl.text(title); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] return root.getElementsByIndexEquals(consumeIndex()); [LINE] private Elements indexEquals() { [EOL]     return root.getElementsByIndexEquals(consumeIndex()); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] canContainInline = false; [LINE] private Tag setContainDataOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] if (cPos > ePos) { [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return lastChar.equals(\\\" \\\"); [LINE] static boolean lastCharIsWhitespace(StringBuilder sb) { [EOL]     if (sb.length() == 0) [EOL]         return false; [EOL]     String lastChar = sb.substring(sb.length() - 1, sb.length()); [EOL]     Validate.isTrue(lastChar.length() == 1); [EOL]     return lastChar.equals(\\\" \\\"); [EOL] } public TextNode(String text, String baseUri); public String nodeName(); public String text(); public TextNode text(String text); public String getWholeText(); public boolean isBlank();  void outerHtml(StringBuilder accum); public String toString(); public static TextNode createFromEncoded(String encodedText, String baseUri);  static String normaliseWhitespace(String text);  static String stripLeadingWhitespace(String text);  static boolean lastCharIsWhitespace(StringBuilder sb); String TEXT_KEY=Optional[\\\"text\\\"]"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public Elements removeClass(String className) { [LINE] public Elements removeClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.removeClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Document doc = new Document(baseUri); [LINE] static public Document createShell(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     Document doc = new Document(baseUri); [EOL]     Element html = doc.appendElement(\\\"html\\\"); [EOL]     html.appendElement(\\\"head\\\"); [EOL]     html.appendElement(\\\"body\\\"); [EOL]     return doc; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] private void text(StringBuilder accum) { [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = \\\"<div id=1/><div id=2><img /></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById(\\\"1\\\"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }", "nl": "[LINE] tq.consume(); // unknown char, keep popping so not get stuck [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] numDiscarded++; [LINE] private int copySafeNodes(Element source, Element dest) { [EOL]     List<Node> sourceChildren = source.childNodes(); [EOL]     int numDiscarded = 0; [EOL]     for (Node sourceChild : sourceChildren) { [EOL]         if (sourceChild instanceof Element) { [EOL]             Element sourceEl = (Element) sourceChild; [EOL]             if (whitelist.isSafeTag(sourceEl.tagName())) { [EOL]                 ElementMeta meta = createSafeElement(sourceEl); [EOL]                 Element destChild = meta.el; [EOL]                 dest.appendChild(destChild); [EOL]                 numDiscarded += meta.numAttribsDiscarded; [EOL]                 numDiscarded += copySafeNodes(sourceEl, destChild); [EOL]             } else { [EOL]                 numDiscarded++; [EOL]                 numDiscarded += copySafeNodes(sourceEl, dest); [EOL]             } [EOL]         } else if (sourceChild instanceof TextNode) { [EOL]             TextNode sourceText = (TextNode) sourceChild; [EOL]             TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri()); [EOL]             dest.appendChild(destText); [EOL]         } [EOL]     } [EOL]     return numDiscarded; [EOL] } public Cleaner(Whitelist whitelist);  ElementMeta(Element el, int numAttribsDiscarded); public Document clean(Document dirtyDocument); public boolean isValid(Document dirtyDocument); private int copySafeNodes(Element source, Element dest); private ElementMeta createSafeElement(Element sourceEl); Whitelist whitelist"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] Tag inline = new Tag(tagName); [LINE] private static Tag createInline(String tagName) { [EOL]     Tag inline = new Tag(tagName); [EOL]     inline.isBlock = false; [EOL]     inline.canContainBlock = false; [EOL]     return register(inline); [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return wordAccum.toString(); [LINE] public String consumeWord() { [EOL]     StringBuilder wordAccum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && Character.isLetterOrDigit(queue.peek())) { [EOL]         wordAccum.append(queue.removeFirst()); [EOL]     } [EOL]     return wordAccum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] DataNode data = (DataNode) childNode; [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] private void addElements(Collection<Element> add) { [LINE] private void addElements(Collection<Element> add) { [EOL]     elements.addAll(add); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] return register(new Tag(tagName)); [LINE] private static Tag createBlock(String tagName) { [EOL]     return register(new Tag(tagName)); [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] canContainBlock = false; [LINE] private Tag setContainInlineOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] Validate.notEmpty(attributeKey); [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] return data.toString(); [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag(\\\"div\\\"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals(\\\"div1\\\", divs.get(0).id()); [EOL]     assertEquals(\\\"div2\\\", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag(\\\"p\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"Hello\\\", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals(\\\"Another \\\", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag(\\\"P\\\"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag(\\\"img\\\"); [EOL]     assertEquals(\\\"foo.png\\\", imgs.get(0).attr(\\\"src\\\")); [EOL]     List<Element> empty = doc.getElementsByTag(\\\"wtf\\\"); [EOL]     assertEquals(0, empty.size()); [EOL] }", "nl": "[LINE] public boolean equals(Object o) {return contents.equals(o);} [LINE] public boolean equals(Object o) { [EOL]     return contents.equals(o); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] elements.add(element); [LINE] private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element) { [EOL]     if (eval.matches(element)) [EOL]         elements.add(element); [EOL]     for (Element child : element.children()) accumulateMatches(eval, elements, child); [EOL] } public static Elements collect(Evaluator eval, Element root); private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element)"}
{"code": "@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\\\"); [EOL]     assertEquals(\\\"<html><head></head><body><div title=\\\\\"Tags &amp;c.\\\\\"><img src=\\\\\"foo.png\\\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\\\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }", "nl": "[LINE] void outerHtml(StringBuilder accum) { [LINE] void outerHtml(StringBuilder accum) { [EOL]     indent(accum); [EOL]     accum.append(String.format(\\\"<!--%s-->\\\", getData())); [EOL] } public Comment(String data, String baseUri); public String nodeName(); public String getData();  void outerHtml(StringBuilder accum); public String toString(); String COMMENT_KEY=Optional[\\\"comment\\\"]"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return accum.toString(); [LINE] public String consumeToAny(String... seq) { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && !matchesAny(seq)) accum.append(consume()); [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] private Selector(String query, Element root) { [LINE] private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] void outerHtml(StringBuilder accum) { [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] for (int i = 0; i < len; i++) { [LINE] public void consume(String seq) { [EOL]     if (!matches(seq)) [EOL]         throw new IllegalStateException(\\\"Queue did not match expected sequence\\\"); [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         throw new IllegalStateException(\\\"Queue not long enough to consume sequence\\\"); [EOL]     for (int i = 0; i < len; i++) { [EOL]         consume(); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] @Override [LINE] @Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     if (!(o instanceof Element)) [EOL]         return false; [EOL]     if (!super.equals(o)) [EOL]         return false; [EOL]     Element element = (Element) o; [EOL]     if (tag != null ? !tag.equals(element.tag) : element.tag != null) [EOL]         return false; [EOL]     return true; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] return Collector.collect(new Evaluator.IndexEquals(index), this); [LINE] public Elements getElementsByIndexEquals(int index) { [EOL]     return Collector.collect(new Evaluator.IndexEquals(index), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] String tagName = tq.consumeWord(); [LINE] private Elements byTag() { [EOL]     String tagName = tq.consumeWord(); [EOL]     Validate.notEmpty(tagName); [EOL]     return root.getElementsByTag(tagName); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] if (tq.matchChomp(\\\"#\\\")) { [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] public String attr(String attributeKey) { [LINE] public String attr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     if (hasAttr(attributeKey)) [EOL]         return attributes.get(attributeKey); [EOL]     else if (attributeKey.toLowerCase().startsWith(\\\"abs:\\\")) [EOL]         return absUrl(attributeKey.substring(\\\"abs:\\\".length())); [EOL]     else [EOL]         return \\\"\\\"; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testGetElementById() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     Element div = doc.getElementById(\\\"div1\\\"); [EOL]     assertEquals(\\\"div1\\\", div.id()); [EOL]     assertNull(doc.getElementById(\\\"none\\\")); [EOL]     Document doc2 = Jsoup.parse(\\\"<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>\\\"); [EOL]     Element div2 = doc2.getElementById(\\\"2\\\"); [EOL]     assertEquals(\\\"div\\\", div2.tagName()); [EOL]     Element span = div2.child(0).getElementById(\\\"2\\\"); [EOL]     assertEquals(\\\"span\\\", span.tagName()); [EOL] }", "nl": "[LINE] return null; [LINE] public Element getElementById(String id) { [EOL]     Validate.notEmpty(id); [EOL]     Elements elements = Collector.collect(new Evaluator.Id(id), this); [EOL]     if (elements.size() > 0) [EOL]         return elements.get(0); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] if (child instanceof TextNode) { [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\\\"two three\\\", p.text()); [EOL]     assertEquals(\\\"<span>two</span> three\\\", p.html()); [EOL] }", "nl": "[LINE] parentNode.removeChild(this); [LINE] public void remove() { [EOL]     Validate.notNull(parentNode); [EOL]     parentNode.removeChild(this); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this); [LINE] public Elements getElementsByAttributeValueContaining(String key, String match) { [EOL]     return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] while (!queue.isEmpty() && Character.isLetterOrDigit(queue.peek())) { [LINE] public String consumeWord() { [EOL]     StringBuilder wordAccum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && Character.isLetterOrDigit(queue.peek())) { [EOL]         wordAccum.append(queue.removeFirst()); [EOL]     } [EOL]     return wordAccum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public Element removeClass(String className) { [LINE] public Element removeClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.remove(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] append(html); [LINE] public Element html(String html) { [EOL]     empty(); [EOL]     append(html); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] public String html() { [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     for (Attribute attribute : this) { [EOL]         accum.append(\\\" \\\"); [EOL]         accum.append(attribute.html()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] public void title(String title) { [LINE] public void title(String title) { [EOL]     Validate.notNull(title); [EOL]     Element titleEl = getElementsByTag(\\\"title\\\").first(); [EOL]     if (titleEl == null) { [EOL]         head().appendElement(\\\"title\\\").text(title); [EOL]     } else { [EOL]         titleEl.text(title); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return elements; [LINE] public static Elements collect(Evaluator eval, Element root) { [EOL]     Elements elements = new Elements(); [EOL]     accumulateMatches(eval, elements, root); [EOL]     return elements; [EOL] } public static Elements collect(Evaluator eval, Element root); private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element)"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] do { [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] if (contents.size() > index) [LINE] public Elements eq(int index) { [EOL]     if (contents.size() > index) [EOL]         return new Elements(get(index)); [EOL]     else [EOL]         return new Elements(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] if (node.equals(search)) [LINE] protected static <N extends Node> Integer indexInList(N search, List<N> nodes) { [EOL]     Validate.notNull(search); [EOL]     Validate.notNull(nodes); [EOL]     for (int i = 0; i < nodes.size(); i++) { [EOL]         N node = nodes.get(i); [EOL]         if (node.equals(search)) [EOL]             return i; [EOL]     } [EOL]     return null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse(\\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"); [EOL]     String classVal = doc.select(\\\"p\\\").attr(\\\"class\\\"); [EOL]     assertEquals(\\\"foo\\\", classVal); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public String attr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasAttr(attributeKey)) [EOL]             return element.attr(attributeKey); [EOL]     } [EOL]     return \\\"\\\"; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] return register(inline); [LINE] private static Tag createInline(String tagName) { [EOL]     Tag inline = new Tag(tagName); [EOL]     inline.isBlock = false; [EOL]     inline.canContainBlock = false; [EOL]     return register(inline); [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public TokenQueue(String data) { [LINE] public TokenQueue(String data) { [EOL]     Validate.notNull(data); [EOL]     queue = new LinkedList<Character>(); [EOL]     char[] chars = data.toCharArray(); [EOL]     for (char c : chars) { [EOL]         queue.add(c); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] if (element.hasClass(className)) [LINE] public boolean hasClass(String className) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasClass(className)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] return Collections.unmodifiableList(list); [LINE] public List<Attribute> asList() { [EOL]     List<Attribute> list = new ArrayList<Attribute>(attributes.size()); [EOL]     for (Map.Entry<String, Attribute> entry : attributes.entrySet()) { [EOL]         list.add(entry.getValue()); [EOL]     } [EOL]     return Collections.unmodifiableList(list); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return accum.toString(); [LINE] public String consumeCssIdentifier() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     Character c = queue.peek(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) { [EOL]         accum.append(queue.removeFirst()); [EOL]         c = queue.peek(); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\n<p>There</p>\\\", divs.html()); [EOL] }", "nl": "[LINE] return sb.toString(); [LINE] public String html() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.html()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] Validate.notNull(data); [LINE] public TokenQueue(String data) { [EOL]     Validate.notNull(data); [EOL]     queue = new LinkedList<Character>(); [EOL]     char[] chars = data.toCharArray(); [EOL]     for (char c : chars) { [EOL]         queue.add(c); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Validate.notNull(html); [LINE] public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] else if (combinator.equals(\\\"~\\\")) [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] } else if (tq.matchesAny(combinators)) { [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] children.add(c); [LINE] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \\\"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\\\"; [EOL]     Document doc = Jsoup.parse(h, \\\"http://foo/\\\"); [EOL]     assertEquals(\\\"http://bar\\\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\\\"a\\\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\\\"http://foo/\\\", anchors.get(0).baseUri()); [EOL]     assertEquals(\\\"http://foo/2/\\\", anchors.get(1).baseUri()); [EOL]     assertEquals(\\\"http://bar\\\", anchors.get(2).baseUri()); [EOL]     assertEquals(\\\"http://foo/1\\\", anchors.get(0).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://foo/2/3\\\", anchors.get(1).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://bar/4\\\", anchors.get(2).absUrl(\\\"href\\\")); [EOL] }", "nl": "[LINE] doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] private Tag setPreserveWhitespace() { [LINE] private Tag setPreserveWhitespace() { [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] if (tq.matchChomp(\\\"]\\\")) { [LINE] private Elements byAttribute() { [EOL]     String key = tq.consumeToAny(\\\"=\\\", \\\"!=\\\", \\\"^=\\\", \\\"$=\\\", \\\"*=\\\", \\\"]\\\"); [EOL]     Validate.notEmpty(key); [EOL]     if (tq.matchChomp(\\\"]\\\")) { [EOL]         return root.getElementsByAttribute(key); [EOL]     } else { [EOL]         if (tq.matchChomp(\\\"=\\\")) [EOL]             return root.getElementsByAttributeValue(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"!=\\\")) [EOL]             return root.getElementsByAttributeValueNot(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"^=\\\")) [EOL]             return root.getElementsByAttributeValueStarting(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"$=\\\")) [EOL]             return root.getElementsByAttributeValueEnding(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"*=\\\")) [EOL]             return root.getElementsByAttributeValueContaining(key, tq.chompTo(\\\"]\\\")); [EOL]         else [EOL]             throw new SelectorParseException(\\\"Could not parse attribute query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setTextPreservesDocumentStructure() { [EOL]     Document doc = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     doc.text(\\\"Replaced\\\"); [EOL]     assertEquals(\\\"Replaced\\\", doc.text()); [EOL]     assertEquals(\\\"Replaced\\\", doc.body().text()); [EOL]     assertEquals(1, doc.select(\\\"head\\\").size()); [EOL] }", "nl": "[LINE] body().text(text); // overridden to not nuke doc structure [LINE] @Override [EOL] public Element text(String text) { [EOL]     body().text(text); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] Integer index = indexInList(out, childNodes); [LINE] protected void replaceChild(Node out, Node in) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     Validate.notNull(in); [EOL]     if (in.parentNode != null) [EOL]         in.parentNode.removeChild(in); [EOL]     Integer index = indexInList(out, childNodes); [EOL]     childNodes.set(index, in); [EOL]     in.parentNode = this; [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] classNames(classes); [LINE] public Element toggleClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     if (classes.contains(className)) [EOL]         classes.remove(className); [EOL]     else [EOL]         classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] Document dirty = parseBodyFragment(bodyHtml, \\\"\\\"); [LINE] public static boolean isValid(String bodyHtml, Whitelist whitelist) { [EOL]     Document dirty = parseBodyFragment(bodyHtml, \\\"\\\"); [EOL]     Cleaner cleaner = new Cleaner(whitelist); [EOL]     return cleaner.isValid(dirty); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] destAttrs.put(sourceAttr); [LINE] private ElementMeta createSafeElement(Element sourceEl) { [EOL]     String sourceTag = sourceEl.tagName(); [EOL]     Attributes destAttrs = new Attributes(); [EOL]     Element dest = new Element(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs); [EOL]     int numDiscarded = 0; [EOL]     Attributes sourceAttrs = sourceEl.attributes(); [EOL]     for (Attribute sourceAttr : sourceAttrs) { [EOL]         if (whitelist.isSafeAttribute(sourceTag, sourceEl, sourceAttr)) [EOL]             destAttrs.put(sourceAttr); [EOL]         else [EOL]             numDiscarded++; [EOL]     } [EOL]     Attributes enforcedAttrs = whitelist.getEnforcedAttributes(sourceTag); [EOL]     destAttrs.addAll(enforcedAttrs); [EOL]     return new ElementMeta(dest, numDiscarded); [EOL] } public Cleaner(Whitelist whitelist);  ElementMeta(Element el, int numAttribsDiscarded); public Document clean(Document dirtyDocument); public boolean isValid(Document dirtyDocument); private int copySafeNodes(Element source, Element dest); private ElementMeta createSafeElement(Element sourceEl); Whitelist whitelist"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] wordAccum.append(queue.removeFirst()); [LINE] public String consumeWord() { [EOL]     StringBuilder wordAccum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && Character.isLetterOrDigit(queue.peek())) { [EOL]         wordAccum.append(queue.removeFirst()); [EOL]     } [EOL]     return wordAccum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element append(String html) { [LINE] public Element append(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     for (Node node : fragment.childNodes()) { [EOL]         node.parentNode = null; [EOL]         appendChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return false; [LINE] boolean canContain(Tag child) { [EOL]     Validate.notNull(child); [EOL]     if (child.isBlock && !this.canContainBlock) [EOL]         return false; [EOL]     if (!child.isBlock && !this.canContainInline) [EOL]         return false; [EOL]     if (this.optionalClosing && this.equals(child)) [EOL]         return false; [EOL]     if (this.empty || this.isData()) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"head\\\")) { [EOL]         if (child.tagName.equals(\\\"base\\\") || child.tagName.equals(\\\"script\\\") || child.tagName.equals(\\\"noscript\\\") || child.tagName.equals(\\\"link\\\") || child.tagName.equals(\\\"meta\\\") || child.tagName.equals(\\\"title\\\") || child.tagName.equals(\\\"style\\\") || child.tagName.equals(\\\"object\\\")) { [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (this.tagName.equals(\\\"dt\\\") && child.tagName.equals(\\\"dd\\\")) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"dd\\\") && child.tagName.equals(\\\"dt\\\")) [EOL]         return false; [EOL]     return true; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public static Document parse(String html) { [LINE] public static Document parse(String html) { [EOL]     return Parser.parse(html, \\\"\\\"); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] public static Document parseBodyFragment(String bodyHtml, String baseUri) { [LINE] public static Document parseBodyFragment(String bodyHtml, String baseUri) { [EOL]     return Parser.parseBodyFragment(bodyHtml, baseUri); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] for (Attribute attribute : this) { [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     for (Attribute attribute : this) { [EOL]         accum.append(\\\" \\\"); [EOL]         accum.append(attribute.html()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] String className = tq.consumeCssIdentifier(); [LINE] private Elements byClass() { [EOL]     String className = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(className); [EOL]     return root.getElementsByClass(className); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.prependText(\\\"there & now > \\\"); [EOL]     assertEquals(\\\"there & now > Hello\\\", div.text()); [EOL]     assertEquals(\\\"there &amp; now &gt; <p>Hello</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] prependChild(node); [LINE] public Element prependText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     prependChild(node); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] result = 31 * result + (tag != null ? tag.hashCode() : 0); [LINE] @Override [EOL] public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     result = 31 * result + (tag != null ? tag.hashCode() : 0); [EOL]     return result; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] super(key, value); [LINE] AttributeWithValue(String key, String value) { [EOL]     super(key, value); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return consumeToAny(seq); [LINE] public String consumeTo(String seq) { [EOL]     return consumeToAny(seq); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] InputStream inStream = new FileInputStream(in); [LINE] static String load(File in, String charsetName) throws IOException { [EOL]     InputStream inStream = new FileInputStream(in); [EOL]     String data = readInputStream(inStream, charsetName); [EOL]     inStream.close(); [EOL]     return data; [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] String text = textNode.getWholeText(); [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] public boolean isBlock() { [LINE] public boolean isBlock() { [EOL]     return isBlock; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] if (classes.contains(className)) [LINE] public Element toggleClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     if (classes.contains(className)) [EOL]         classes.remove(className); [EOL]     else [EOL]         classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] Element element = (Element) childNode; [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] return asList().iterator(); [LINE] public Iterator<Attribute> iterator() { [EOL]     return asList().iterator(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] Validate.notNull(className); [LINE] public Element addClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] List<Element> elements = new ArrayList<Element>(); [LINE] public Elements children() { [EOL]     List<Element> elements = new ArrayList<Element>(); [EOL]     for (Node node : childNodes) { [EOL]         if (node instanceof Element) [EOL]             elements.add((Element) node); [EOL]     } [EOL]     return new Elements(elements); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] tq.consumeWhitespace(); [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div>\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\\", doc.getElementsByTag(\\\"div\\\").get(0).html()); [EOL] }", "nl": "[LINE] StringBuilder accum = new StringBuilder(); [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     html(accum); [EOL]     return accum.toString().trim(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(ps.hasAttr(\\\"class\\\")); [EOL]     assertFalse(ps.hasAttr(\\\"style\\\")); [EOL] }", "nl": "[LINE] return false; [LINE] public boolean hasAttr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasAttr(attributeKey)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] public static Document parseBodyFragment(String bodyHtml, String baseUri) { [LINE] public static Document parseBodyFragment(String bodyHtml, String baseUri) { [EOL]     Parser parser = new Parser(bodyHtml, baseUri, true); [EOL]     return parser.parse(); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] private Tag setContainInlineOnly() { [LINE] private Tag setContainInlineOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] public boolean hasKey(String key) { [LINE] public boolean hasKey(String key) { [EOL]     return attributes.containsKey(key.toLowerCase()); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] return Parser.parseBodyFragment(bodyHtml, \\\"\\\"); [LINE] public static Document parseBodyFragment(String bodyHtml) { [EOL]     return Parser.parseBodyFragment(bodyHtml, \\\"\\\"); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse(\\\"<textarea>Hello</textarea>\\\"); [EOL]     Elements els = doc.select(\\\"textarea\\\"); [EOL]     assertEquals(\\\"Hello\\\", els.text()); [EOL]     assertEquals(\\\"Hello\\\", els.val()); [EOL] }", "nl": "[LINE] tq.chompTo(\\\">\\\"); [LINE] private void parseStartTag() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     String tagName = tq.consumeWord(); [EOL]     if (tagName.length() == 0) { [EOL]         tq.addFirst(\\\"&lt;\\\"); [EOL]         parseTextNode(); [EOL]         return; [EOL]     } [EOL]     Attributes attributes = new Attributes(); [EOL]     while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.isEmpty()) { [EOL]         Attribute attribute = parseAttribute(); [EOL]         if (attribute != null) [EOL]             attributes.put(attribute); [EOL]     } [EOL]     Tag tag = Tag.valueOf(tagName); [EOL]     Element child = new Element(tag, baseUri, attributes); [EOL]     boolean isEmptyElement = tag.isEmpty(); [EOL]     if (tq.matchChomp(\\\"/>\\\")) { [EOL]         isEmptyElement = true; [EOL]     } else { [EOL]         tq.matchChomp(\\\">\\\"); [EOL]     } [EOL]     if (tag.isData()) { [EOL]         String data = tq.chompTo(\\\"</\\\" + tagName); [EOL]         tq.chompTo(\\\">\\\"); [EOL]         Node dataNode; [EOL]         if (tag.equals(titleTag) || tag.equals(textareaTag)) [EOL]             dataNode = TextNode.createFromEncoded(data, baseUri); [EOL]         else [EOL]             dataNode = new DataNode(data, baseUri); [EOL]         child.appendChild(dataNode); [EOL]     } [EOL]     if (child.tagName().equals(\\\"base\\\")) { [EOL]         String href = child.absUrl(\\\"href\\\"); [EOL]         if (href.length() != 0) { [EOL]             baseUri = href; [EOL]             doc.setBaseUri(href); [EOL]         } [EOL]     } [EOL]     addChildToParent(child, isEmptyElement); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] public Document normalise() { [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] return true; [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] appendChild(child); [LINE] public Element appendElement(String tagName) { [EOL]     Element child = new Element(Tag.valueOf(tagName), baseUri()); [EOL]     appendChild(child); [EOL]     return child; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesCdata() { [EOL]     String h = \\\"<div id=1><![CData[<html>\\n<foo><&amp;]]></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"<html> <foo><&amp;\\\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }", "nl": "[LINE] TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape [LINE] private void parseCdata() { [EOL]     tq.consume(\\\"<![CDATA[\\\"); [EOL]     String rawText = tq.chompTo(\\\"]]>\\\"); [EOL]     TextNode textNode = new TextNode(rawText, baseUri); [EOL]     last().appendChild(textNode); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] public Element firstElementSibling() { [LINE] public Element firstElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     return siblings.size() > 1 ? siblings.get(0) : null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] return new Elements(elements); [LINE] public static Elements select(String query, Iterable<Element> roots) { [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(roots); [EOL]     LinkedHashSet<Element> elements = new LinkedHashSet<Element>(); [EOL]     for (Element root : roots) { [EOL]         elements.addAll(select(query, root)); [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] StringBuilder sb = new StringBuilder(); [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\" \\\"); [EOL]         sb.append(element.text()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.appendText(\\\" there & now >\\\"); [EOL]     assertEquals(\\\"<p>Hello</p> there &amp; now &gt;\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] appendChild(node); [LINE] public Element appendText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     appendChild(node); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] StringBuilder wordAccum = new StringBuilder(); [LINE] public String consumeWord() { [EOL]     StringBuilder wordAccum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && Character.isLetterOrDigit(queue.peek())) { [EOL]         wordAccum.append(queue.removeFirst()); [EOL]     } [EOL]     return wordAccum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] return children; [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(ps.hasAttr(\\\"class\\\")); [EOL]     assertFalse(ps.hasAttr(\\\"style\\\")); [EOL] }", "nl": "[LINE] return true; [LINE] public boolean hasAttr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasAttr(attributeKey)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] if (tq.matchChomp(\\\"=\\\")) { [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void filter() { [EOL]     String h = \\\"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\".headline\\\").select(\\\"p\\\"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals(\\\"Hello\\\", els.get(0).text()); [EOL]     assertEquals(\\\"There\\\", els.get(1).text()); [EOL] }", "nl": "[LINE] return Collector.collect(new Evaluator.Class(className), this); [LINE] public Elements getElementsByClass(String className) { [EOL]     Validate.notEmpty(className); [EOL]     return Collector.collect(new Evaluator.Class(className), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] preserveWhitespace = true; [LINE] private Tag setContainDataOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public Elements html(String html) { [EOL]     for (Element element : contents) { [EOL]         element.html(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] Validate.notEmpty(key); [LINE] AttributeKeyPair(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value.trim().toLowerCase(); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] if (select(\\\"html\\\").isEmpty()) [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public Elements removeAttr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         element.removeAttr(attributeKey); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public boolean add(Element element) {return contents.add(element);} [LINE] public boolean add(Element element) { [EOL]     return contents.add(element); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] String html = DataUtil.load(in, charsetName); [LINE] public static Document parse(File in, String charsetName, String baseUri) throws IOException { [EOL]     String html = DataUtil.load(in, charsetName); [EOL]     return parse(html, baseUri); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] return this; [LINE] private Tag setContainDataOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] private void intersectElements(Collection<Element> intersect) { [LINE] private void intersectElements(Collection<Element> intersect) { [EOL]     elements.retainAll(intersect); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse(\\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"); [EOL]     String classVal = doc.select(\\\"p\\\").attr(\\\"class\\\"); [EOL]     assertEquals(\\\"foo\\\", classVal); [EOL] }", "nl": "[LINE] if (element.hasAttr(attributeKey)) [LINE] public String attr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasAttr(attributeKey)) [EOL]             return element.attr(attributeKey); [EOL]     } [EOL]     return \\\"\\\"; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Elements html(String html) { [LINE] public Elements html(String html) { [EOL]     for (Element element : contents) { [EOL]         element.html(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] query = query.trim(); [LINE] private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] return cleaner.isValid(dirty); [LINE] public static boolean isValid(String bodyHtml, Whitelist whitelist) { [EOL]     Document dirty = parseBodyFragment(bodyHtml, \\\"\\\"); [EOL]     Cleaner cleaner = new Cleaner(whitelist); [EOL]     return cleaner.isValid(dirty); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] if (enforcedAttributes.containsKey(tagName)) { [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testSupportsLeadingCombinator() { [EOL]     String h = \\\"<div><p><span>One</span><span>Two</span></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element p = doc.select(\\\"div > p\\\").first(); [EOL]     Elements spans = p.select(\\\"> span\\\"); [EOL]     assertEquals(2, spans.size()); [EOL]     assertEquals(\\\"One\\\", spans.first().text()); [EOL]     h = \\\"<div id=1><div id=2><div id=3></div></div></div>\\\"; [EOL]     doc = Jsoup.parse(h); [EOL]     Element div = doc.select(\\\"div\\\").select(\\\" > div\\\").first(); [EOL]     assertEquals(\\\"2\\\", div.id()); [EOL] }", "nl": "[LINE] combinator(tq.consume().toString()); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] private void parseXmlDecl() { [LINE] private void parseXmlDecl() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     Character firstChar = tq.consume(); [EOL]     boolean procInstr = firstChar.toString().equals(\\\"!\\\"); [EOL]     String data = tq.chompTo(\\\">\\\"); [EOL]     XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr); [EOL]     last().appendChild(decl); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return tag.isBlock(); [LINE] public boolean isBlock() { [EOL]     return tag.isBlock(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] list.add(entry.getValue()); [LINE] public List<Attribute> asList() { [EOL]     List<Attribute> list = new ArrayList<Attribute>(attributes.size()); [EOL]     for (Map.Entry<String, Attribute> entry : attributes.entrySet()) { [EOL]         list.add(entry.getValue()); [EOL]     } [EOL]     return Collections.unmodifiableList(list); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] if (childNodes.isEmpty() && tag.isEmpty()) { [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return text.replaceFirst(\\\"^\\\\s+\\\", \\\"\\\"); [LINE] static String stripLeadingWhitespace(String text) { [EOL]     return text.replaceFirst(\\\"^\\\\s+\\\", \\\"\\\"); [EOL] } public TextNode(String text, String baseUri); public String nodeName(); public String text(); public TextNode text(String text); public String getWholeText(); public boolean isBlank();  void outerHtml(StringBuilder accum); public String toString(); public static TextNode createFromEncoded(String encodedText, String baseUri);  static String normaliseWhitespace(String text);  static String stripLeadingWhitespace(String text);  static boolean lastCharIsWhitespace(StringBuilder sb); String TEXT_KEY=Optional[\\\"text\\\"]"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] for (Node node : fragment.childNodes()) { [LINE] public Element append(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     for (Node node : fragment.childNodes()) { [EOL]         node.parentNode = null; [EOL]         appendChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.prependText(\\\"there & now > \\\"); [EOL]     assertEquals(\\\"there & now > Hello\\\", div.text()); [EOL]     assertEquals(\\\"there &amp; now &gt; <p>Hello</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] public Element prependText(String text) { [LINE] public Element prependText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     prependChild(node); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return new Elements(elements); [LINE] public Elements children() { [EOL]     List<Element> elements = new ArrayList<Element>(); [EOL]     for (Node node : childNodes) { [EOL]         if (node instanceof Element) [EOL]             elements.add((Element) node); [EOL]     } [EOL]     return new Elements(elements); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] canContainInline = true; [LINE] private Tag setContainInlineOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] return canContainBlock; [LINE] public boolean canContainBlock() { [EOL]     return canContainBlock; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] boolean seen = false; [LINE] public boolean consumeWhitespace() { [EOL]     boolean seen = false; [EOL]     while (!queue.isEmpty() && Character.isWhitespace(queue.peek())) { [EOL]         consume(); [EOL]         seen = true; [EOL]     } [EOL]     return seen; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] return root.getElementsByTag(tagName); [LINE] private Elements byTag() { [EOL]     String tagName = tq.consumeWord(); [EOL]     Validate.notEmpty(tagName); [EOL]     return root.getElementsByTag(tagName); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] node.parentNode = null; [LINE] public Element append(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     for (Node node : fragment.childNodes()) { [EOL]         node.parentNode = null; [EOL]         appendChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return queue.isEmpty(); [LINE] public boolean isEmpty() { [EOL]     return queue.isEmpty(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Elements() { [LINE] public Elements() { [EOL]     contents = new ArrayList<Element>(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] return attributes.get(COMMENT_KEY); [LINE] public String getData() { [EOL]     return attributes.get(COMMENT_KEY); [EOL] } public Comment(String data, String baseUri); public String nodeName(); public String getData();  void outerHtml(StringBuilder accum); public String toString(); String COMMENT_KEY=Optional[\\\"comment\\\"]"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] read = inReader.read(buffer, 0, buffer.length); [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element appendElement(String tagName) { [LINE] public Element appendElement(String tagName) { [EOL]     Element child = new Element(Tag.valueOf(tagName), baseUri()); [EOL]     appendChild(child); [EOL]     return child; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] intersectElements(filterForSelf(elements, candidates)); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void emptyOnNoKey() { [EOL]     String html = \\\"<a =empty />\\\"; [EOL]     Element el = Jsoup.parse(html).getElementsByTag(\\\"a\\\").get(0); [EOL]     Attributes attr = el.attributes(); [EOL]     assertEquals(0, attr.size()); [EOL] }", "nl": "[LINE] public int size() { [LINE] public int size() { [EOL]     return attributes.size(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] return this; [LINE] public Node removeAttr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     attributes.remove(attributeKey); [EOL]     return this; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] for (int i = nodes.size() - 1; i >= 0; i--) { [LINE] public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] return new Elements(elements); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] return true; [LINE] @Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     if (o == null || getClass() != o.getClass()) [EOL]         return false; [EOL]     Tag tag = (Tag) o; [EOL]     if (canContainBlock != tag.canContainBlock) [EOL]         return false; [EOL]     if (canContainInline != tag.canContainInline) [EOL]         return false; [EOL]     if (empty != tag.empty) [EOL]         return false; [EOL]     if (isBlock != tag.isBlock) [EOL]         return false; [EOL]     if (optionalClosing != tag.optionalClosing) [EOL]         return false; [EOL]     if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) [EOL]         return false; [EOL]     return true; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] accum.append(consume()); [LINE] public String consumeToAny(String... seq) { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && !matchesAny(seq)) accum.append(consume()); [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] return new Whitelist() [LINE] public static Whitelist basic() { [EOL]     return new Whitelist().addTags(\\\"a\\\", \\\"b\\\", \\\"blockquote\\\", \\\"br\\\", \\\"cite\\\", \\\"code\\\", \\\"dd\\\", \\\"dl\\\", \\\"dt\\\", \\\"em\\\", \\\"i\\\", \\\"li\\\", \\\"ol\\\", \\\"p\\\", \\\"pre\\\", \\\"q\\\", \\\"small\\\", \\\"strike\\\", \\\"strong\\\", \\\"sub\\\", \\\"sup\\\", \\\"u\\\", \\\"ul\\\").addAttributes(\\\"a\\\", \\\"href\\\").addAttributes(\\\"blockquote\\\", \\\"cite\\\").addAttributes(\\\"q\\\", \\\"cite\\\").addProtocols(\\\"a\\\", \\\"href\\\", \\\"ftp\\\", \\\"http\\\", \\\"https\\\", \\\"mailto\\\").addProtocols(\\\"blockquote\\\", \\\"cite\\\", \\\"http\\\", \\\"https\\\").addProtocols(\\\"cite\\\", \\\"cite\\\", \\\"http\\\", \\\"https\\\").addEnforcedAttribute(\\\"a\\\", \\\"rel\\\", \\\"nofollow\\\"); [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] return data; [LINE] static String load(File in, String charsetName) throws IOException { [EOL]     InputStream inStream = new FileInputStream(in); [EOL]     String data = readInputStream(inStream, charsetName); [EOL]     inStream.close(); [EOL]     return data; [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] public List<Attribute> asList() { [LINE] public List<Attribute> asList() { [EOL]     List<Attribute> list = new ArrayList<Attribute>(attributes.size()); [EOL]     for (Map.Entry<String, Attribute> entry : attributes.entrySet()) { [EOL]         list.add(entry.getValue()); [EOL]     } [EOL]     return Collections.unmodifiableList(list); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] if (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] this.elements = new LinkedHashSet<Element>(); [LINE] private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public String consumeTo(String seq) { [LINE] public String consumeTo(String seq) { [EOL]     return consumeToAny(seq); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\\\"a\\\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\\\"relHref\\\", \\\"/foo\\\"); [EOL]     attribs.put(\\\"absHref\\\", \\\"http://bar/qux\\\"); [EOL]     Element noBase = new Element(tag, \\\"\\\", attribs); [EOL]     assertEquals(\\\"\\\", noBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", noBase.absUrl(\\\"absHref\\\")); [EOL]     Element withBase = new Element(tag, \\\"http://foo/\\\", attribs); [EOL]     assertEquals(\\\"http://foo/foo\\\", withBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", withBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", withBase.absUrl(\\\"noval\\\")); [EOL]     Element dodgyBase = new Element(tag, \\\"wtf://no-such-protocol/\\\", attribs); [EOL]     assertEquals(\\\"http://bar/qux\\\", dodgyBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", dodgyBase.absUrl(\\\"relHref\\\")); [EOL] }", "nl": "[LINE] return \\\"\\\"; // nothing to make absolute with [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Validate.notNull(html); [LINE] public Element append(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     for (Node node : fragment.childNodes()) { [EOL]         node.parentNode = null; [EOL]         appendChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesBaseTags() { [EOL]     String h = \\\"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\\\"; [EOL]     Document doc = Jsoup.parse(h, \\\"http://foo/\\\"); [EOL]     assertEquals(\\\"http://bar\\\", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag(\\\"a\\\"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals(\\\"http://foo/\\\", anchors.get(0).baseUri()); [EOL]     assertEquals(\\\"http://foo/2/\\\", anchors.get(1).baseUri()); [EOL]     assertEquals(\\\"http://bar\\\", anchors.get(2).baseUri()); [EOL]     assertEquals(\\\"http://foo/1\\\", anchors.get(0).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://foo/2/3\\\", anchors.get(1).absUrl(\\\"href\\\")); [EOL]     assertEquals(\\\"http://bar/4\\\", anchors.get(2).absUrl(\\\"href\\\")); [EOL] }", "nl": "[LINE] public void setBaseUri(String baseUri) { [LINE] public void setBaseUri(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     this.baseUri = baseUri; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] Validate.isTrue(out.parentNode == this); [LINE] protected void replaceChild(Node out, Node in) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     Validate.notNull(in); [EOL]     if (in.parentNode != null) [EOL]         in.parentNode.removeChild(in); [EOL]     Integer index = indexInList(out, childNodes); [EOL]     childNodes.set(index, in); [EOL]     in.parentNode = this; [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] tq.consumeWhitespace(); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] } else if (child instanceof Element) { [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] if (siblings.size() > index+1) [LINE] public Element nextElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     Integer index = indexInList(this, siblings); [EOL]     Validate.notNull(index); [EOL]     if (siblings.size() > index + 1) [EOL]         return siblings.get(index + 1); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] Validate.notNull(index); [LINE] public Element nextElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     Integer index = indexInList(this, siblings); [EOL]     Validate.notNull(index); [EOL]     if (siblings.size() > index + 1) [EOL]         return siblings.get(index + 1); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] while (!tq.isEmpty()) { [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\\\"two three\\\", p.text()); [EOL]     assertEquals(\\\"<span>two</span> three\\\", p.html()); [EOL] }", "nl": "[LINE] protected void removeChild(Node out) { [LINE] protected void removeChild(Node out) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     int index = indexInList(out, childNodes); [EOL]     childNodes.remove(index); [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return element.attr(key).toLowerCase().contains(value); // value is lower case [LINE] public boolean matches(Element element) { [EOL]     return element.attr(key).toLowerCase().contains(value); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] addElements(findElements()); // chomp first element matcher off queue [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesEmptyBlocks() { [EOL]     String h = \\\"<div id=1/><div id=2><img /></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div1 = doc.getElementById(\\\"1\\\"); [EOL]     assertTrue(div1.children().isEmpty()); [EOL] }", "nl": "[LINE] return null; [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] String lastChar = sb.substring(sb.length()-1, sb.length()); [LINE] static boolean lastCharIsWhitespace(StringBuilder sb) { [EOL]     if (sb.length() == 0) [EOL]         return false; [EOL]     String lastChar = sb.substring(sb.length() - 1, sb.length()); [EOL]     Validate.isTrue(lastChar.length() == 1); [EOL]     return lastChar.equals(\\\" \\\"); [EOL] } public TextNode(String text, String baseUri); public String nodeName(); public String text(); public TextNode text(String text); public String getWholeText(); public boolean isBlank();  void outerHtml(StringBuilder accum); public String toString(); public static TextNode createFromEncoded(String encodedText, String baseUri);  static String normaliseWhitespace(String text);  static String stripLeadingWhitespace(String text);  static boolean lastCharIsWhitespace(StringBuilder sb); String TEXT_KEY=Optional[\\\"text\\\"]"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return doc; [LINE] static public Document createShell(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     Document doc = new Document(baseUri); [EOL]     Element html = doc.appendElement(\\\"html\\\"); [EOL]     html.appendElement(\\\"head\\\"); [EOL]     html.appendElement(\\\"body\\\"); [EOL]     return doc; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] this.value = value; [LINE] public void setValue(String value) { [EOL]     Validate.notNull(value); [EOL]     this.value = value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] consume(); [LINE] public boolean consumeWhitespace() { [EOL]     boolean seen = false; [EOL]     while (!queue.isEmpty() && Character.isWhitespace(queue.peek())) { [EOL]         consume(); [EOL]         seen = true; [EOL]     } [EOL]     return seen; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\\\"a\\\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\\\"relHref\\\", \\\"/foo\\\"); [EOL]     attribs.put(\\\"absHref\\\", \\\"http://bar/qux\\\"); [EOL]     Element noBase = new Element(tag, \\\"\\\", attribs); [EOL]     assertEquals(\\\"\\\", noBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", noBase.absUrl(\\\"absHref\\\")); [EOL]     Element withBase = new Element(tag, \\\"http://foo/\\\", attribs); [EOL]     assertEquals(\\\"http://foo/foo\\\", withBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", withBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", withBase.absUrl(\\\"noval\\\")); [EOL]     Element dodgyBase = new Element(tag, \\\"wtf://no-such-protocol/\\\", attribs); [EOL]     assertEquals(\\\"http://bar/qux\\\", dodgyBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", dodgyBase.absUrl(\\\"relHref\\\")); [EOL] }", "nl": "[LINE] else return \\\"\\\"; [LINE] public String attr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     if (hasAttr(attributeKey)) [EOL]         return attributes.get(attributeKey); [EOL]     else if (attributeKey.toLowerCase().startsWith(\\\"abs:\\\")) [EOL]         return absUrl(attributeKey.substring(\\\"abs:\\\".length())); [EOL]     else [EOL]         return \\\"\\\"; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] return new AttributeValue(value); [LINE] static AttributeValue valueOf(String value) { [EOL]     return new AttributeValue(value); [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] elements.retainAll(intersect); [LINE] private void intersectElements(Collection<Element> intersect) { [EOL]     elements.retainAll(intersect); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] parentNode.replaceChild(this, in); [LINE] public void replaceWith(Node in) { [EOL]     Validate.notNull(in); [EOL]     Validate.notNull(parentNode); [EOL]     parentNode.replaceChild(this, in); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return Parser.parse(html, baseUri); [LINE] public static Document parse(String html, String baseUri) { [EOL]     return Parser.parse(html, baseUri); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] childNodes.add(child); [LINE] public Element appendChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] StringBuilder accum = new StringBuilder(); [LINE] public String consumeAttributeKey() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(queue.peek()) || matchesAny(\\\"-\\\", \\\"_\\\", \\\":\\\"))) { [EOL]         accum.append(queue.removeFirst()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] accum.append(queue.removeFirst()); [LINE] public String consumeCssIdentifier() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     Character c = queue.peek(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) { [EOL]         accum.append(queue.removeFirst()); [EOL]         c = queue.peek(); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] List<Element> siblings = parent().children(); [LINE] public Element firstElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     return siblings.size() > 1 ? siblings.get(0) : null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.appendText(\\\" there & now >\\\"); [EOL]     assertEquals(\\\"<p>Hello</p> there &amp; now &gt;\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] return this; [LINE] public Element appendText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     appendChild(node); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] public Elements eq(int index) { [LINE] public Elements eq(int index) { [EOL]     if (contents.size() > index) [EOL]         return new Elements(get(index)); [EOL]     else [EOL]         return new Elements(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] canContainBlock = false; [LINE] private Tag setContainDataOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return (Element) super.parent(); [LINE] @Override [EOL] public Element parent() { [EOL]     return (Element) super.parent(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] Validate.notEmpty(query); [LINE] private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] while (!queue.isEmpty() && Character.isWhitespace(queue.peek())) { [LINE] public boolean consumeWhitespace() { [EOL]     boolean seen = false; [EOL]     while (!queue.isEmpty() && Character.isWhitespace(queue.peek())) { [EOL]         consume(); [EOL]         seen = true; [EOL]     } [EOL]     return seen; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] contents = new ArrayList<Element>(); [LINE] public Elements() { [EOL]     contents = new ArrayList<Element>(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] canContainInline = false; [LINE] private Tag setEmpty() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     empty = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] output = filterForDescendants(elements, select(subQuery, elements)); [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return true; [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\n<p>There</p>\\\", divs.html()); [EOL] }", "nl": "[LINE] sb.append(\\\"\\n\\\"); [LINE] public String html() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.html()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public Elements addClass(String className) { [LINE] public Elements addClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.addClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] element.removeClass(className); [LINE] public Elements removeClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.removeClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] Elements elements = new Elements(); [LINE] public static Elements collect(Evaluator eval, Element root) { [EOL]     Elements elements = new Elements(); [EOL]     accumulateMatches(eval, elements, root); [EOL]     return elements; [EOL] } public static Elements collect(Evaluator eval, Element root); private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element)"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] private void parseComment() { [LINE] private void parseComment() { [EOL]     tq.consume(\\\"<!--\\\"); [EOL]     String data = tq.chompTo(\\\"->\\\"); [EOL]     if (data.endsWith(\\\"-\\\")) [EOL]         data = data.substring(0, data.length() - 1); [EOL]     Comment comment = new Comment(data, baseUri); [EOL]     last().appendChild(comment); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] valueAccum.append(tq.consume()); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] Validate.notNull(nodes); [LINE] protected static <N extends Node> Integer indexInList(N search, List<N> nodes) { [EOL]     Validate.notNull(search); [EOL]     Validate.notNull(nodes); [EOL]     for (int i = 0; i < nodes.size(); i++) { [EOL]         N node = nodes.get(i); [EOL]         if (node.equals(search)) [EOL]             return i; [EOL]     } [EOL]     return null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] Validate.notNull(text); [LINE] public Element text(String text) { [EOL]     Validate.notNull(text); [EOL]     empty(); [EOL]     TextNode textNode = new TextNode(text, baseUri); [EOL]     appendChild(textNode); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] public static Elements select(String query, Element root) { [LINE] public static Elements select(String query, Element root) { [EOL]     return new Selector(query, root).select(); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] Validate.notNull(className); [LINE] public Element toggleClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     if (classes.contains(className)) [EOL]         classes.remove(className); [EOL]     else [EOL]         classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] public static Document parse(File in, String charsetName) throws IOException { [LINE] public static Document parse(File in, String charsetName) throws IOException { [EOL]     String html = DataUtil.load(in, charsetName); [EOL]     return parse(html, in.getAbsolutePath()); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] if (read > 0) { [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void setTextPreservesDocumentStructure() { [EOL]     Document doc = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     doc.text(\\\"Replaced\\\"); [EOL]     assertEquals(\\\"Replaced\\\", doc.text()); [EOL]     assertEquals(\\\"Replaced\\\", doc.body().text()); [EOL]     assertEquals(1, doc.select(\\\"head\\\").size()); [EOL] }", "nl": "[LINE] @Override [LINE] @Override [EOL] public Element text(String text) { [EOL]     body().text(text); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] return root.getElementsByClass(className); [LINE] private Elements byClass() { [EOL]     String className = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(className); [EOL]     return root.getElementsByClass(className); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] prependChild(node); [LINE] public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] try { [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] N node = nodes.get(i); [LINE] protected static <N extends Node> Integer indexInList(N search, List<N> nodes) { [EOL]     Validate.notNull(search); [EOL]     Validate.notNull(nodes); [EOL]     for (int i = 0; i < nodes.size(); i++) { [EOL]         N node = nodes.get(i); [EOL]         if (node.equals(search)) [EOL]             return i; [EOL]     } [EOL]     return null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public Element addClass(String className) { [LINE] public Element addClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return accum.toString(); [LINE] public String consumeAttributeKey() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(queue.peek()) || matchesAny(\\\"-\\\", \\\"_\\\", \\\":\\\"))) { [EOL]         accum.append(queue.removeFirst()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] Integer index = indexInList(this, siblings); [LINE] public Element nextElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     Integer index = indexInList(this, siblings); [EOL]     Validate.notNull(index); [EOL]     if (siblings.size() > index + 1) [EOL]         return siblings.get(index + 1); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public boolean matches(String seq) { [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] @Override [LINE] @Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     return false; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] if (sb.length() != 0) [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\" \\\"); [EOL]         sb.append(element.text()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return this; [LINE] public Elements removeClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.removeClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = \\\"foo <b>bar</b> baz\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals(\\\"foo bar baz\\\", doc.text()); [EOL] }", "nl": "[LINE] toMove.add(tn); [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] Elements children = new Elements(); [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] normalise(head()); [LINE] public Document normalise() { [EOL]     if (select(\\\"html\\\").isEmpty()) [EOL]         appendElement(\\\"html\\\"); [EOL]     if (head() == null) [EOL]         select(\\\"html\\\").first().prependElement(\\\"head\\\"); [EOL]     if (body() == null) [EOL]         select(\\\"html\\\").first().appendElement(\\\"body\\\"); [EOL]     normalise(head()); [EOL]     normalise(select(\\\"html\\\").first()); [EOL]     normalise(this); [EOL]     return this; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Elements select(String query) { [LINE] public Elements select(String query) { [EOL]     return Selector.select(query, this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] } else if (seenWhite) { [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag); [LINE] Attributes getEnforcedAttributes(String tagName) { [EOL]     Attributes attrs = new Attributes(); [EOL]     TagName tag = TagName.valueOf(tagName); [EOL]     if (enforcedAttributes.containsKey(tag)) { [EOL]         Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag); [EOL]         for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) { [EOL]             attrs.put(entry.getKey().toString(), entry.getValue().toString()); [EOL]         } [EOL]     } [EOL]     return attrs; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] if (!super.equals(o)) return false; [LINE] @Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     if (!(o instanceof Element)) [EOL]         return false; [EOL]     if (!super.equals(o)) [EOL]         return false; [EOL]     Element element = (Element) o; [EOL]     if (tag != null ? !tag.equals(element.tag) : element.tag != null) [EOL]         return false; [EOL]     return true; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void imgSemantics() { [EOL]     Tag img = Tag.valueOf(\\\"img\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertFalse(img.canContain(img)); [EOL]     assertFalse(img.canContain(p)); [EOL] }", "nl": "[LINE] return false; [LINE] boolean canContain(Tag child) { [EOL]     Validate.notNull(child); [EOL]     if (child.isBlock && !this.canContainBlock) [EOL]         return false; [EOL]     if (!child.isBlock && !this.canContainInline) [EOL]         return false; [EOL]     if (this.optionalClosing && this.equals(child)) [EOL]         return false; [EOL]     if (this.empty || this.isData()) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"head\\\")) { [EOL]         if (child.tagName.equals(\\\"base\\\") || child.tagName.equals(\\\"script\\\") || child.tagName.equals(\\\"noscript\\\") || child.tagName.equals(\\\"link\\\") || child.tagName.equals(\\\"meta\\\") || child.tagName.equals(\\\"title\\\") || child.tagName.equals(\\\"style\\\") || child.tagName.equals(\\\"object\\\")) { [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (this.tagName.equals(\\\"dt\\\") && child.tagName.equals(\\\"dd\\\")) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"dd\\\") && child.tagName.equals(\\\"dt\\\")) [EOL]         return false; [EOL]     return true; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] protected void replaceChild(Node out, Node in) { [LINE] protected void replaceChild(Node out, Node in) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     Validate.notNull(in); [EOL]     if (in.parentNode != null) [EOL]         in.parentNode.removeChild(in); [EOL]     Integer index = indexInList(out, childNodes); [EOL]     childNodes.set(index, in); [EOL]     in.parentNode = this; [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] private void combinator(String combinator) { [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] classes.remove(className); [LINE] public Element toggleClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     if (classes.contains(className)) [EOL]         classes.remove(className); [EOL]     else [EOL]         classes.add(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] private Tag setContainDataOnly() { [LINE] private Tag setContainDataOnly() { [EOL]     canContainBlock = false; [EOL]     canContainInline = false; [EOL]     preserveWhitespace = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void parsesRoughAttributes() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p class=\\\\\"foo > bar\\\\\">First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     assertEquals(\\\"foo > bar\\\", p.attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] put(attr); [LINE] public void put(String key, String value) { [EOL]     Attribute attr = new Attribute(key, value); [EOL]     put(attr); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] attrs.put(entry.getKey().toString(), entry.getValue().toString()); [LINE] Attributes getEnforcedAttributes(String tagName) { [EOL]     Attributes attrs = new Attributes(); [EOL]     TagName tag = TagName.valueOf(tagName); [EOL]     if (enforcedAttributes.containsKey(tag)) { [EOL]         Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag); [EOL]         for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) { [EOL]             attrs.put(entry.getKey().toString(), entry.getValue().toString()); [EOL]         } [EOL]     } [EOL]     return attrs; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] Validate.notNull(value); [LINE] public void setValue(String value) { [EOL]     Validate.notNull(value); [EOL]     this.value = value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\n<p>There</p>\\\", divs.html()); [EOL] }", "nl": "[LINE] if (sb.length() != 0) [LINE] public String html() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.html()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return true; [LINE] public boolean hasClass(String className) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasClass(className)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] found = true; [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public String chompTo(String seq) { [LINE] public String chompTo(String seq) { [EOL]     String data = consumeTo(seq); [EOL]     matchChomp(seq); [EOL]     return data; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] child.setParentNode(this); [LINE] public Element appendChild(Node child) { [EOL]     Validate.notNull(child); [EOL]     child.setParentNode(this); [EOL]     childNodes.add(child); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] return false; [LINE] @Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     return false; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] public Node removeAttr(String attributeKey) { [LINE] public Node removeAttr(String attributeKey) { [EOL]     Validate.notNull(attributeKey); [EOL]     attributes.remove(attributeKey); [EOL]     return this; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] text = TextNode.normaliseWhitespace(text); [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] optionalClosing = true; [LINE] private Tag setOptionalClosing() { [EOL]     optionalClosing = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public static Document parse(String html, String baseUri) { [LINE] public static Document parse(String html, String baseUri) { [EOL]     return Parser.parse(html, baseUri); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void testGetText() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     assertEquals(\\\"Hello Another element\\\", doc.text()); [EOL]     assertEquals(\\\"Another element\\\", doc.getElementsByTag(\\\"p\\\").get(1).text()); [EOL] }", "nl": "[LINE] accum.append(\\\" \\\"); [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] Document clean = Document.createShell(dirtyDocument.baseUri()); [LINE] public boolean isValid(Document dirtyDocument) { [EOL]     Validate.notNull(dirtyDocument); [EOL]     Document clean = Document.createShell(dirtyDocument.baseUri()); [EOL]     int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body()); [EOL]     return numDiscarded == 0; [EOL] } public Cleaner(Whitelist whitelist);  ElementMeta(Element el, int numAttribsDiscarded); public Document clean(Document dirtyDocument); public boolean isValid(Document dirtyDocument); private int copySafeNodes(Element source, Element dest); private ElementMeta createSafeElement(Element sourceEl); Whitelist whitelist"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] if (titleEl == null) { // add to head [LINE] public void title(String title) { [EOL]     Validate.notNull(title); [EOL]     Element titleEl = getElementsByTag(\\\"title\\\").first(); [EOL]     if (titleEl == null) { [EOL]         head().appendElement(\\\"title\\\").text(title); [EOL]     } else { [EOL]         titleEl.text(title); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public static Document parse(File in, String charsetName, String baseUri) throws IOException { [LINE] public static Document parse(File in, String charsetName, String baseUri) throws IOException { [EOL]     String html = DataUtil.load(in, charsetName); [EOL]     return parse(html, baseUri); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] public Integer siblingIndex() { [LINE] public Integer siblingIndex() { [EOL]     return indexInList(this, parent().childNodes); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }", "nl": "[LINE] if (sb.length() != 0) [LINE] public String outerHtml() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.outerHtml()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return (value.equalsIgnoreCase(element.attr(key))); [LINE] public boolean matches(Element element) { [EOL]     return (value.equalsIgnoreCase(element.attr(key))); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] return root.getAllElements(); [LINE] private Elements allElements() { [EOL]     return root.getAllElements(); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] Character firstChar = tq.consume(); // <? or <!, from initial match. [LINE] private void parseXmlDecl() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     Character firstChar = tq.consume(); [EOL]     boolean procInstr = firstChar.toString().equals(\\\"!\\\"); [EOL]     String data = tq.chompTo(\\\">\\\"); [EOL]     XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr); [EOL]     last().appendChild(decl); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] element.removeAttr(attributeKey); [LINE] public Elements removeAttr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         element.removeAttr(attributeKey); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return 0; [LINE] protected int nodeDepth() { [EOL]     if (parentNode == null) [EOL]         return 0; [EOL]     else [EOL]         return parentNode.nodeDepth() + 1; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] accum [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] char[] seqChars = seq.toCharArray(); [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] public String text() { [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     text(sb); [EOL]     return sb.toString().trim(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] return new Selector(query, root).select(); [LINE] public static Elements select(String query, Element root) { [EOL]     return new Selector(query, root).select(); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] public Elements removeAttr(String attributeKey) { [LINE] public Elements removeAttr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         element.removeAttr(attributeKey); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] if (!e.parent().equals(c.parent())) [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] if (this == o) return true; [LINE] @Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     if (!(o instanceof Element)) [EOL]         return false; [EOL]     if (!super.equals(o)) [EOL]         return false; [EOL]     Element element = (Element) o; [EOL]     if (tag != null ? !tag.equals(element.tag) : element.tag != null) [EOL]         return false; [EOL]     return true; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] StringBuilder sb = new StringBuilder(); [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     text(sb); [EOL]     return sb.toString().trim(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] if(found != null) [LINE] private Elements byId() { [EOL]     String id = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(id); [EOL]     Element found = root.getElementById(id); [EOL]     Elements byId = new Elements(); [EOL]     if (found != null) [EOL]         byId.add(found); [EOL]     return byId; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public boolean isBlock() { [LINE] public boolean isBlock() { [EOL]     return tag.isBlock(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null; [LINE] public Element lastElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public String className() { [LINE] public String className() { [EOL]     return attributes.hasKey(\\\"class\\\") ? attributes.get(\\\"class\\\") : \\\"\\\"; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] parseXmlDecl(); [LINE] private Document parse() { [EOL]     while (!tq.isEmpty()) { [EOL]         if (tq.matches(\\\"<!--\\\")) { [EOL]             parseComment(); [EOL]         } else if (tq.matches(\\\"<![CDATA[\\\")) { [EOL]             parseCdata(); [EOL]         } else if (tq.matches(\\\"<?\\\") || tq.matches(\\\"<!\\\")) { [EOL]             parseXmlDecl(); [EOL]         } else if (tq.matches(\\\"</\\\")) { [EOL]             parseEndTag(); [EOL]         } else if (tq.matches(\\\"<\\\")) { [EOL]             parseStartTag(); [EOL]         } else { [EOL]             parseTextNode(); [EOL]         } [EOL]     } [EOL]     return doc.normalise(); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] if (!found) [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\\\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\\\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\\\"class\\\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\\\"mellow yellow\\\", span.className()); [EOL]     assertTrue(span.hasClass(\\\"mellow\\\")); [EOL]     assertTrue(span.hasClass(\\\"yellow\\\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\\\"mellow\\\")); [EOL]     assertTrue(classes.contains(\\\"yellow\\\")); [EOL]     assertEquals(\\\"\\\", doc.className()); [EOL]     assertFalse(doc.hasClass(\\\"mellow\\\")); [EOL] }", "nl": "[LINE] key = key.trim().toLowerCase(); [LINE] public Elements getElementsByAttribute(String key) { [EOL]     Validate.notEmpty(key); [EOL]     key = key.trim().toLowerCase(); [EOL]     return Collector.collect(new Evaluator.Attribute(key), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] html.appendElement(\\\"head\\\"); [LINE] static public Document createShell(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     Document doc = new Document(baseUri); [EOL]     Element html = doc.appendElement(\\\"html\\\"); [EOL]     html.appendElement(\\\"head\\\"); [EOL]     html.appendElement(\\\"body\\\"); [EOL]     return doc; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] for (Node node : childNodes) [LINE] private void html(StringBuilder accum) { [EOL]     for (Node node : childNodes) node.outerHtml(accum); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] html(accum); [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] childNodes.clear(); [LINE] public Element empty() { [EOL]     childNodes.clear(); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesCdata() { [EOL]     String h = \\\"<div id=1><![CData[<html>\\n<foo><&amp;]]></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"<html> <foo><&amp;\\\", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }", "nl": "[LINE] last().appendChild(textNode); [LINE] private void parseCdata() { [EOL]     tq.consume(\\\"<![CDATA[\\\"); [EOL]     String rawText = tq.chompTo(\\\"]]>\\\"); [EOL]     TextNode textNode = new TextNode(rawText, baseUri); [EOL]     last().appendChild(textNode); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] if (childNode instanceof DataNode) { [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] indent(accum); [LINE] void outerHtml(StringBuilder accum) { [EOL]     String html = StringEscapeUtils.escapeHtml(getWholeText()); [EOL]     if (parent() instanceof Element && !((Element) parent()).preserveWhitespace()) { [EOL]         html = normaliseWhitespace(html); [EOL]     } [EOL]     if (!isBlank() && parentNode instanceof Element && ((Element) parentNode).tag().canContainBlock() && siblingIndex() == 0) [EOL]         indent(accum); [EOL]     accum.append(html); [EOL] } public TextNode(String text, String baseUri); public String nodeName(); public String text(); public TextNode text(String text); public String getWholeText(); public boolean isBlank();  void outerHtml(StringBuilder accum); public String toString(); public static TextNode createFromEncoded(String encodedText, String baseUri);  static String normaliseWhitespace(String text);  static String stripLeadingWhitespace(String text);  static boolean lastCharIsWhitespace(StringBuilder sb); String TEXT_KEY=Optional[\\\"text\\\"]"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] Validate.notEmpty(tag); [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] public boolean contains(Object o) {return contents.contains(o);} [LINE] public boolean contains(Object o) { [EOL]     return contents.contains(o); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] continue CHILD; [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public String outerHtml() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.outerHtml()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] Validate.notEmpty(className); [LINE] private Elements byClass() { [EOL]     String className = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(className); [EOL]     return root.getElementsByClass(className); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] private static Tag createInline(String tagName) { [LINE] private static Tag createInline(String tagName) { [EOL]     Tag inline = new Tag(tagName); [EOL]     inline.isBlock = false; [EOL]     inline.canContainBlock = false; [EOL]     return register(inline); [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public Elements toggleClass(String className) { [EOL]     for (Element element : contents) { [EOL]         element.toggleClass(className); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] return value; [LINE] public String getValue() { [EOL]     return value; [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] private void html(StringBuilder accum) { [LINE] private void html(StringBuilder accum) { [EOL]     for (Node node : childNodes) node.outerHtml(accum); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] String html = DataUtil.load(in, charsetName); [LINE] public static Document parse(File in, String charsetName) throws IOException { [EOL]     String html = DataUtil.load(in, charsetName); [EOL]     return parse(html, in.getAbsolutePath()); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] return attributes.containsKey(key.toLowerCase()); [LINE] public boolean hasKey(String key) { [EOL]     return attributes.containsKey(key.toLowerCase()); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] private Elements indexEquals() { [LINE] private Elements indexEquals() { [EOL]     return root.getElementsByIndexEquals(consumeIndex()); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }", "nl": "[LINE] StringBuilder sb = new StringBuilder(); [LINE] public String outerHtml() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.outerHtml()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] static boolean lastCharIsWhitespace(StringBuilder sb) { [LINE] static boolean lastCharIsWhitespace(StringBuilder sb) { [EOL]     if (sb.length() == 0) [EOL]         return false; [EOL]     String lastChar = sb.substring(sb.length() - 1, sb.length()); [EOL]     Validate.isTrue(lastChar.length() == 1); [EOL]     return lastChar.equals(\\\" \\\"); [EOL] } public TextNode(String text, String baseUri); public String nodeName(); public String text(); public TextNode text(String text); public String getWholeText(); public boolean isBlank();  void outerHtml(StringBuilder accum); public String toString(); public static TextNode createFromEncoded(String encodedText, String baseUri);  static String normaliseWhitespace(String text);  static String stripLeadingWhitespace(String text);  static boolean lastCharIsWhitespace(StringBuilder sb); String TEXT_KEY=Optional[\\\"text\\\"]"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] accumulateMatches(eval, elements, root); [LINE] public static Elements collect(Evaluator eval, Element root) { [EOL]     Elements elements = new Elements(); [EOL]     accumulateMatches(eval, elements, root); [EOL]     return elements; [EOL] } public static Elements collect(Evaluator eval, Element root); private static void accumulateMatches(Evaluator eval, List<Element> elements, Element element)"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] AttributeValue attrVal = AttributeValue.valueOf(value); [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] Element el = (Element) child; [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] } else if (tq.matchChomp(\\\".\\\")) { [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] data.append(buffer, 0, read); [LINE] private static String readInputStream(InputStream inStream, String charsetName) throws IOException { [EOL]     char[] buffer = new char[0x20000]; [EOL]     StringBuilder data = new StringBuilder(0x20000); [EOL]     Reader inReader = new InputStreamReader(inStream, charsetName); [EOL]     int read; [EOL]     do { [EOL]         read = inReader.read(buffer, 0, buffer.length); [EOL]         if (read > 0) { [EOL]             data.append(buffer, 0, read); [EOL]         } [EOL]     } while (read >= 0); [EOL]     return data.toString(); [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public boolean matchChomp(String seq) { [LINE] public boolean matchChomp(String seq) { [EOL]     if (matches(seq)) { [EOL]         consume(seq); [EOL]         return true; [EOL]     } else { [EOL]         return false; [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] return root.getElementsByAttributeValue(key, tq.chompTo(\\\"]\\\")); [LINE] private Elements byAttribute() { [EOL]     String key = tq.consumeToAny(\\\"=\\\", \\\"!=\\\", \\\"^=\\\", \\\"$=\\\", \\\"*=\\\", \\\"]\\\"); [EOL]     Validate.notEmpty(key); [EOL]     if (tq.matchChomp(\\\"]\\\")) { [EOL]         return root.getElementsByAttribute(key); [EOL]     } else { [EOL]         if (tq.matchChomp(\\\"=\\\")) [EOL]             return root.getElementsByAttributeValue(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"!=\\\")) [EOL]             return root.getElementsByAttributeValueNot(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"^=\\\")) [EOL]             return root.getElementsByAttributeValueStarting(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"$=\\\")) [EOL]             return root.getElementsByAttributeValueEnding(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"*=\\\")) [EOL]             return root.getElementsByAttributeValueContaining(key, tq.chompTo(\\\"]\\\")); [EOL]         else [EOL]             throw new SelectorParseException(\\\"Could not parse attribute query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = \\\"<p id=\\\\\"foo\\\"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById(\\\"foo\\\"); [EOL]     assertNotNull(p); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL] }", "nl": "[LINE] public boolean matches(Element element) { [LINE] public boolean matches(Element element) { [EOL]     return (id.equals(element.id())); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] if (tq.matchChomp(SQ)) { [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] List<Element> siblings = parent().children(); [LINE] public Element lastElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] CHILD: for (Element c : candidates) { [LINE] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public boolean matches(Element element) { [LINE] public boolean matches(Element element) { [EOL]     return (element.hasClass(className)); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] this.tq = new TokenQueue(query); [LINE] private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] super(baseUri, attributes); [LINE] public Element(Tag tag, String baseUri, Attributes attributes) { [EOL]     super(baseUri, attributes); [EOL]     Validate.notNull(tag); [EOL]     this.tag = tag; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\\\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\\\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\\\"class\\\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\\\"mellow yellow\\\", span.className()); [EOL]     assertTrue(span.hasClass(\\\"mellow\\\")); [EOL]     assertTrue(span.hasClass(\\\"yellow\\\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\\\"mellow\\\")); [EOL]     assertTrue(classes.contains(\\\"yellow\\\")); [EOL]     assertEquals(\\\"\\\", doc.className()); [EOL]     assertFalse(doc.hasClass(\\\"mellow\\\")); [EOL] }", "nl": "[LINE] Attribute (String key) { [LINE] Attribute(String key) { [EOL]     this.key = key; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] Character c = queue.peek(); [LINE] public String consumeCssIdentifier() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     Character c = queue.peek(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) { [EOL]         accum.append(queue.removeFirst()); [EOL]         c = queue.peek(); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] out.parentNode = null; [LINE] protected void replaceChild(Node out, Node in) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     Validate.notNull(in); [EOL]     if (in.parentNode != null) [EOL]         in.parentNode.removeChild(in); [EOL]     Integer index = indexInList(out, childNodes); [EOL]     childNodes.set(index, in); [EOL]     in.parentNode = this; [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void hasAttr() { [EOL]     Document doc = Jsoup.parse(\\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(ps.hasAttr(\\\"class\\\")); [EOL]     assertFalse(ps.hasAttr(\\\"style\\\")); [EOL] }", "nl": "[LINE] public boolean hasAttr(String attributeKey) { [LINE] public boolean hasAttr(String attributeKey) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasAttr(attributeKey)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\\\"); [EOL]     assertEquals(\\\"<html><head></head><body><div title=\\\\\"Tags &amp;c.\\\\\"><img src=\\\\\"foo.png\\\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\\\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }", "nl": "[LINE] indent(accum); [LINE] void outerHtml(StringBuilder accum) { [EOL]     indent(accum); [EOL]     accum.append(String.format(\\\"<!--%s-->\\\", getData())); [EOL] } public Comment(String data, String baseUri); public String nodeName(); public String getData();  void outerHtml(StringBuilder accum); public String toString(); String COMMENT_KEY=Optional[\\\"comment\\\"]"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] Validate.notNull(root); [LINE] private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] tq.consumeWhitespace(); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public boolean hasClass(String className) { [EOL]     for (Element element : contents) { [EOL]         if (element.hasClass(className)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] output = filterForChildren(elements, select(subQuery, elements)); [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] accum.append(\\\">\\\"); [LINE] void outerHtml(StringBuilder accum) { [EOL]     if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)) [EOL]         indent(accum); [EOL]     accum.append(\\\"<\\\").append(tagName()).append(attributes.html()); [EOL]     if (childNodes.isEmpty() && tag.isEmpty()) { [EOL]         accum.append(\\\" />\\\"); [EOL]     } else { [EOL]         accum.append(\\\">\\\"); [EOL]         html(accum); [EOL]         if (tag.canContainBlock()) [EOL]             indent(accum); [EOL]         accum.append(\\\"</\\\").append(tagName()).append(\\\">\\\"); [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Element prepend(String html) { [LINE] public Element prepend(String html) { [EOL]     Validate.notNull(html); [EOL]     Element fragment = Parser.parseBodyFragment(html, baseUri).body(); [EOL]     List<Node> nodes = fragment.childNodes(); [EOL]     for (int i = nodes.size() - 1; i >= 0; i--) { [EOL]         Node node = nodes.get(i); [EOL]         node.parentNode = null; [EOL]         prependChild(node); [EOL]     } [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] return sb.toString().trim(); [LINE] public String text() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     text(sb); [EOL]     return sb.toString().trim(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] Parser parser = new Parser(bodyHtml, baseUri, true); [LINE] public static Document parseBodyFragment(String bodyHtml, String baseUri) { [EOL]     Parser parser = new Parser(bodyHtml, baseUri, true); [EOL]     return parser.parse(); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] private static Tag register(Tag tag) { [LINE] private static Tag register(Tag tag) { [EOL]     tag.setAncestor(defaultAncestor.tagName); [EOL]     synchronized (tags) { [EOL]         tags.put(tag.tagName, tag); [EOL]     } [EOL]     return tag; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] titleEl.text(title); [LINE] public void title(String title) { [EOL]     Validate.notNull(title); [EOL]     Element titleEl = getElementsByTag(\\\"title\\\").first(); [EOL]     if (titleEl == null) { [EOL]         head().appendElement(\\\"title\\\").text(title); [EOL]     } else { [EOL]         titleEl.text(title); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public boolean matchesAny(String... seq) { [LINE] public boolean matchesAny(String... seq) { [EOL]     for (String s : seq) { [EOL]         if (matches(s)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] last().appendChild(comment); [LINE] private void parseComment() { [EOL]     tq.consume(\\\"<!--\\\"); [EOL]     String data = tq.chompTo(\\\"->\\\"); [EOL]     if (data.endsWith(\\\"-\\\")) [EOL]         data = data.substring(0, data.length() - 1); [EOL]     Comment comment = new Comment(data, baseUri); [EOL]     last().appendChild(comment); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\\\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\\\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\\\"class\\\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\\\"mellow yellow\\\", span.className()); [EOL]     assertTrue(span.hasClass(\\\"mellow\\\")); [EOL]     assertTrue(span.hasClass(\\\"yellow\\\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\\\"mellow\\\")); [EOL]     assertTrue(classes.contains(\\\"yellow\\\")); [EOL]     assertEquals(\\\"\\\", doc.className()); [EOL]     assertFalse(doc.hasClass(\\\"mellow\\\")); [EOL] }", "nl": "[LINE] public Elements getElementsByAttribute(String key) { [LINE] public Elements getElementsByAttribute(String key) { [EOL]     Validate.notEmpty(key); [EOL]     key = key.trim().toLowerCase(); [EOL]     return Collector.collect(new Evaluator.Attribute(key), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] return false; [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] output.add(c); [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\\\"two three\\\", p.text()); [EOL]     assertEquals(\\\"<span>two</span> three\\\", p.html()); [EOL] }", "nl": "[LINE] Validate.notNull(parentNode); [LINE] public void remove() { [EOL]     Validate.notNull(parentNode); [EOL]     parentNode.removeChild(this); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] public boolean matches(Element element) { [LINE] public boolean matches(Element element) { [EOL]     return (value.equalsIgnoreCase(element.attr(key))); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] if (len > queue.size()) [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] attributes.putAll(incoming.attributes); [LINE] public void addAll(Attributes incoming) { [EOL]     attributes.putAll(incoming.attributes); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] classNames(classes); [LINE] public Element removeClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.remove(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Validate.notEmpty(tagName); [LINE] public Elements getElementsByTag(String tagName) { [EOL]     Validate.notEmpty(tagName); [EOL]     tagName = tagName.toLowerCase().trim(); [EOL]     return Collector.collect(new Evaluator.Tag(tagName), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] String id = tq.consumeCssIdentifier(); [LINE] private Elements byId() { [EOL]     String id = tq.consumeCssIdentifier(); [EOL]     Validate.notEmpty(id); [EOL]     Element found = root.getElementById(id); [EOL]     Elements byId = new Elements(); [EOL]     if (found != null) [EOL]         byId.add(found); [EOL]     return byId; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] boolean seenWhite = tq.consumeWhitespace(); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] Validate.notEmpty(key); [LINE] public void remove(String key) { [EOL]     Validate.notEmpty(key); [EOL]     attributes.remove(key.toLowerCase()); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] super(key, value); [LINE] AttributeWithValueContaining(String key, String value) { [EOL]     super(key, value); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] return false; [LINE] static boolean lastCharIsWhitespace(StringBuilder sb) { [EOL]     if (sb.length() == 0) [EOL]         return false; [EOL]     String lastChar = sb.substring(sb.length() - 1, sb.length()); [EOL]     Validate.isTrue(lastChar.length() == 1); [EOL]     return lastChar.equals(\\\" \\\"); [EOL] } public TextNode(String text, String baseUri); public String nodeName(); public String text(); public TextNode text(String text); public String getWholeText(); public boolean isBlank();  void outerHtml(StringBuilder accum); public String toString(); public static TextNode createFromEncoded(String encodedText, String baseUri);  static String normaliseWhitespace(String text);  static String stripLeadingWhitespace(String text);  static boolean lastCharIsWhitespace(StringBuilder sb); String TEXT_KEY=Optional[\\\"text\\\"]"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] public Elements(Element... elements) { [LINE] public Elements(Element... elements) { [EOL]     this(Arrays.asList(elements)); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return data; [LINE] public String chompTo(String seq) { [EOL]     String data = consumeTo(seq); [EOL]     matchChomp(seq); [EOL]     return data; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] Elements output = new Elements(); [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] Class(String className) { [LINE] Class(String className) { [EOL]     this.className = className; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] if (node instanceof Element) [LINE] public Elements children() { [EOL]     List<Element> elements = new ArrayList<Element>(); [EOL]     for (Node node : childNodes) { [EOL]         if (node instanceof Element) [EOL]             elements.add((Element) node); [EOL]     } [EOL]     return new Elements(elements); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] output = filterForGeneralSiblings(elements, select(subQuery, root)); [LINE] private void combinator(String combinator) { [EOL]     tq.consumeWhitespace(); [EOL]     String subQuery = tq.consumeToAny(combinators); [EOL]     Elements output; [EOL]     if (combinator.equals(\\\">\\\")) [EOL]         output = filterForChildren(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\" \\\")) [EOL]         output = filterForDescendants(elements, select(subQuery, elements)); [EOL]     else if (combinator.equals(\\\"+\\\")) [EOL]         output = filterForAdjacentSiblings(elements, select(subQuery, root)); [EOL]     else if (combinator.equals(\\\"~\\\")) [EOL]         output = filterForGeneralSiblings(elements, select(subQuery, root)); [EOL]     else [EOL]         throw new IllegalStateException(\\\"Unknown combinator: \\\" + combinator); [EOL]     elements.clear(); [EOL]     elements.addAll(output); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.prependText(\\\"there & now > \\\"); [EOL]     assertEquals(\\\"there & now > Hello\\\", div.text()); [EOL]     assertEquals(\\\"there &amp; now &gt; <p>Hello</p>\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] return this; [LINE] public Element prependText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     prependChild(node); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] @Override [LINE] @Override [EOL] public Element parent() { [EOL]     return (Element) super.parent(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] return byAttribute(); [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public String consumeAttributeKey() { [LINE] public String consumeAttributeKey() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && (Character.isLetterOrDigit(queue.peek()) || matchesAny(\\\"-\\\", \\\"_\\\", \\\":\\\"))) { [EOL]         accum.append(queue.removeFirst()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void filter() { [EOL]     String h = \\\"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\".headline\\\").select(\\\"p\\\"); [EOL]     assertEquals(2, els.size()); [EOL]     assertEquals(\\\"Hello\\\", els.get(0).text()); [EOL]     assertEquals(\\\"There\\\", els.get(1).text()); [EOL] }", "nl": "[LINE] public Elements getElementsByClass(String className) { [LINE] public Elements getElementsByClass(String className) { [EOL]     Validate.notEmpty(className); [EOL]     return Collector.collect(new Evaluator.Class(className), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] CHILD: for (Element c : candidates) { [LINE] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         boolean found = false; [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 found = true; [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]         if (!found) [EOL]             children.add(c); [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testIsValid() { [EOL]     String ok = \\\"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\\\"; [EOL]     String nok1 = \\\"<p><script></script>Not <b>OK</b></p>\\\"; [EOL]     String nok2 = \\\"<p align=right>Test Not <b>OK</b></p>\\\"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }", "nl": "[LINE] int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body()); [LINE] public boolean isValid(Document dirtyDocument) { [EOL]     Validate.notNull(dirtyDocument); [EOL]     Document clean = Document.createShell(dirtyDocument.baseUri()); [EOL]     int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body()); [EOL]     return numDiscarded == 0; [EOL] } public Cleaner(Whitelist whitelist);  ElementMeta(Element el, int numAttribsDiscarded); public Document clean(Document dirtyDocument); public boolean isValid(Document dirtyDocument); private int copySafeNodes(Element source, Element dest); private ElementMeta createSafeElement(Element sourceEl); Whitelist whitelist"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] return attr != null ? attr.getValue() : \\\"\\\"; [LINE] public String get(String key) { [EOL]     Validate.notEmpty(key); [EOL]     Attribute attr = attributes.get(key.toLowerCase()); [EOL]     return attr != null ? attr.getValue() : \\\"\\\"; [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void eq() { [EOL]     String h = \\\"<p>Hello<p>there<p>world\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"there\\\", doc.select(\\\"p\\\").eq(1).text()); [EOL] }", "nl": "[LINE] return new Elements(get(index)); [LINE] public Elements eq(int index) { [EOL]     if (contents.size() > index) [EOL]         return new Elements(get(index)); [EOL]     else [EOL]         return new Elements(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] if (!(o instanceof Element)) return false; [LINE] @Override [EOL] public boolean equals(Object o) { [EOL]     if (this == o) [EOL]         return true; [EOL]     if (!(o instanceof Element)) [EOL]         return false; [EOL]     if (!super.equals(o)) [EOL]         return false; [EOL]     Element element = (Element) o; [EOL]     if (tag != null ? !tag.equals(element.tag) : element.tag != null) [EOL]         return false; [EOL]     return true; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\n<p>There</p>\\\", divs.html()); [EOL] }", "nl": "[LINE] public String html() { [LINE] public String html() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.html()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public String consumeToAny(String... seq) { [LINE] public String consumeToAny(String... seq) { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && !matchesAny(seq)) accum.append(consume()); [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] this.root = root; [LINE] private Selector(String query, Element root) { [EOL]     Validate.notNull(query); [EOL]     query = query.trim(); [EOL]     Validate.notEmpty(query); [EOL]     Validate.notNull(root); [EOL]     this.elements = new LinkedHashSet<Element>(); [EOL]     this.query = query; [EOL]     this.root = root; [EOL]     this.tq = new TokenQueue(query); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] attrMap.put(attrKey, attrVal); [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void html() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div><div><p>There</p></div>\\\"); [EOL]     Elements divs = doc.select(\\\"div\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\n<p>There</p>\\\", divs.html()); [EOL] }", "nl": "[LINE] StringBuilder sb = new StringBuilder(); [LINE] public String html() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Element element : contents) { [EOL]         if (sb.length() != 0) [EOL]             sb.append(\\\"\\n\\\"); [EOL]         sb.append(element.html()); [EOL]     } [EOL]     return sb.toString(); [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] private void normalise(Element element) { [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] if (c.equals(p)) { [LINE] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] if (!textNode.isBlank()) [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] accum.append(\\\" \\\"); [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     for (Attribute attribute : this) { [EOL]         accum.append(\\\" \\\"); [EOL]         accum.append(attribute.html()); [EOL]     } [EOL]     return accum.toString(); [EOL] } public String get(String key); public void put(String key, String value); public void put(Attribute attribute); public void remove(String key); public boolean hasKey(String key); public int size(); public void addAll(Attributes incoming); public Iterator<Attribute> iterator(); public List<Attribute> asList(); public String html(); public String toString(); public boolean equals(Object o); public int hashCode(); LinkedHashMap<String, Attribute> attributes=Optional[new LinkedHashMap<String, Attribute>()]"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] return true; [LINE] boolean canContain(Tag child) { [EOL]     Validate.notNull(child); [EOL]     if (child.isBlock && !this.canContainBlock) [EOL]         return false; [EOL]     if (!child.isBlock && !this.canContainInline) [EOL]         return false; [EOL]     if (this.optionalClosing && this.equals(child)) [EOL]         return false; [EOL]     if (this.empty || this.isData()) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"head\\\")) { [EOL]         if (child.tagName.equals(\\\"base\\\") || child.tagName.equals(\\\"script\\\") || child.tagName.equals(\\\"noscript\\\") || child.tagName.equals(\\\"link\\\") || child.tagName.equals(\\\"meta\\\") || child.tagName.equals(\\\"title\\\") || child.tagName.equals(\\\"style\\\") || child.tagName.equals(\\\"object\\\")) { [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (this.tagName.equals(\\\"dt\\\") && child.tagName.equals(\\\"dd\\\")) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"dd\\\") && child.tagName.equals(\\\"dt\\\")) [EOL]         return false; [EOL]     return true; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testSetText() { [EOL]     String h = \\\"<div id=1>Hello <p>there <b>now</b></p></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(\\\"Hello there now\\\", doc.text()); [EOL]     assertEquals(\\\"there now\\\", doc.select(\\\"p\\\").get(0).text()); [EOL]     Element div = doc.getElementById(\\\"1\\\").text(\\\"Gone\\\"); [EOL]     assertEquals(\\\"Gone\\\", div.text()); [EOL]     assertEquals(0, doc.select(\\\"p\\\").size()); [EOL] }", "nl": "[LINE] if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [LINE] private void text(StringBuilder accum) { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             String text = textNode.getWholeText(); [EOL]             if (!preserveWhitespace()) { [EOL]                 text = TextNode.normaliseWhitespace(text); [EOL]                 if (TextNode.lastCharIsWhitespace(accum)) [EOL]                     text = TextNode.stripLeadingWhitespace(text); [EOL]             } [EOL]             accum.append(text); [EOL]         } else if (child instanceof Element) { [EOL]             Element element = (Element) child; [EOL]             if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) [EOL]                 accum.append(\\\" \\\"); [EOL]             element.text(accum); [EOL]         } [EOL]     } [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] return titleEl != null ? titleEl.text().trim() : \\\"\\\"; [LINE] public String title() { [EOL]     Element titleEl = getElementsByTag(\\\"title\\\").first(); [EOL]     return titleEl != null ? titleEl.text().trim() : \\\"\\\"; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return this; [LINE] public Element empty() { [EOL]     childNodes.clear(); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] last().appendChild(decl); [LINE] private void parseXmlDecl() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     Character firstChar = tq.consume(); [EOL]     boolean procInstr = firstChar.toString().equals(\\\"!\\\"); [EOL]     String data = tq.chompTo(\\\">\\\"); [EOL]     XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr); [EOL]     last().appendChild(decl); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] return Attribute.createFromEncoded(key, value); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] return byId(); [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] @Override [LINE] @Override [EOL] public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     result = 31 * result + (tag != null ? tag.hashCode() : 0); [EOL]     return result; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] for (Element element : contents) { [LINE] public Elements attr(String attributeKey, String attributeValue) { [EOL]     for (Element element : contents) { [EOL]         element.attr(attributeKey, attributeValue); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] while (!queue.isEmpty() && !matchesAny(seq)) [LINE] public String consumeToAny(String... seq) { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && !matchesAny(seq)) accum.append(consume()); [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void wrap() { [EOL]     String h = \\\"<p><b>This</b> is <b>jsoup</b></p>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select(\\\"b\\\").wrap(\\\"<i></i>\\\"); [EOL]     assertEquals(\\\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\\\", doc.body().html()); [EOL] }", "nl": "[LINE] public Elements wrap(String html) { [LINE] public Elements wrap(String html) { [EOL]     Validate.notEmpty(html); [EOL]     for (Element element : contents) { [EOL]         element.wrap(html); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] this.tagName = tagName; [LINE] Tag(String tagName) { [EOL]     this.tagName = tagName; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] tq.consumeWhitespace(); [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] Elements children = new Elements(); [LINE] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] } else if (tq.matchChomp(\\\"[\\\")) { [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] numDiscarded += copySafeNodes(sourceEl, dest); [LINE] private int copySafeNodes(Element source, Element dest) { [EOL]     List<Node> sourceChildren = source.childNodes(); [EOL]     int numDiscarded = 0; [EOL]     for (Node sourceChild : sourceChildren) { [EOL]         if (sourceChild instanceof Element) { [EOL]             Element sourceEl = (Element) sourceChild; [EOL]             if (whitelist.isSafeTag(sourceEl.tagName())) { [EOL]                 ElementMeta meta = createSafeElement(sourceEl); [EOL]                 Element destChild = meta.el; [EOL]                 dest.appendChild(destChild); [EOL]                 numDiscarded += meta.numAttribsDiscarded; [EOL]                 numDiscarded += copySafeNodes(sourceEl, destChild); [EOL]             } else { [EOL]                 numDiscarded++; [EOL]                 numDiscarded += copySafeNodes(sourceEl, dest); [EOL]             } [EOL]         } else if (sourceChild instanceof TextNode) { [EOL]             TextNode sourceText = (TextNode) sourceChild; [EOL]             TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri()); [EOL]             dest.appendChild(destText); [EOL]         } [EOL]     } [EOL]     return numDiscarded; [EOL] } public Cleaner(Whitelist whitelist);  ElementMeta(Element el, int numAttribsDiscarded); public Document clean(Document dirtyDocument); public boolean isValid(Document dirtyDocument); private int copySafeNodes(Element source, Element dest); private ElementMeta createSafeElement(Element sourceEl); Whitelist whitelist"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] TextNode textNode = (TextNode) child; [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] Set<String> classes = classNames(); [LINE] public Element removeClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.remove(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] Validate.notNull(parentNode); [LINE] public void replaceWith(Node in) { [EOL]     Validate.notNull(in); [EOL]     Validate.notNull(parentNode); [EOL]     parentNode.replaceChild(this, in); [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\\\"); [EOL]     Element p = doc.getElementById(\\\"1\\\"); [EOL]     assertEquals(\\\"there\\\", p.text()); [EOL]     assertEquals(\\\"Hello\\\", p.previousElementSibling().text()); [EOL]     assertEquals(\\\"this\\\", p.nextElementSibling().text()); [EOL]     assertEquals(\\\"Hello\\\", p.firstElementSibling().text()); [EOL]     assertEquals(\\\"element\\\", p.lastElementSibling().text()); [EOL] }", "nl": "[LINE] List<Element> siblings = parent().children(); [LINE] public Element nextElementSibling() { [EOL]     List<Element> siblings = parent().children(); [EOL]     Integer index = indexInList(this, siblings); [EOL]     Validate.notNull(index); [EOL]     if (siblings.size() > index + 1) [EOL]         return siblings.get(index + 1); [EOL]     else [EOL]         return null; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p></div>\\\"); [EOL]     assertEquals(\\\"<p>Hello</p>\\\", doc.getElementsByTag(\\\"div\\\").get(0).html()); [EOL] }", "nl": "[LINE] html(accum); [LINE] public String html() { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     html(accum); [EOL]     return accum.toString().trim(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\\\"two three\\\", p.text()); [EOL]     assertEquals(\\\"<span>two</span> three\\\", p.html()); [EOL] }", "nl": "[LINE] out.parentNode = null; [LINE] protected void removeChild(Node out) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     int index = indexInList(out, childNodes); [EOL]     childNodes.remove(index); [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\\\"); [EOL]     Elements ps = doc.select(\\\"div p:eq(0)\\\"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals(\\\"One\\\", ps.get(0).text()); [EOL]     assertEquals(\\\"Four\\\", ps.get(1).text()); [EOL]     Elements ps2 = doc.select(\\\"div:eq(0) p:eq(0)\\\"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals(\\\"One\\\", ps2.get(0).text()); [EOL]     assertEquals(\\\"p\\\", ps2.get(0).tagName()); [EOL] }", "nl": "[LINE] return indexEquals(); [LINE] private Elements findElements() { [EOL]     if (tq.matchChomp(\\\"#\\\")) { [EOL]         return byId(); [EOL]     } else if (tq.matchChomp(\\\".\\\")) { [EOL]         return byClass(); [EOL]     } else if (tq.matchesWord()) { [EOL]         return byTag(); [EOL]     } else if (tq.matchChomp(\\\"[\\\")) { [EOL]         return byAttribute(); [EOL]     } else if (tq.matchChomp(\\\"*\\\")) { [EOL]         return allElements(); [EOL]     } else if (tq.matchChomp(\\\":lt(\\\")) { [EOL]         return indexLessThan(); [EOL]     } else if (tq.matchChomp(\\\":gt(\\\")) { [EOL]         return indexGreaterThan(); [EOL]     } else if (tq.matchChomp(\\\":eq(\\\")) { [EOL]         return indexEquals(); [EOL]     } else { [EOL]         throw new SelectorParseException(\\\"Could not parse query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] public String absUrl(String attributeKey) { [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] List<Character> chars = queue.subList(0, len); [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] private Elements byAttribute() { [LINE] private Elements byAttribute() { [EOL]     String key = tq.consumeToAny(\\\"=\\\", \\\"!=\\\", \\\"^=\\\", \\\"$=\\\", \\\"*=\\\", \\\"]\\\"); [EOL]     Validate.notEmpty(key); [EOL]     if (tq.matchChomp(\\\"]\\\")) { [EOL]         return root.getElementsByAttribute(key); [EOL]     } else { [EOL]         if (tq.matchChomp(\\\"=\\\")) [EOL]             return root.getElementsByAttributeValue(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"!=\\\")) [EOL]             return root.getElementsByAttributeValueNot(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"^=\\\")) [EOL]             return root.getElementsByAttributeValueStarting(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"$=\\\")) [EOL]             return root.getElementsByAttributeValueEnding(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"*=\\\")) [EOL]             return root.getElementsByAttributeValueContaining(key, tq.chompTo(\\\"]\\\")); [EOL]         else [EOL]             throw new SelectorParseException(\\\"Could not parse attribute query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] for (Element e: elements) { [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] static String load(File in, String charsetName) throws IOException { [LINE] static String load(File in, String charsetName) throws IOException { [EOL]     InputStream inStream = new FileInputStream(in); [EOL]     String data = readInputStream(inStream, charsetName); [EOL]     inStream.close(); [EOL]     return data; [EOL] }  static String load(File in, String charsetName) throws IOException;  static String load(URL url, int timeoutMillis) throws IOException; private static String readInputStream(InputStream inStream, String charsetName) throws IOException"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public boolean isEmpty() { [LINE] public boolean isEmpty() { [EOL]     return queue.isEmpty(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] this.key = key.trim().toLowerCase(); [LINE] AttributeKeyPair(String key, String value) { [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     this.key = key.trim().toLowerCase(); [EOL]     this.value = value.trim().toLowerCase(); [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] public Elements children() { [LINE] public Elements children() { [EOL]     List<Element> elements = new ArrayList<Element>(); [EOL]     for (Node node : childNodes) { [EOL]         if (node instanceof Element) [EOL]             elements.add((Element) node); [EOL]     } [EOL]     return new Elements(elements); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] URL abs = new URL(base, relUrl); [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] String key = tq.consumeToAny(\\\"=\\\", \\\"!=\\\", \\\"^=\\\", \\\"$=\\\", \\\"*=\\\", \\\"]\\\"); // eq, not, start, end, contain, (no val) [LINE] private Elements byAttribute() { [EOL]     String key = tq.consumeToAny(\\\"=\\\", \\\"!=\\\", \\\"^=\\\", \\\"$=\\\", \\\"*=\\\", \\\"]\\\"); [EOL]     Validate.notEmpty(key); [EOL]     if (tq.matchChomp(\\\"]\\\")) { [EOL]         return root.getElementsByAttribute(key); [EOL]     } else { [EOL]         if (tq.matchChomp(\\\"=\\\")) [EOL]             return root.getElementsByAttributeValue(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"!=\\\")) [EOL]             return root.getElementsByAttributeValueNot(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"^=\\\")) [EOL]             return root.getElementsByAttributeValueStarting(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"$=\\\")) [EOL]             return root.getElementsByAttributeValueEnding(key, tq.chompTo(\\\"]\\\")); [EOL]         else if (tq.matchChomp(\\\"*=\\\")) [EOL]             return root.getElementsByAttributeValueContaining(key, tq.chompTo(\\\"]\\\")); [EOL]         else [EOL]             throw new SelectorParseException(\\\"Could not parse attribute query \\\" + query); [EOL]     } [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = \\\"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\\\"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }", "nl": "[LINE] return parser.parse(); [LINE] public static Document parseBodyFragment(String bodyHtml, String baseUri) { [EOL]     Parser parser = new Parser(bodyHtml, baseUri, true); [EOL]     return parser.parse(); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testHasText() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>Hello</p><p></p></div>\\\"); [EOL]     Element div = doc.select(\\\"div\\\").first(); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(div.hasText()); [EOL]     assertTrue(ps.first().hasText()); [EOL]     assertFalse(ps.last().hasText()); [EOL] }", "nl": "[LINE] public boolean hasText() { [LINE] public boolean hasText() { [EOL]     for (Node child : childNodes) { [EOL]         if (child instanceof TextNode) { [EOL]             TextNode textNode = (TextNode) child; [EOL]             if (!textNode.isBlank()) [EOL]                 return true; [EOL]         } else if (child instanceof Element) { [EOL]             Element el = (Element) child; [EOL]             if (el.hasText()) [EOL]                 return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void parsesSimpleDocument() { [EOL]     String html = \\\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\\\"foo.png\\\\\" /></p></body></html>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.body().child(0); [EOL]     assertEquals(\\\"p\\\", p.tagName()); [EOL]     Element img = p.child(0); [EOL]     assertEquals(\\\"foo.png\\\", img.attr(\\\"src\\\")); [EOL]     assertEquals(\\\"img\\\", img.tagName()); [EOL] }", "nl": "[LINE] if (node instanceof TextNode) { [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\\\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\\\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\\\"class\\\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\\\"mellow yellow\\\", span.className()); [EOL]     assertTrue(span.hasClass(\\\"mellow\\\")); [EOL]     assertTrue(span.hasClass(\\\"yellow\\\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\\\"mellow\\\")); [EOL]     assertTrue(classes.contains(\\\"yellow\\\")); [EOL]     assertEquals(\\\"\\\", doc.className()); [EOL]     assertFalse(doc.hasClass(\\\"mellow\\\")); [EOL] }", "nl": "[LINE] return Collector.collect(new Evaluator.Attribute(key), this); [LINE] public Elements getElementsByAttribute(String key) { [EOL]     Validate.notEmpty(key); [EOL]     key = key.trim().toLowerCase(); [EOL]     return Collector.collect(new Evaluator.Attribute(key), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse(\\\"<p>Hello</p>\\\"); [EOL]     Document withTitle = Jsoup.parse(\\\"<title>First</title><title>Ignore</title><p>Hello</p>\\\"); [EOL]     assertEquals(\\\"\\\", noTitle.title()); [EOL]     noTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", noTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", noTitle.select(\\\"title\\\").first().text()); [EOL]     assertEquals(\\\"First\\\", withTitle.title()); [EOL]     withTitle.title(\\\"Hello\\\"); [EOL]     assertEquals(\\\"Hello\\\", withTitle.title()); [EOL]     assertEquals(\\\"Hello\\\", withTitle.select(\\\"title\\\").first().text()); [EOL] }", "nl": "[LINE] return false; [LINE] boolean canContain(Tag child) { [EOL]     Validate.notNull(child); [EOL]     if (child.isBlock && !this.canContainBlock) [EOL]         return false; [EOL]     if (!child.isBlock && !this.canContainInline) [EOL]         return false; [EOL]     if (this.optionalClosing && this.equals(child)) [EOL]         return false; [EOL]     if (this.empty || this.isData()) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"head\\\")) { [EOL]         if (child.tagName.equals(\\\"base\\\") || child.tagName.equals(\\\"script\\\") || child.tagName.equals(\\\"noscript\\\") || child.tagName.equals(\\\"link\\\") || child.tagName.equals(\\\"meta\\\") || child.tagName.equals(\\\"title\\\") || child.tagName.equals(\\\"style\\\") || child.tagName.equals(\\\"object\\\")) { [EOL]             return true; [EOL]         } [EOL]         return false; [EOL]     } [EOL]     if (this.tagName.equals(\\\"dt\\\") && child.tagName.equals(\\\"dd\\\")) [EOL]         return false; [EOL]     if (this.tagName.equals(\\\"dd\\\") && child.tagName.equals(\\\"dt\\\")) [EOL]         return false; [EOL]     return true; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] int len = seq.length(); [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] AttributeKey attrKey = AttributeKey.valueOf(key); [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] if (!matches(seq)) [LINE] public void consume(String seq) { [EOL]     if (!matches(seq)) [EOL]         throw new IllegalStateException(\\\"Queue did not match expected sequence\\\"); [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         throw new IllegalStateException(\\\"Queue not long enough to consume sequence\\\"); [EOL]     for (int i = 0; i < len; i++) { [EOL]         consume(); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return classNames().contains(className); [LINE] public boolean hasClass(String className) { [EOL]     return classNames().contains(className); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] public Character consume() { [LINE] public Character consume() { [EOL]     return queue.removeFirst(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] public boolean hasClass(String className) { [LINE] public boolean hasClass(String className) { [EOL]     return classNames().contains(className); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = \\\"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select(\\\"foo\\\"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals(\\\"bar\\\", foos.first().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"qux\\\", foos.last().attr(\\\"title\\\")); [EOL]     assertEquals(\\\"there\\\", foos.last().text()); [EOL] }", "nl": "[LINE] while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [LINE] private Attribute parseAttribute() { [EOL]     tq.consumeWhitespace(); [EOL]     String key = tq.consumeAttributeKey(); [EOL]     String value = \\\"\\\"; [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchChomp(\\\"=\\\")) { [EOL]         tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(SQ)) { [EOL]             value = tq.chompTo(SQ); [EOL]         } else if (tq.matchChomp(DQ)) { [EOL]             value = tq.chompTo(DQ); [EOL]         } else { [EOL]             StringBuilder valueAccum = new StringBuilder(); [EOL]             while (!tq.matchesAny(\\\"<\\\", \\\"/>\\\", \\\">\\\") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL]                 valueAccum.append(tq.consume()); [EOL]             } [EOL]             value = valueAccum.toString(); [EOL]         } [EOL]         tq.consumeWhitespace(); [EOL]     } [EOL]     if (key.length() != 0) [EOL]         return Attribute.createFromEncoded(key, value); [EOL]     else { [EOL]         tq.consume(); [EOL]         return null; [EOL]     } [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/news-com-au-home.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.news.com.au/\\\"); [EOL]     assertEquals(\\\"News.com.au | News from Australia and around the world online | NewsComAu\\\", doc.title()); [EOL]     assertEquals(\\\"Brace yourself for Metro meltdown\\\", doc.select(\\\".id1225817868581 h4\\\").text().trim()); [EOL]     Element a = doc.select(\\\"a[href=/entertainment/horoscopes]\\\").first(); [EOL]     assertEquals(\\\"/entertainment/horoscopes\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.news.com.au/entertainment/horoscopes\\\", a.attr(\\\"abs:href\\\")); [EOL]     Element hs = doc.select(\\\"a[href*=naughty-corners-are-a-bad-idea]\\\").first(); [EOL]     assertEquals(\\\"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\\\", hs.attr(\\\"href\\\")); [EOL]     assertEquals(hs.attr(\\\"href\\\"), hs.attr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] TextNode tn = (TextNode) node; [LINE] private void normalise(Element element) { [EOL]     List<Node> toMove = new ArrayList<Node>(); [EOL]     for (Node node : element.childNodes) { [EOL]         if (node instanceof TextNode) { [EOL]             TextNode tn = (TextNode) node; [EOL]             if (!tn.isBlank()) [EOL]                 toMove.add(tn); [EOL]         } [EOL]     } [EOL]     for (Node node : toMove) { [EOL]         element.removeChild(node); [EOL]         body().prependChild(node); [EOL]         body().prependChild(new TextNode(\\\" \\\", \\\"\\\")); [EOL]     } [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse(\\\"<a href=/foo>Hello</a>\\\", \\\"http://jsoup.org/\\\"); [EOL]     Element a = doc.select(\\\"a\\\").first(); [EOL]     assertEquals(\\\"/foo\\\", a.attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://jsoup.org/foo\\\", a.attr(\\\"abs:href\\\")); [EOL]     assertFalse(a.hasAttr(\\\"abs:href\\\")); [EOL] }", "nl": "[LINE] try { [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] return this; [LINE] public Element removeClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.remove(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testBinary() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/thumb.jpg\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\"); [EOL]     assertTrue(doc.text().contains(\\\"gd-jpeg\\\")); [EOL] }", "nl": "[LINE] return parse(html, in.getAbsolutePath()); [LINE] public static Document parse(File in, String charsetName) throws IOException { [EOL]     String html = DataUtil.load(in, charsetName); [EOL]     return parse(html, in.getAbsolutePath()); [EOL] } private Jsoup(); public static Document parse(String html, String baseUri); public static Document parse(String html); public static Document parse(URL url, int timeoutMillis) throws IOException; public static Document parse(File in, String charsetName, String baseUri) throws IOException; public static Document parse(File in, String charsetName) throws IOException; public static Document parseBodyFragment(String bodyHtml, String baseUri); public static Document parseBodyFragment(String bodyHtml); public static String clean(String bodyHtml, String baseUri, Whitelist whitelist); public static String clean(String bodyHtml, Whitelist whitelist); public static boolean isValid(String bodyHtml, Whitelist whitelist)"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] if (parentNode == null) [LINE] protected int nodeDepth() { [EOL]     if (parentNode == null) [EOL]         return 0; [EOL]     else [EOL]         return parentNode.nodeDepth() + 1; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals(\\\"two three\\\", p.text()); [EOL]     assertEquals(\\\"<span>two</span> three\\\", p.html()); [EOL] }", "nl": "[LINE] childNodes.remove(index); [LINE] protected void removeChild(Node out) { [EOL]     Validate.isTrue(out.parentNode == this); [EOL]     int index = indexInList(out, childNodes); [EOL]     childNodes.remove(index); [EOL]     out.parentNode = null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void mixCombinatorGroup() { [EOL]     String h = \\\"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\".foo > ol, ol > li + li\\\"); [EOL]     assertEquals(3, els.size()); [EOL]     assertEquals(\\\"ol\\\", els.get(0).tagName()); [EOL]     assertEquals(\\\"Two\\\", els.get(1).text()); [EOL]     assertEquals(\\\"Three\\\", els.get(2).text()); [EOL] }", "nl": "[LINE] elements.addAll(select(subQuery, root)); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testClassDomMethods() { [EOL]     Document doc = Jsoup.parse(\\\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\\\"); [EOL]     List<Element> els = doc.getElementsByAttribute(\\\"class\\\"); [EOL]     Element span = els.get(0); [EOL]     assertEquals(\\\"mellow yellow\\\", span.className()); [EOL]     assertTrue(span.hasClass(\\\"mellow\\\")); [EOL]     assertTrue(span.hasClass(\\\"yellow\\\")); [EOL]     Set<String> classes = span.classNames(); [EOL]     assertEquals(2, classes.size()); [EOL]     assertTrue(classes.contains(\\\"mellow\\\")); [EOL]     assertTrue(classes.contains(\\\"yellow\\\")); [EOL]     assertEquals(\\\"\\\", doc.className()); [EOL]     assertFalse(doc.hasClass(\\\"mellow\\\")); [EOL] }", "nl": "[LINE] this.key = key; [LINE] Attribute(String key) { [EOL]     this.key = key; [EOL] } private Evaluator();  Tag(String tagName);  Id(String id);  Class(String className);  Attribute(String key);  AttributeWithValue(String key, String value);  AttributeWithValueNot(String key, String value);  AttributeWithValueStarting(String key, String value);  AttributeWithValueEnding(String key, String value);  AttributeWithValueContaining(String key, String value);  AttributeKeyPair(String key, String value);  IndexLessThan(int index);  IndexGreaterThan(int index);  IndexEquals(int index);  IndexEvaluator(int index); public abstract boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element); public boolean matches(Element element)"}
{"code": "@Test [EOL] public void and() { [EOL]     String h = \\\"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select(\\\"div.foo\\\"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals(\\\"div\\\", div.first().tagName()); [EOL]     Elements p = doc.select(\\\"div .foo\\\"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals(\\\"p\\\", p.first().tagName()); [EOL]     Elements div2 = doc.select(\\\"div#1.foo.bar[title=bar][name=qux]\\\"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals(\\\"div\\\", div2.first().tagName()); [EOL]     Elements p2 = doc.select(\\\"div *.foo\\\"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals(\\\"p\\\", p2.first().tagName()); [EOL] }", "nl": "[LINE] combinator(\\\" \\\"); [LINE] private Elements select() { [EOL]     tq.consumeWhitespace(); [EOL]     if (tq.matchesAny(combinators)) { [EOL]         elements.add(root); [EOL]         combinator(tq.consume().toString()); [EOL]     } else { [EOL]         addElements(findElements()); [EOL]     } [EOL]     while (!tq.isEmpty()) { [EOL]         boolean seenWhite = tq.consumeWhitespace(); [EOL]         if (tq.matchChomp(\\\",\\\")) { [EOL]             while (!tq.isEmpty()) { [EOL]                 String subQuery = tq.chompTo(\\\",\\\"); [EOL]                 elements.addAll(select(subQuery, root)); [EOL]             } [EOL]         } else if (tq.matchesAny(combinators)) { [EOL]             combinator(tq.consume().toString()); [EOL]         } else if (seenWhite) { [EOL]             combinator(\\\" \\\"); [EOL]         } else { [EOL]             Elements candidates = findElements(); [EOL]             intersectElements(filterForSelf(elements, candidates)); [EOL]         } [EOL]     } [EOL]     return new Elements(elements); [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] StringBuilder accum = new StringBuilder(); [LINE] public String consumeToAny(String... seq) { [EOL]     StringBuilder accum = new StringBuilder(); [EOL]     while (!queue.isEmpty() && !matchesAny(seq)) accum.append(consume()); [EOL]     return accum.toString(); [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] String data = tq.chompTo(\\\">\\\"); [LINE] private void parseXmlDecl() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     Character firstChar = tq.consume(); [EOL]     boolean procInstr = firstChar.toString().equals(\\\"!\\\"); [EOL]     String data = tq.chompTo(\\\">\\\"); [EOL]     XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr); [EOL]     last().appendChild(decl); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void parentChildStar() { [EOL]     String h = \\\"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select(\\\"div > *\\\"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(0).tagName()); [EOL]     assertEquals(\\\"p\\\", divChilds.get(1).tagName()); [EOL]     assertEquals(\\\"span\\\", divChilds.get(2).tagName()); [EOL] }", "nl": "[LINE] continue CHILD; [LINE] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates) { [EOL]     Elements children = new Elements(); [EOL]     CHILD: for (Element c : candidates) { [EOL]         for (Element p : parents) { [EOL]             if (c.parent() != null && c.parent().equals(p)) { [EOL]                 children.add(c); [EOL]                 continue CHILD; [EOL]             } [EOL]         } [EOL]     } [EOL]     return children; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = \\\"<p>Hello<!-- <tr><td>\\\"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag(\\\"p\\\").get(0); [EOL]     assertEquals(\\\"Hello\\\", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals(\\\"Hello\\\", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(\\\" <tr><td>\\\", comment.getData()); [EOL] }", "nl": "[LINE] parseComment(); [LINE] private Document parse() { [EOL]     while (!tq.isEmpty()) { [EOL]         if (tq.matches(\\\"<!--\\\")) { [EOL]             parseComment(); [EOL]         } else if (tq.matches(\\\"<![CDATA[\\\")) { [EOL]             parseCdata(); [EOL]         } else if (tq.matches(\\\"<?\\\") || tq.matches(\\\"<!\\\")) { [EOL]             parseXmlDecl(); [EOL]         } else if (tq.matches(\\\"</\\\")) { [EOL]             parseEndTag(); [EOL]         } else if (tq.matches(\\\"<\\\")) { [EOL]             parseStartTag(); [EOL]         } else { [EOL]             parseTextNode(); [EOL]         } [EOL]     } [EOL]     return doc.normalise(); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] Character check = Character.toLowerCase(seqChars[i]); [LINE] public boolean matches(String seq) { [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         return false; [EOL]     List<Character> chars = queue.subList(0, len); [EOL]     char[] seqChars = seq.toCharArray(); [EOL]     for (int i = 0; i < len; i++) { [EOL]         Character found = Character.toLowerCase(chars.get(i)); [EOL]         Character check = Character.toLowerCase(seqChars[i]); [EOL]         if (!found.equals(check)) [EOL]             return false; [EOL]     } [EOL]     return true; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testAddNewText() { [EOL]     Document doc = Jsoup.parse(\\\"<div id=1><p>Hello</p></div>\\\"); [EOL]     Element div = doc.getElementById(\\\"1\\\"); [EOL]     div.appendText(\\\" there & now >\\\"); [EOL]     assertEquals(\\\"<p>Hello</p> there &amp; now &gt;\\\", TextUtil.stripNewlines(div.html())); [EOL] }", "nl": "[LINE] public Element appendText(String text) { [LINE] public Element appendText(String text) { [EOL]     TextNode node = new TextNode(text, baseUri()); [EOL]     appendChild(node); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void generalSiblings() { [EOL]     String h = \\\"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements els = doc.select(\\\"#1 ~ #3\\\"); [EOL]     assertEquals(1, els.size()); [EOL]     assertEquals(\\\"Three\\\", els.first().text()); [EOL] }", "nl": "[LINE] SIBLING: for (Element c: candidates) { [LINE] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates) { [EOL]     Elements output = new Elements(); [EOL]     SIBLING: for (Element c : candidates) { [EOL]         for (Element e : elements) { [EOL]             if (!e.parent().equals(c.parent())) [EOL]                 continue; [EOL]             int ePos = e.elementSiblingIndex(); [EOL]             int cPos = c.elementSiblingIndex(); [EOL]             if (cPos > ePos) { [EOL]                 output.add(c); [EOL]                 continue SIBLING; [EOL]             } [EOL]         } [EOL]     } [EOL]     return output; [EOL] } private Selector(String query, Element root); public SelectorParseException(String s); public static Elements select(String query, Element root); public static Elements select(String query, Iterable<Element> roots); private Elements select(); private void combinator(String combinator); private Elements findElements(); private void addElements(Collection<Element> add); private void intersectElements(Collection<Element> intersect); private Elements byId(); private Elements byClass(); private Elements byTag(); private Elements byAttribute(); private Elements allElements(); private Elements indexLessThan(); private Elements indexGreaterThan(); private Elements indexEquals(); private int consumeIndex(); private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); String[] combinators=Optional[{ \\\",\\\", \\\">\\\", \\\"+\\\", \\\"~\\\", \\\" \\\" }]; Element root; LinkedHashSet<Element> elements; String query; TokenQueue tq"}
{"code": "@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = \\\"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals(\\\"<p><a rel=\\\\\"nofollow\\\\\">Dodgy</a> <a href=\\\\\"http://nice.com\\\\\" rel=\\\\\"nofollow\\\\\">Nice</a></p><blockquote>Hello</blockquote>\\\", TextUtil.stripNewlines(cleanHtml)); [EOL] }", "nl": "[LINE] Validate.notEmpty(value); [LINE] public Whitelist addEnforcedAttribute(String tag, String key, String value) { [EOL]     Validate.notEmpty(tag); [EOL]     Validate.notEmpty(key); [EOL]     Validate.notEmpty(value); [EOL]     TagName tagName = TagName.valueOf(tag); [EOL]     AttributeKey attrKey = AttributeKey.valueOf(key); [EOL]     AttributeValue attrVal = AttributeValue.valueOf(value); [EOL]     if (enforcedAttributes.containsKey(tagName)) { [EOL]         enforcedAttributes.get(tagName).put(attrKey, attrVal); [EOL]     } else { [EOL]         Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>(); [EOL]         attrMap.put(attrKey, attrVal); [EOL]         enforcedAttributes.put(tagName, attrMap); [EOL]     } [EOL]     return this; [EOL] } public Whitelist();  TagName(String value);  AttributeKey(String value);  AttributeValue(String value);  Protocol(String value);  TypedValue(String value); public static Whitelist none(); public static Whitelist simpleText(); public static Whitelist basic(); public static Whitelist basicWithImages(); public static Whitelist relaxed(); public Whitelist addTags(String... tags); public Whitelist addAttributes(String tag, String... keys); public Whitelist addEnforcedAttribute(String tag, String key, String value); public Whitelist addProtocols(String tag, String key, String... protocols);  boolean isSafeTag(String tag);  boolean isSafeAttribute(String tagName, Element el, Attribute attr); private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols);  Attributes getEnforcedAttributes(String tagName);  static TagName valueOf(String value);  static AttributeKey valueOf(String value);  static AttributeValue valueOf(String value);  static Protocol valueOf(String value); public int hashCode(); public boolean equals(Object obj); public String toString(); Set<TagName> tagNames; Map<TagName, Set<AttributeKey>> attributes; Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols"}
{"code": "@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = \\\"<img alt=\\\\\"\\\\\" src= unknown=''>\\\"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals(\\\"<img alt=\\\\\"\\\\\" />\\\", cleanHtml); [EOL] }", "nl": "[LINE] public String html() { [LINE] public String html() { [EOL]     return String.format(\\\"%s=\\\\\"%s\\\\\"\\\", key, StringEscapeUtils.escapeHtml(value)); [EOL] } public Attribute(String key, String value); public String getKey(); public void setKey(String key); public String getValue(); public void setValue(String value); public String html(); public String toString(); public static Attribute createFromEncoded(String unencodedKey, String encodedValue); public boolean equals(Object o); public int hashCode(); String key; String value"}
{"code": "@Test [EOL] public void testElementSiblingIndex() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     assertTrue(0 == ps.get(0).elementSiblingIndex()); [EOL]     assertTrue(1 == ps.get(1).elementSiblingIndex()); [EOL]     assertTrue(2 == ps.get(2).elementSiblingIndex()); [EOL] }", "nl": "[LINE] if (parent() == null) return 0; [LINE] public Integer elementSiblingIndex() { [EOL]     if (parent() == null) [EOL]         return 0; [EOL]     return indexInList(this, parent().children()); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] String[] names = className().split(\\\"\\\\s+\\\"); [LINE] public Set<String> classNames() { [EOL]     if (classNames == null) { [EOL]         String[] names = className().split(\\\"\\\\s+\\\"); [EOL]         classNames = new LinkedHashSet<String>(Arrays.asList(names)); [EOL]     } [EOL]     return classNames; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/smh-biz-article-1.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\\\"); [EOL]     assertEquals(\\\"The board\u9225\u6a9a next fear: the female quota\\\", doc.title()); [EOL]     assertEquals(\\\"en\\\", doc.select(\\\"html\\\").attr(\\\"xml:lang\\\")); [EOL]     Elements articleBody = doc.select(\\\".articleBody > *\\\"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }", "nl": "[LINE] attributes.put(DATA_KEY, data); [LINE] public DataNode(String data, String baseUri) { [EOL]     super(baseUri); [EOL]     attributes.put(DATA_KEY, data); [EOL] } public DataNode(String data, String baseUri); public String nodeName(); public String getWholeData();  void outerHtml(StringBuilder accum); public String toString(); public static DataNode createFromEncoded(String encodedData, String baseUri); String DATA_KEY=Optional[\\\"data\\\"]"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] private Tag setOptionalClosing() { [LINE] private Tag setOptionalClosing() { [EOL]     optionalClosing = true; [EOL]     return this; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] return tag; [LINE] private static Tag register(Tag tag) { [EOL]     tag.setAncestor(defaultAncestor.tagName); [EOL]     synchronized (tags) { [EOL]         tags.put(tag.tagName, tag); [EOL]     } [EOL]     return tag; [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] Element html = doc.appendElement(\\\"html\\\"); [LINE] static public Document createShell(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     Document doc = new Document(baseUri); [EOL]     Element html = doc.appendElement(\\\"html\\\"); [EOL]     html.appendElement(\\\"head\\\"); [EOL]     html.appendElement(\\\"body\\\"); [EOL]     return doc; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void attributes() { [EOL]     String h = \\\"<p title=foo><p title=bar><p class=foo><p class=bar>\\\"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select(\\\"p[title]\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr(\\\"title\\\")); [EOL]     assertFalse(withTitle.hasAttr(\\\"class\\\")); [EOL]     assertEquals(\\\"foo\\\", withTitle.attr(\\\"title\\\")); [EOL]     withTitle.removeAttr(\\\"title\\\"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select(\\\"p[title]\\\").size()); [EOL]     Elements ps = doc.select(\\\"p\\\").attr(\\\"style\\\", \\\"classy\\\"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals(\\\"classy\\\", ps.last().attr(\\\"style\\\")); [EOL]     assertEquals(\\\"bar\\\", ps.last().attr(\\\"class\\\")); [EOL] }", "nl": "[LINE] return this; [LINE] public Elements attr(String attributeKey, String attributeValue) { [EOL]     for (Element element : contents) { [EOL]         element.attr(attributeKey, attributeValue); [EOL]     } [EOL]     return this; [EOL] } public Elements(); public Elements(Collection<Element> elements); public Elements(List<Element> elements); public Elements(Element... elements); public String attr(String attributeKey); public boolean hasAttr(String attributeKey); public Elements attr(String attributeKey, String attributeValue); public Elements removeAttr(String attributeKey); public Elements addClass(String className); public Elements removeClass(String className); public Elements toggleClass(String className); public boolean hasClass(String className); public String val(); public Elements val(String value); public String text(); public boolean hasText(); public String html(); public String outerHtml(); public Elements html(String html); public Elements prepend(String html); public Elements append(String html); public Elements wrap(String html); public Elements select(String query); public Elements eq(int index); public boolean is(String query); public Element first(); public Element last(); public int size(); public boolean isEmpty(); public boolean contains(Object o); public Iterator<Element> iterator(); public Object[] toArray(); public T[] toArray(T[] a); public boolean add(Element element); public boolean remove(Object o); public boolean containsAll(Collection<?> c); public boolean addAll(Collection<? extends Element> c); public boolean addAll(int index, Collection<? extends Element> c); public boolean removeAll(Collection<?> c); public boolean retainAll(Collection<?> c); public void clear(); public boolean equals(Object o); public int hashCode(); public Element get(int index); public Element set(int index, Element element); public void add(int index, Element element); public Element remove(int index); public int indexOf(Object o); public int lastIndexOf(Object o); public ListIterator<Element> listIterator(); public ListIterator<Element> listIterator(int index); public List<Element> subList(int fromIndex, int toIndex); List<Element> contents"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] if (matches(s)) [LINE] public boolean matchesAny(String... seq) { [EOL]     for (String s : seq) { [EOL]         if (matches(s)) [EOL]             return true; [EOL]     } [EOL]     return false; [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr); [LINE] private void parseXmlDecl() { [EOL]     tq.consume(\\\"<\\\"); [EOL]     Character firstChar = tq.consume(); [EOL]     boolean procInstr = firstChar.toString().equals(\\\"!\\\"); [EOL]     String data = tq.chompTo(\\\">\\\"); [EOL]     XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr); [EOL]     last().appendChild(decl); [EOL] } private Parser(String html, String baseUri, boolean isBodyFragment); public static Document parse(String html, String baseUri); public static Document parseBodyFragment(String bodyHtml, String baseUri); private Document parse(); private void parseComment(); private void parseXmlDecl(); private void parseEndTag(); private void parseStartTag(); private Attribute parseAttribute(); private void parseTextNode(); private void parseCdata(); private Element addChildToParent(Element child, boolean isEmptyElement); private boolean stackHasValidParent(Tag childTag); private Element popStackToSuitableContainer(Tag tag); private Element popStackToClose(Tag tag); private Element last(); String SQ=Optional[\\\"'\\\"]; String DQ=Optional[\\\"\\\\\"\\\"]; Tag htmlTag=Optional[Tag.valueOf(\\\"html\\\")]; Tag headTag=Optional[Tag.valueOf(\\\"head\\\")]; Tag bodyTag=Optional[Tag.valueOf(\\\"body\\\")]; Tag titleTag=Optional[Tag.valueOf(\\\"title\\\")]; Tag textareaTag=Optional[Tag.valueOf(\\\"textarea\\\")]; LinkedList<Element> stack; TokenQueue tq; Document doc; String baseUri"}
{"code": "@Test [EOL] public void handlesBaseUri() { [EOL]     Tag tag = Tag.valueOf(\\\"a\\\"); [EOL]     Attributes attribs = new Attributes(); [EOL]     attribs.put(\\\"relHref\\\", \\\"/foo\\\"); [EOL]     attribs.put(\\\"absHref\\\", \\\"http://bar/qux\\\"); [EOL]     Element noBase = new Element(tag, \\\"\\\", attribs); [EOL]     assertEquals(\\\"\\\", noBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", noBase.absUrl(\\\"absHref\\\")); [EOL]     Element withBase = new Element(tag, \\\"http://foo/\\\", attribs); [EOL]     assertEquals(\\\"http://foo/foo\\\", withBase.absUrl(\\\"relHref\\\")); [EOL]     assertEquals(\\\"http://bar/qux\\\", withBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", withBase.absUrl(\\\"noval\\\")); [EOL]     Element dodgyBase = new Element(tag, \\\"wtf://no-such-protocol/\\\", attribs); [EOL]     assertEquals(\\\"http://bar/qux\\\", dodgyBase.absUrl(\\\"absHref\\\")); [EOL]     assertEquals(\\\"\\\", dodgyBase.absUrl(\\\"relHref\\\")); [EOL] }", "nl": "[LINE] URL abs = new URL(relUrl); [LINE] public String absUrl(String attributeKey) { [EOL]     Validate.notEmpty(attributeKey); [EOL]     String relUrl = attr(attributeKey); [EOL]     if (!hasAttr(attributeKey)) { [EOL]         return \\\"\\\"; [EOL]     } else { [EOL]         URL base; [EOL]         try { [EOL]             try { [EOL]                 base = new URL(baseUri); [EOL]             } catch (MalformedURLException e) { [EOL]                 URL abs = new URL(relUrl); [EOL]                 return abs.toExternalForm(); [EOL]             } [EOL]             URL abs = new URL(base, relUrl); [EOL]             return abs.toExternalForm(); [EOL]         } catch (MalformedURLException e) { [EOL]             return \\\"\\\"; [EOL]         } [EOL]     } [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
{"code": "@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf(\\\"div\\\"); [EOL]     Tag p = Tag.valueOf(\\\"p\\\"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }", "nl": "[LINE] private static Tag createBlock(String tagName) { [LINE] private static Tag createBlock(String tagName) { [EOL]     return register(new Tag(tagName)); [EOL] } private Tag(String tagName); public String getName(); public static Tag valueOf(String tagName);  boolean canContain(Tag child); public boolean isBlock(); public boolean canContainBlock(); public boolean isInline(); public boolean isData(); public boolean isEmpty(); public boolean preserveWhitespace();  Tag getImplicitParent();  boolean isValidParent(Tag child); public boolean equals(Object o); public int hashCode(); public String toString(); private static Tag createBlock(String tagName); private static Tag createInline(String tagName); private static Tag register(Tag tag); private Tag setContainInlineOnly(); private Tag setContainDataOnly(); private Tag setEmpty(); private Tag setOptionalClosing(); private Tag setPreserveWhitespace(); private Tag setAncestor(String... tagNames); Map<String, Tag> tags=Optional[new HashMap<String, Tag>()]; Tag defaultAncestor; String tagName; boolean isBlock=Optional[true]; boolean canContainBlock=Optional[true]; boolean canContainInline=Optional[true]; boolean optionalClosing=Optional[false]; boolean empty=Optional[false]; boolean preserveWhitespace=Optional[false]; List<Tag> ancestors"}
{"code": "@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = \\\"<style>font-family: bold</style>\\\"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag(\\\"style\\\"); [EOL]     assertEquals(\\\"font-family: bold\\\", tels.get(0).data()); [EOL]     assertEquals(\\\"\\\", tels.get(0).text()); [EOL]     String s = \\\"<p>Hello</p><script>Nope</script><p>There</p>\\\"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals(\\\"Hello There\\\", doc.text()); [EOL]     assertEquals(\\\"Nope\\\", doc.data()); [EOL] }", "nl": "[LINE] for (Node childNode : childNodes) { [LINE] public String data() { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     for (Node childNode : childNodes) { [EOL]         if (childNode instanceof DataNode) { [EOL]             DataNode data = (DataNode) childNode; [EOL]             sb.append(data.getWholeData()); [EOL]         } else if (childNode instanceof Element) { [EOL]             Element element = (Element) childNode; [EOL]             String elementData = element.data(); [EOL]             sb.append(elementData); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return result; [LINE] @Override [EOL] public int hashCode() { [EOL]     int result = super.hashCode(); [EOL]     result = 31 * result + (tag != null ? tag.hashCode() : 0); [EOL]     return result; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] return Collector.collect(new Evaluator.Tag(tagName), this); [LINE] public Elements getElementsByTag(String tagName) { [EOL]     Validate.notEmpty(tagName); [EOL]     tagName = tagName.toLowerCase().trim(); [EOL]     return Collector.collect(new Evaluator.Tag(tagName), this); [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile(\\\"/htmltests/google-ipod.html\\\"); [EOL]     Document doc = Jsoup.parse(in, \\\"UTF-8\\\", \\\"http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10\\\"); [EOL]     assertEquals(\\\"ipod - Google Search\\\", doc.title()); [EOL]     Elements results = doc.select(\\\"h3.r > a\\\"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals(\\\"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\\\", results.get(0).attr(\\\"href\\\")); [EOL]     assertEquals(\\\"http://www.apple.com/itunes/\\\", results.get(1).attr(\\\"href\\\")); [EOL] }", "nl": "[LINE] int len = seq.length(); [LINE] public void consume(String seq) { [EOL]     if (!matches(seq)) [EOL]         throw new IllegalStateException(\\\"Queue did not match expected sequence\\\"); [EOL]     int len = seq.length(); [EOL]     if (len > queue.size()) [EOL]         throw new IllegalStateException(\\\"Queue not long enough to consume sequence\\\"); [EOL]     for (int i = 0; i < len; i++) { [EOL]         consume(); [EOL]     } [EOL] } public TokenQueue(String data); public boolean isEmpty(); public Character peek(); public void addFirst(Character c); public void addFirst(String seq); public boolean matches(String seq); public boolean matchesAny(String... seq); public boolean matchChomp(String seq); public boolean matchesWhitespace(); public boolean matchesWord(); public Character consume(); public void consume(String seq); public String consumeTo(String seq); public String consumeToAny(String... seq); public String chompTo(String seq); public boolean consumeWhitespace(); public String consumeWord(); public String consumeCssIdentifier(); public String consumeAttributeKey(); public String remainder(); public String toString(); LinkedList<Character> queue"}
{"code": "@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse(\\\"<div><p class='mellow yellow'></p><p class='red green'></p>\\\"); [EOL]     Elements els = doc.select(\\\"p\\\"); [EOL]     assertTrue(els.hasClass(\\\"red\\\")); [EOL]     assertFalse(els.hasClass(\\\"blue\\\")); [EOL]     els.addClass(\\\"blue\\\"); [EOL]     els.removeClass(\\\"yellow\\\"); [EOL]     els.toggleClass(\\\"mellow\\\"); [EOL]     assertEquals(\\\"blue\\\", els.get(0).className()); [EOL]     assertEquals(\\\"red green blue mellow\\\", els.get(1).className()); [EOL] }", "nl": "[LINE] Validate.notNull(className); [LINE] public Element removeClass(String className) { [EOL]     Validate.notNull(className); [EOL]     Set<String> classes = classNames(); [EOL]     classes.remove(className); [EOL]     classNames(classes); [EOL]     return this; [EOL] } public Element(Tag tag, String baseUri, Attributes attributes); public Element(Tag tag, String baseUri); public String nodeName(); public String tagName(); public Tag tag(); public boolean isBlock(); public String id(); public Element attr(String attributeKey, String attributeValue); public Element parent(); public Element child(int index); public Elements children(); public Elements select(String query); public Element appendChild(Node child); public Element prependChild(Node child); public Element appendElement(String tagName); public Element prependElement(String tagName); public Element appendText(String text); public Element prependText(String text); public Element append(String html); public Element prepend(String html); public Element empty(); public Element wrap(String html); private Element getDeepChild(Element el); public Elements siblingElements(); public Element nextElementSibling(); public Element previousElementSibling(); public Element firstElementSibling(); public Integer elementSiblingIndex(); public Element lastElementSibling(); public Elements getElementsByTag(String tagName); public Element getElementById(String id); public Elements getElementsByClass(String className); public Elements getElementsByAttribute(String key); public Elements getElementsByAttributeValue(String key, String value); public Elements getElementsByAttributeValueNot(String key, String value); public Elements getElementsByAttributeValueStarting(String key, String valuePrefix); public Elements getElementsByAttributeValueEnding(String key, String valueSuffix); public Elements getElementsByAttributeValueContaining(String key, String match); public Elements getElementsByIndexLessThan(int index); public Elements getElementsByIndexGreaterThan(int index); public Elements getElementsByIndexEquals(int index); public Elements getAllElements(); public String text(); private void text(StringBuilder accum);  boolean preserveWhitespace(); public Element text(String text); public boolean hasText(); public String data(); public String className(); public Set<String> classNames(); public Element classNames(Set<String> classNames); public boolean hasClass(String className); public Element addClass(String className); public Element removeClass(String className); public Element toggleClass(String className); public String val(); public Element val(String value);  void outerHtml(StringBuilder accum); public String html(); private void html(StringBuilder accum); public Element html(String html); public String toString(); public boolean equals(Object o); public int hashCode(); Tag tag; Set<String> classNames"}
{"code": "@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\\\"); [EOL]     assertEquals(\\\"<html><head></head><body><div title=\\\\\"Tags &amp;c.\\\\\"><img src=\\\\\"foo.png\\\\\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>\\\", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }", "nl": "[LINE] @Override [LINE] @Override [EOL] public String outerHtml() { [EOL]     return super.html(); [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One</p><p>Two</p><p>Three</p>\\\"); [EOL]     Elements ps = doc.select(\\\"p\\\"); [EOL]     ps.prepend(\\\"<b>Bold</b>\\\").append(\\\"<i>Ital</i>\\\"); [EOL]     assertEquals(\\\"<p><b>Bold</b>Two<i>Ital</i></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html(\\\"<span>Gone</span>\\\"); [EOL]     assertEquals(\\\"<p><span>Gone</span></p>\\\", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }", "nl": "[LINE] static public Document createShell(String baseUri) { [LINE] static public Document createShell(String baseUri) { [EOL]     Validate.notNull(baseUri); [EOL]     Document doc = new Document(baseUri); [EOL]     Element html = doc.appendElement(\\\"html\\\"); [EOL]     html.appendElement(\\\"head\\\"); [EOL]     html.appendElement(\\\"body\\\"); [EOL]     return doc; [EOL] } public Document(String baseUri); public static Document createShell(String baseUri); public Element head(); public Element body(); public String title(); public void title(String title); public Element createElement(String tagName); public Document normalise(); private void normalise(Element element); public String outerHtml(); public Element text(String text); public String nodeName()"}
{"code": "@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse(\\\"<p>One <span>two</span> three</p>\\\"); [EOL]     Element p = doc.select(\\\"p\\\").first(); [EOL]     Element insert = doc.createElement(\\\"em\\\").text(\\\"foo\\\"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals(\\\"One <em>foo</em> three\\\", p.html()); [EOL] }", "nl": "[LINE] Validate.notNull(search); [LINE] protected static <N extends Node> Integer indexInList(N search, List<N> nodes) { [EOL]     Validate.notNull(search); [EOL]     Validate.notNull(nodes); [EOL]     for (int i = 0; i < nodes.size(); i++) { [EOL]         N node = nodes.get(i); [EOL]         if (node.equals(search)) [EOL]             return i; [EOL]     } [EOL]     return null; [EOL] } protected Node(String baseUri, Attributes attributes); protected Node(String baseUri); public abstract String nodeName(); public String attr(String attributeKey); public Attributes attributes(); public Node attr(String attributeKey, String attributeValue); public boolean hasAttr(String attributeKey); public Node removeAttr(String attributeKey); public String baseUri(); public void setBaseUri(String baseUri); public String absUrl(String attributeKey); public Node childNode(int index); public List<Node> childNodes(); public Node parent(); public void remove(); public void replaceWith(Node in); protected void setParentNode(Node parentNode); protected void replaceChild(Node out, Node in); protected void removeChild(Node out); protected void addChild(Node in); protected int nodeDepth(); public List<Node> siblingNodes(); public Node nextSibling(); public Node previousSibling(); public Integer siblingIndex(); protected static Integer indexInList(N search, List<N> nodes); public String outerHtml();  abstract void outerHtml(StringBuilder accum); public String toString(); protected void indent(StringBuilder accum); public boolean equals(Object o); public int hashCode(); Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri"}
