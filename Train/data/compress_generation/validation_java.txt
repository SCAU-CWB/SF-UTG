public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCP437FileRoundtripImplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, false); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }