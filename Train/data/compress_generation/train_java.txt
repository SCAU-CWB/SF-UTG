public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDeleteFromJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         changes.delete(\"META-INF\"); [EOL]         changes.delete(\".classpath\"); [EOL]         changes.delete(\".project\"); [EOL]         final File input = getFile(\"bla.jar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]         temp = new File(dir, \"bla.jar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testZipFileReadsUnicodeFields() throws IOException { [EOL]     File file = File.createTempFile(\"unicode-test\", \".zip\"); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         createTestFile(file, US_ASCII, false, true); [EOL]         zf = new ZipFile(file, US_ASCII, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (file.exists()) { [EOL]             file.delete(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testEquals() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     ZipLong zl2 = new ZipLong(0x12345678); [EOL]     ZipLong zl3 = new ZipLong(0x87654321); [EOL]     assertTrue(\"reflexive\", zl.equals(zl)); [EOL]     assertTrue(\"works\", zl.equals(zl2)); [EOL]     assertTrue(\"works, part two\", !zl.equals(zl3)); [EOL]     assertTrue(\"symmetric\", zl2.equals(zl)); [EOL]     assertTrue(\"null handling\", !zl.equals(null)); [EOL]     assertTrue(\"non ZipLong handling\", !zl.equals(new Integer(0x1234))); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testAddAsFirstExtraField() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 2, result.length); [EOL]     assertSame(u2, result[0]); [EOL]     assertSame(a, result[1]); [EOL]     assertEquals(\"length second pass\", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(u3, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertSame(a, result[2]); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testClone() { [EOL]     AsiExtraField s1 = new AsiExtraField(); [EOL]     s1.setUserId(42); [EOL]     s1.setGroupId(12); [EOL]     s1.setLinkedFile(\"foo\"); [EOL]     s1.setMode(0644); [EOL]     s1.setDirectory(true); [EOL]     AsiExtraField s2 = (AsiExtraField) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1.getUserId(), s2.getUserId()); [EOL]     assertEquals(s1.getGroupId(), s2.getGroupId()); [EOL]     assertEquals(s1.getLinkedFile(), s2.getLinkedFile()); [EOL]     assertEquals(s1.getMode(), s2.getMode()); [EOL]     assertEquals(s1.isDirectory(), s2.isDirectory()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testEquals() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     ZipLong zl2 = new ZipLong(0x12345678); [EOL]     ZipLong zl3 = new ZipLong(0x87654321); [EOL]     assertTrue(\"reflexive\", zl.equals(zl)); [EOL]     assertTrue(\"works\", zl.equals(zl2)); [EOL]     assertTrue(\"works, part two\", !zl.equals(zl3)); [EOL]     assertTrue(\"symmetric\", zl2.equals(zl)); [EOL]     assertTrue(\"null handling\", !zl.equals(null)); [EOL]     assertTrue(\"non ZipLong handling\", !zl.equals(new Integer(0x1234))); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testZipFileReadsUnicodeFields() throws IOException { [EOL]     File file = File.createTempFile(\"unicode-test\", \".zip\"); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         createTestFile(file, US_ASCII, false, true); [EOL]         zf = new ZipFile(file, US_ASCII, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (file.exists()) { [EOL]             file.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testToBytes() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     byte[] result = zl.getBytes(); [EOL]     assertEquals(\"length getBytes\", 4, result.length); [EOL]     assertEquals(\"first byte getBytes\", 0x78, result[0]); [EOL]     assertEquals(\"second byte getBytes\", 0x56, result[1]); [EOL]     assertEquals(\"third byte getBytes\", 0x34, result[2]); [EOL]     assertEquals(\"fourth byte getBytes\", 0x12, result[3]); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testAddAsFirstExtraField() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 2, result.length); [EOL]     assertSame(u2, result[0]); [EOL]     assertSame(a, result[1]); [EOL]     assertEquals(\"length second pass\", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(u3, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertSame(a, result[2]); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCP437FileRoundtripImplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, false); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testAddAsFirstExtraField() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 2, result.length); [EOL]     assertSame(u2, result[0]); [EOL]     assertSame(a, result[1]); [EOL]     assertEquals(\"length second pass\", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(u3, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertSame(a, result[2]); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testClone() { [EOL]     AsiExtraField s1 = new AsiExtraField(); [EOL]     s1.setUserId(42); [EOL]     s1.setGroupId(12); [EOL]     s1.setLinkedFile(\"foo\"); [EOL]     s1.setMode(0644); [EOL]     s1.setDirectory(true); [EOL]     AsiExtraField s2 = (AsiExtraField) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1.getUserId(), s2.getUserId()); [EOL]     assertEquals(s1.getGroupId(), s2.getGroupId()); [EOL]     assertEquals(s1.getLinkedFile(), s2.getLinkedFile()); [EOL]     assertEquals(s1.getMode(), s2.getMode()); [EOL]     assertEquals(s1.isDirectory(), s2.isDirectory()); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     { [EOL]         final File file1 = getFile(\"test1.xml\"); [EOL]         final File file2 = getFile(\"test2.xml\"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]         out.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is); [EOL]     Map result = new HashMap(); [EOL]     ArchiveEntry entry = null; [EOL]     while ((entry = in.getNextEntry()) != null) { [EOL]         File target = new File(dir, entry.getName()); [EOL]         final OutputStream out = new FileOutputStream(target); [EOL]         IOUtils.copy(in, out); [EOL]         out.close(); [EOL]         result.put(entry.getName(), target); [EOL]     } [EOL]     in.close(); [EOL]     int lineSepLength = System.getProperty(\"line.separator\").length(); [EOL]     File t = (File) result.get(\"test1.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 72 + 4 * lineSepLength, t.length()); [EOL]     t = (File) result.get(\"test2.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 73 + 5 * lineSepLength, t.length()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testClone() { [EOL]     ZipShort s1 = new ZipShort(42); [EOL]     ZipShort s2 = (ZipShort) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.getValue(), s2.getValue()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testEquals() { [EOL]     ZipShort zs = new ZipShort(0x1234); [EOL]     ZipShort zs2 = new ZipShort(0x1234); [EOL]     ZipShort zs3 = new ZipShort(0x5678); [EOL]     assertTrue(\"reflexive\", zs.equals(zs)); [EOL]     assertTrue(\"works\", zs.equals(zs2)); [EOL]     assertTrue(\"works, part two\", !zs.equals(zs3)); [EOL]     assertTrue(\"symmetric\", zs2.equals(zs)); [EOL]     assertTrue(\"null handling\", !zs.equals(null)); [EOL]     assertTrue(\"non ZipShort handling\", !zs.equals(new Integer(0x1234))); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testAddAsFirstExtraField() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 2, result.length); [EOL]     assertSame(u2, result[0]); [EOL]     assertSame(a, result[1]); [EOL]     assertEquals(\"length second pass\", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(u3, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertSame(a, result[2]); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testAddAsFirstExtraField() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 2, result.length); [EOL]     assertSame(u2, result[0]); [EOL]     assertSame(a, result[1]); [EOL]     assertEquals(\"length second pass\", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(u3, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertSame(a, result[2]); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testEquals() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     ZipLong zl2 = new ZipLong(0x12345678); [EOL]     ZipLong zl3 = new ZipLong(0x87654321); [EOL]     assertTrue(\"reflexive\", zl.equals(zl)); [EOL]     assertTrue(\"works\", zl.equals(zl2)); [EOL]     assertTrue(\"works, part two\", !zl.equals(zl3)); [EOL]     assertTrue(\"symmetric\", zl2.equals(zl)); [EOL]     assertTrue(\"null handling\", !zl.equals(null)); [EOL]     assertTrue(\"non ZipLong handling\", !zl.equals(new Integer(0x1234))); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         changes.delete(\"META-INF\"); [EOL]         changes.delete(\".classpath\"); [EOL]         changes.delete(\".project\"); [EOL]         final File input = getFile(\"bla.jar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]         temp = new File(dir, \"bla.jar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     { [EOL]         final File file1 = getFile(\"test1.xml\"); [EOL]         final File file2 = getFile(\"test2.xml\"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]         out.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is); [EOL]     Map result = new HashMap(); [EOL]     ArchiveEntry entry = null; [EOL]     while ((entry = in.getNextEntry()) != null) { [EOL]         File target = new File(dir, entry.getName()); [EOL]         final OutputStream out = new FileOutputStream(target); [EOL]         IOUtils.copy(in, out); [EOL]         out.close(); [EOL]         result.put(entry.getName(), target); [EOL]     } [EOL]     in.close(); [EOL]     int lineSepLength = System.getProperty(\"line.separator\").length(); [EOL]     File t = (File) result.get(\"test1.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 72 + 4 * lineSepLength, t.length()); [EOL]     t = (File) result.get(\"test2.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 73 + 5 * lineSepLength, t.length()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testToBytes() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     byte[] result = zl.getBytes(); [EOL]     assertEquals(\"length getBytes\", 4, result.length); [EOL]     assertEquals(\"first byte getBytes\", 0x78, result[0]); [EOL]     assertEquals(\"second byte getBytes\", 0x56, result[1]); [EOL]     assertEquals(\"third byte getBytes\", 0x34, result[2]); [EOL]     assertEquals(\"fourth byte getBytes\", 0x12, result[3]); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testEquals() { [EOL]     ZipShort zs = new ZipShort(0x1234); [EOL]     ZipShort zs2 = new ZipShort(0x1234); [EOL]     ZipShort zs3 = new ZipShort(0x5678); [EOL]     assertTrue(\"reflexive\", zs.equals(zs)); [EOL]     assertTrue(\"works\", zs.equals(zs2)); [EOL]     assertTrue(\"works, part two\", !zs.equals(zs3)); [EOL]     assertTrue(\"symmetric\", zs2.equals(zs)); [EOL]     assertTrue(\"null handling\", !zs.equals(null)); [EOL]     assertTrue(\"non ZipShort handling\", !zs.equals(new Integer(0x1234))); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromAndAddToZip() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.delete(\"testdata/test1.xml\"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"blub/test.txt\"); [EOL]     expected.add(\"bla/test5.xml\"); [EOL]     expected.add(\"bla/blubber/test6.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test4.xml\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testEquals() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     ZipLong zl2 = new ZipLong(0x12345678); [EOL]     ZipLong zl3 = new ZipLong(0x87654321); [EOL]     assertTrue(\"reflexive\", zl.equals(zl)); [EOL]     assertTrue(\"works\", zl.equals(zl2)); [EOL]     assertTrue(\"works, part two\", !zl.equals(zl3)); [EOL]     assertTrue(\"symmetric\", zl2.equals(zl)); [EOL]     assertTrue(\"null handling\", !zl.equals(null)); [EOL]     assertTrue(\"non ZipLong handling\", !zl.equals(new Integer(0x1234))); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testEquals() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     ZipLong zl2 = new ZipLong(0x12345678); [EOL]     ZipLong zl3 = new ZipLong(0x87654321); [EOL]     assertTrue(\"reflexive\", zl.equals(zl)); [EOL]     assertTrue(\"works\", zl.equals(zl2)); [EOL]     assertTrue(\"works, part two\", !zl.equals(zl3)); [EOL]     assertTrue(\"symmetric\", zl2.equals(zl)); [EOL]     assertTrue(\"null handling\", !zl.equals(null)); [EOL]     assertTrue(\"non ZipLong handling\", !zl.equals(new Integer(0x1234))); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testAddAsFirstExtraField() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 2, result.length); [EOL]     assertSame(u2, result[0]); [EOL]     assertSame(a, result[1]); [EOL]     assertEquals(\"length second pass\", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(u3, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertSame(a, result[2]); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     { [EOL]         final File file1 = getFile(\"test1.xml\"); [EOL]         final File file2 = getFile(\"test2.xml\"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]         out.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is); [EOL]     Map result = new HashMap(); [EOL]     ArchiveEntry entry = null; [EOL]     while ((entry = in.getNextEntry()) != null) { [EOL]         File target = new File(dir, entry.getName()); [EOL]         final OutputStream out = new FileOutputStream(target); [EOL]         IOUtils.copy(in, out); [EOL]         out.close(); [EOL]         result.put(entry.getName(), target); [EOL]     } [EOL]     in.close(); [EOL]     int lineSepLength = System.getProperty(\"line.separator\").length(); [EOL]     File t = (File) result.get(\"test1.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 72 + 4 * lineSepLength, t.length()); [EOL]     t = (File) result.get(\"test2.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 73 + 5 * lineSepLength, t.length()); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCP437FileRoundtripImplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, false); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testAddAsFirstExtraField() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 2, result.length); [EOL]     assertSame(u2, result[0]); [EOL]     assertSame(a, result[1]); [EOL]     assertEquals(\"length second pass\", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(u3, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertSame(a, result[2]); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     { [EOL]         final File file1 = getFile(\"test1.xml\"); [EOL]         final File file2 = getFile(\"test2.xml\"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]         out.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is); [EOL]     Map result = new HashMap(); [EOL]     ArchiveEntry entry = null; [EOL]     while ((entry = in.getNextEntry()) != null) { [EOL]         File target = new File(dir, entry.getName()); [EOL]         final OutputStream out = new FileOutputStream(target); [EOL]         IOUtils.copy(in, out); [EOL]         out.close(); [EOL]         result.put(entry.getName(), target); [EOL]     } [EOL]     in.close(); [EOL]     int lineSepLength = System.getProperty(\"line.separator\").length(); [EOL]     File t = (File) result.get(\"test1.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 72 + 4 * lineSepLength, t.length()); [EOL]     t = (File) result.get(\"test2.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 73 + 5 * lineSepLength, t.length()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testEquals() { [EOL]     ZipShort zs = new ZipShort(0x1234); [EOL]     ZipShort zs2 = new ZipShort(0x1234); [EOL]     ZipShort zs3 = new ZipShort(0x5678); [EOL]     assertTrue(\"reflexive\", zs.equals(zs)); [EOL]     assertTrue(\"works\", zs.equals(zs2)); [EOL]     assertTrue(\"works, part two\", !zs.equals(zs3)); [EOL]     assertTrue(\"symmetric\", zs2.equals(zs)); [EOL]     assertTrue(\"null handling\", !zs.equals(null)); [EOL]     assertTrue(\"non ZipShort handling\", !zs.equals(new Integer(0x1234))); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testEquals() { [EOL]     ZipLong zl = new ZipLong(0x12345678); [EOL]     ZipLong zl2 = new ZipLong(0x12345678); [EOL]     ZipLong zl3 = new ZipLong(0x87654321); [EOL]     assertTrue(\"reflexive\", zl.equals(zl)); [EOL]     assertTrue(\"works\", zl.equals(zl2)); [EOL]     assertTrue(\"works, part two\", !zl.equals(zl3)); [EOL]     assertTrue(\"symmetric\", zl2.equals(zl)); [EOL]     assertTrue(\"null handling\", !zl.equals(null)); [EOL]     assertTrue(\"non ZipLong handling\", !zl.equals(new Integer(0x1234))); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCP437FileRoundtripImplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(CP437, false, false); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testClone() { [EOL]     ZipShort s1 = new ZipShort(42); [EOL]     ZipShort s2 = (ZipShort) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.getValue(), s2.getValue()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testDeleteFromZip() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.zip\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         temp = File.createTempFile(\"test\", \".zip\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testAddDeleteAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.delete(\"blub\"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"bla/test5.xml\"); [EOL]     expected.add(\"bla/blubber/test6.xml\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test4.xml\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     { [EOL]         final File file1 = getFile(\"test1.xml\"); [EOL]         final File file2 = getFile(\"test2.xml\"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]         out.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is); [EOL]     Map result = new HashMap(); [EOL]     ArchiveEntry entry = null; [EOL]     while ((entry = in.getNextEntry()) != null) { [EOL]         File target = new File(dir, entry.getName()); [EOL]         final OutputStream out = new FileOutputStream(target); [EOL]         IOUtils.copy(in, out); [EOL]         out.close(); [EOL]         result.put(entry.getName(), target); [EOL]     } [EOL]     in.close(); [EOL]     int lineSepLength = System.getProperty(\"line.separator\").length(); [EOL]     File t = (File) result.get(\"test1.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 72 + 4 * lineSepLength, t.length()); [EOL]     t = (File) result.get(\"test2.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 73 + 5 * lineSepLength, t.length()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     { [EOL]         final File file1 = getFile(\"test1.xml\"); [EOL]         final File file2 = getFile(\"test2.xml\"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]         out.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is); [EOL]     Map result = new HashMap(); [EOL]     ArchiveEntry entry = null; [EOL]     while ((entry = in.getNextEntry()) != null) { [EOL]         File target = new File(dir, entry.getName()); [EOL]         final OutputStream out = new FileOutputStream(target); [EOL]         IOUtils.copy(in, out); [EOL]         out.close(); [EOL]         result.put(entry.getName(), target); [EOL]     } [EOL]     in.close(); [EOL]     int lineSepLength = System.getProperty(\"line.separator\").length(); [EOL]     File t = (File) result.get(\"test1.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 72 + 4 * lineSepLength, t.length()); [EOL]     t = (File) result.get(\"test2.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 73 + 5 * lineSepLength, t.length()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testClone() { [EOL]     AsiExtraField s1 = new AsiExtraField(); [EOL]     s1.setUserId(42); [EOL]     s1.setGroupId(12); [EOL]     s1.setLinkedFile(\"foo\"); [EOL]     s1.setMode(0644); [EOL]     s1.setDirectory(true); [EOL]     AsiExtraField s2 = (AsiExtraField) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1.getUserId(), s2.getUserId()); [EOL]     assertEquals(s1.getGroupId(), s2.getGroupId()); [EOL]     assertEquals(s1.getLinkedFile(), s2.getLinkedFile()); [EOL]     assertEquals(s1.getMode(), s2.getMode()); [EOL]     assertEquals(s1.isDirectory(), s2.isDirectory()); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeleteFromJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         changes.delete(\"META-INF\"); [EOL]         changes.delete(\".classpath\"); [EOL]         changes.delete(\".project\"); [EOL]         final File input = getFile(\"bla.jar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]         temp = new File(dir, \"bla.jar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testClone() { [EOL]     AsiExtraField s1 = new AsiExtraField(); [EOL]     s1.setUserId(42); [EOL]     s1.setGroupId(12); [EOL]     s1.setLinkedFile(\"foo\"); [EOL]     s1.setMode(0644); [EOL]     s1.setDirectory(true); [EOL]     AsiExtraField s2 = (AsiExtraField) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1.getUserId(), s2.getUserId()); [EOL]     assertEquals(s1.getGroupId(), s2.getGroupId()); [EOL]     assertEquals(s1.getLinkedFile(), s2.getLinkedFile()); [EOL]     assertEquals(s1.getMode(), s2.getMode()); [EOL]     assertEquals(s1.isDirectory(), s2.isDirectory()); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testClone() { [EOL]     ZipShort s1 = new ZipShort(42); [EOL]     ZipShort s2 = (ZipShort) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1, s2); [EOL]     assertEquals(s1.getValue(), s2.getValue()); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testSign() { [EOL]     ZipLong zl = new ZipLong(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x00000000FFFFFFFFl, zl.getValue()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeleteFromZip() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.zip\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         temp = File.createTempFile(\"test\", \".zip\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeleteFromAndAddToZip() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.delete(\"testdata/test1.xml\"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"blub/test.txt\"); [EOL]     expected.add(\"bla/test5.xml\"); [EOL]     expected.add(\"bla/blubber/test6.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test4.xml\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testDeleteFromJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         changes.delete(\"META-INF\"); [EOL]         changes.delete(\".classpath\"); [EOL]         changes.delete(\".project\"); [EOL]         final File input = getFile(\"bla.jar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]         temp = new File(dir, \"bla.jar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testJarUnarchive() throws Exception { [EOL]     final File input = getFile(\"bla.jar\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]     ZipArchiveEntry entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     File o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     OutputStream out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     entry = (ZipArchiveEntry) in.getNextEntry(); [EOL]     o = new File(dir, entry.getName()); [EOL]     o.getParentFile().mkdirs(); [EOL]     out = new FileOutputStream(o); [EOL]     IOUtils.copy(in, out); [EOL]     out.close(); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testDeleteFromJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         changes.delete(\"META-INF\"); [EOL]         changes.delete(\".classpath\"); [EOL]         changes.delete(\".project\"); [EOL]         final File input = getFile(\"bla.jar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]         temp = new File(dir, \"bla.jar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     { [EOL]         final File file1 = getFile(\"test1.xml\"); [EOL]         final File file2 = getFile(\"test2.xml\"); [EOL]         final OutputStream out = new FileOutputStream(output); [EOL]         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]         IOUtils.copy(new FileInputStream(file1), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]         IOUtils.copy(new FileInputStream(file2), os); [EOL]         os.closeArchiveEntry(); [EOL]         os.close(); [EOL]         out.close(); [EOL]     } [EOL]     final File input = output; [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is); [EOL]     Map result = new HashMap(); [EOL]     ArchiveEntry entry = null; [EOL]     while ((entry = in.getNextEntry()) != null) { [EOL]         File target = new File(dir, entry.getName()); [EOL]         final OutputStream out = new FileOutputStream(target); [EOL]         IOUtils.copy(in, out); [EOL]         out.close(); [EOL]         result.put(entry.getName(), target); [EOL]     } [EOL]     in.close(); [EOL]     int lineSepLength = System.getProperty(\"line.separator\").length(); [EOL]     File t = (File) result.get(\"test1.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 72 + 4 * lineSepLength, t.length()); [EOL]     t = (File) result.get(\"test2.xml\"); [EOL]     assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists()); [EOL]     assertEquals(\"length of \" + t.getAbsolutePath(), 73 + 5 * lineSepLength, t.length()); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeleteFromAndAddToZip() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.delete(\"testdata/test1.xml\"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"blub/test.txt\"); [EOL]     expected.add(\"bla/test5.xml\"); [EOL]     expected.add(\"bla/blubber/test6.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test4.xml\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeleteFromJar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         changes.delete(\"META-INF\"); [EOL]         changes.delete(\".classpath\"); [EOL]         changes.delete(\".project\"); [EOL]         final File input = getFile(\"bla.jar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is); [EOL]         temp = new File(dir, \"bla.jar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromAndAddToTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\"); [EOL]         entry.setModTime(0); [EOL]         entry.setSize(file1.length()); [EOL]         entry.setUserId(0); [EOL]         entry.setGroupId(0); [EOL]         entry.setUserName(\"avalon\"); [EOL]         entry.setGroupName(\"excalibur\"); [EOL]         entry.setMode(0100000); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     expected.add(\"testdata/test.txt\"); [EOL]     final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", new FileInputStream(temp)); [EOL]     this.checkArchiveContent(in, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testNioCp1252Encoding() throws IOException { [EOL]     byte[] b = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, (byte) 0x80, (byte) 0x82, (byte) 0x83, (byte) 0x84, (byte) 0x85, (byte) 0x86, (byte) 0x87, (byte) 0x88, (byte) 0x89, (byte) 0x8A, (byte) 0x8B, (byte) 0x8C, (byte) 0x8E, (byte) 0x91, (byte) 0x92, (byte) 0x93, (byte) 0x94, (byte) 0x95, (byte) 0x96, (byte) 0x97, (byte) 0x98, (byte) 0x99, (byte) 0x9A, (byte) 0x9B, (byte) 0x9C, (byte) 0x9E, (byte) 0x9F, (byte) 0xA0, (byte) 0xA1, (byte) 0xA2, (byte) 0xA3, (byte) 0xA4, (byte) 0xA5, (byte) 0xA6, (byte) 0xA7, (byte) 0xA8, (byte) 0xA9, (byte) 0xAA, (byte) 0xAB, (byte) 0xAC, (byte) 0xAD, (byte) 0xAE, (byte) 0xAF, (byte) 0xB0, (byte) 0xB1, (byte) 0xB2, (byte) 0xB3, (byte) 0xB4, (byte) 0xB5, (byte) 0xB6, (byte) 0xB7, (byte) 0xB8, (byte) 0xB9, (byte) 0xBA, (byte) 0xBB, (byte) 0xBC, (byte) 0xBD, (byte) 0xBE, (byte) 0xBF, (byte) 0xC0, (byte) 0xC1, (byte) 0xC2, (byte) 0xC3, (byte) 0xC4, (byte) 0xC5, (byte) 0xC6, (byte) 0xC7, (byte) 0xC8, (byte) 0xC9, (byte) 0xCA, (byte) 0xCB, (byte) 0xCC, (byte) 0xCD, (byte) 0xCE, (byte) 0xCF, (byte) 0xD0, (byte) 0xD1, (byte) 0xD2, (byte) 0xD3, (byte) 0xD4, (byte) 0xD5, (byte) 0xD6, (byte) 0xD7, (byte) 0xD8, (byte) 0xD9, (byte) 0xDA, (byte) 0xDB, (byte) 0xDC, (byte) 0xDD, (byte) 0xDE, (byte) 0xDF, (byte) 0xE0, (byte) 0xE1, (byte) 0xE2, (byte) 0xE3, (byte) 0xE4, (byte) 0xE5, (byte) 0xE6, (byte) 0xE7, (byte) 0xE8, (byte) 0xE9, (byte) 0xEA, (byte) 0xEB, (byte) 0xEC, (byte) 0xED, (byte) 0xEE, (byte) 0xEF, (byte) 0xF0, (byte) 0xF1, (byte) 0xF2, (byte) 0xF3, (byte) 0xF4, (byte) 0xF5, (byte) 0xF6, (byte) 0xF7, (byte) 0xF8, (byte) 0xF9, (byte) 0xFA, (byte) 0xFB, (byte) 0xFC, (byte) 0xFD, (byte) 0xFE, (byte) 0xFF }; [EOL]     doSimpleEncodingTest(\"Cp1252\", b); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testSign() { [EOL]     ZipShort zs = new ZipShort(new byte[] { (byte) 0xFF, (byte) 0xFF }); [EOL]     assertEquals(0x0000FFFF, zs.getValue()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testAddAsFirstExtraField() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     byte[] data1 = ze.getExtra(); [EOL]     UnrecognizedExtraField u2 = new UnrecognizedExtraField(); [EOL]     u2.setHeaderId(new ZipShort(1)); [EOL]     u2.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u2); [EOL]     byte[] data2 = ze.getExtra(); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 2, result.length); [EOL]     assertSame(u2, result[0]); [EOL]     assertSame(a, result[1]); [EOL]     assertEquals(\"length second pass\", data1.length + 1, data2.length); [EOL]     UnrecognizedExtraField u3 = new UnrecognizedExtraField(); [EOL]     u3.setHeaderId(new ZipShort(2)); [EOL]     u3.setLocalFileDataData(new byte[] { 1 }); [EOL]     ze.addAsFirstExtraField(u3); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(u3, result[0]); [EOL]     assertSame(u2, result[1]); [EOL]     assertSame(a, result[2]); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testReparse() throws Exception { [EOL]     byte[] data = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length plain file\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"plain file, no link\", !a.isLink()); [EOL]     assertTrue(\"plain file, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid plain file\", 5, a.getUserId()); [EOL]     assertEquals(\"gid plain file\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length link\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"link, is link\", a.isLink()); [EOL]     assertTrue(\"link, no dir\", !a.isDirectory()); [EOL]     assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid link\", 5, a.getUserId()); [EOL]     assertEquals(\"gid link\", 6, a.getGroupId()); [EOL]     assertEquals(\"test\", a.getLinkedFile()); [EOL]     data = new byte[] { (byte) 0x8E, 0x01, (byte) 0xBF, (byte) 0x0E, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     a.parseFromLocalFileData(data, 0, data.length); [EOL]     assertEquals(\"length dir\", data.length, a.getLocalFileDataLength().getValue()); [EOL]     assertTrue(\"dir, no link\", !a.isLink()); [EOL]     assertTrue(\"dir, is dir\", a.isDirectory()); [EOL]     assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode()); [EOL]     assertEquals(\"uid dir\", 5, a.getUserId()); [EOL]     assertEquals(\"gid dir\", 6, a.getGroupId()); [EOL]     data = new byte[] { 0, 0, 0, 0, 0123, (byte) 0x40, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     a = new AsiExtraField(); [EOL]     try { [EOL]         a.parseFromLocalFileData(data, 0, data.length); [EOL]         fail(\"should raise bad CRC exception\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"bad CRC checksum 0 instead of ebf018e\", e.getMessage()); [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testClone() { [EOL]     AsiExtraField s1 = new AsiExtraField(); [EOL]     s1.setUserId(42); [EOL]     s1.setGroupId(12); [EOL]     s1.setLinkedFile(\"foo\"); [EOL]     s1.setMode(0644); [EOL]     s1.setDirectory(true); [EOL]     AsiExtraField s2 = (AsiExtraField) s1.clone(); [EOL]     assertNotSame(s1, s2); [EOL]     assertEquals(s1.getUserId(), s2.getUserId()); [EOL]     assertEquals(s1.getGroupId(), s2.getGroupId()); [EOL]     assertEquals(s1.getLinkedFile(), s2.getLinkedFile()); [EOL]     assertEquals(s1.getMode(), s2.getMode()); [EOL]     assertEquals(s1.isDirectory(), s2.isDirectory()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testReadWinZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-winzip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, null, true); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromAndAddToZip() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.delete(\"testdata/test1.xml\"); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"blub/test.txt\"); [EOL]     expected.add(\"bla/test5.xml\"); [EOL]     expected.add(\"bla/blubber/test6.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test4.xml\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testJarMarker() throws IOException { [EOL]     File testArchive = File.createTempFile(\"jar-aostest\", \".jar\"); [EOL]     JarArchiveOutputStream out = null; [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         out = new JarArchiveOutputStream(new FileOutputStream(testArchive)); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"foo/\")); [EOL]         out.closeEntry(); [EOL]         out.putArchiveEntry(new ZipArchiveEntry(\"bar/\")); [EOL]         out.closeEntry(); [EOL]         out.close(); [EOL]         out = null; [EOL]         zf = new ZipFile(testArchive); [EOL]         ZipArchiveEntry ze = zf.getEntry(\"foo/\"); [EOL]         assertNotNull(ze); [EOL]         ZipExtraField[] fes = ze.getExtraFields(); [EOL]         assertEquals(1, fes.length); [EOL]         assertTrue(fes[0] instanceof JarMarker); [EOL]         ze = zf.getEntry(\"bar/\"); [EOL]         assertNotNull(ze); [EOL]         fes = ze.getExtraFields(); [EOL]         assertEquals(0, fes.length); [EOL]     } finally { [EOL]         if (out != null) { [EOL]             try { [EOL]                 out.close(); [EOL]             } catch (IOException e) { [EOL]             } [EOL]         } [EOL]         ZipFile.closeQuietly(zf); [EOL]         if (testArchive.exists()) { [EOL]             testArchive.delete(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testEquals() { [EOL]     ZipShort zs = new ZipShort(0x1234); [EOL]     ZipShort zs2 = new ZipShort(0x1234); [EOL]     ZipShort zs3 = new ZipShort(0x5678); [EOL]     assertTrue(\"reflexive\", zs.equals(zs)); [EOL]     assertTrue(\"works\", zs.equals(zs2)); [EOL]     assertTrue(\"works, part two\", !zs.equals(zs3)); [EOL]     assertTrue(\"symmetric\", zs2.equals(zs)); [EOL]     assertTrue(\"null handling\", !zs.equals(null)); [EOL]     assertTrue(\"non ZipShort handling\", !zs.equals(new Integer(0x1234))); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testModes() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     assertEquals(\"plain file\", 0100123, a.getMode()); [EOL]     a.setDirectory(true); [EOL]     assertEquals(\"directory\", 040123, a.getMode()); [EOL]     a.setLinkedFile(\"test\"); [EOL]     assertEquals(\"symbolic link\", 0120123, a.getMode()); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testParse() throws Exception { [EOL]     ZipExtraField[] ze = ExtraFieldUtils.parse(data); [EOL]     assertEquals(\"number of fields\", 2, ze.length); [EOL]     assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField); [EOL]     assertEquals(\"mode field 1\", 040755, ((AsiExtraField) ze[0]).getMode()); [EOL]     assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField); [EOL]     assertEquals(\"data length field 2\", 1, ze[1].getLocalFileDataLength().getValue()); [EOL]     byte[] data2 = new byte[data.length - 1]; [EOL]     System.arraycopy(data, 0, data2, 0, data2.length); [EOL]     try { [EOL]         ExtraFieldUtils.parse(data2); [EOL]         fail(\"data should be invalid\"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(\"message\", \"data starting at \" + (4 + aLocal.length) + \" is in unknown format\", e.getMessage()); [EOL]     } [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testRead7ZipArchive() throws IOException, URISyntaxException { [EOL]     URL zip = getClass().getResource(\"/utf8-7zip-test.zip\"); [EOL]     File archive = new File(new URI(zip.toString())); [EOL]     ZipFile zf = null; [EOL]     try { [EOL]         zf = new ZipFile(archive, CP437, false); [EOL]         assertNotNull(zf.getEntry(ASCII_TXT)); [EOL]         assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT)); [EOL]         assertNotNull(zf.getEntry(OIL_BARREL_TXT)); [EOL]     } finally { [EOL]         ZipFile.closeQuietly(zf); [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testTarArchiveLongNameCreation() throws Exception { [EOL]     String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\"; [EOL]     byte[] bytes = name.getBytes(); [EOL]     assertEquals(bytes.length, 99); [EOL]     final File output = new File(dir, \"bla.tar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out); [EOL]     final TarArchiveEntry entry = new TarArchiveEntry(name); [EOL]     entry.setModTime(0); [EOL]     entry.setSize(file1.length()); [EOL]     entry.setUserId(0); [EOL]     entry.setGroupId(0); [EOL]     entry.setUserName(\"avalon\"); [EOL]     entry.setGroupName(\"excalibur\"); [EOL]     entry.setMode(0100000); [EOL]     os.putArchiveEntry(entry); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL]     ArchiveOutputStream os2 = null; [EOL]     try { [EOL]         String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\"; [EOL]         final File output2 = new File(dir, \"bla.tar\"); [EOL]         final OutputStream out2 = new FileOutputStream(output2); [EOL]         os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2); [EOL]         final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName); [EOL]         entry2.setModTime(0); [EOL]         entry2.setSize(file1.length()); [EOL]         entry2.setUserId(0); [EOL]         entry2.setGroupId(0); [EOL]         entry2.setUserName(\"avalon\"); [EOL]         entry2.setGroupName(\"excalibur\"); [EOL]         entry2.setMode(0100000); [EOL]         os.putArchiveEntry(entry); [EOL]         IOUtils.copy(new FileInputStream(file1), os2); [EOL]     } catch (IOException e) { [EOL]         assertTrue(true); [EOL]     } finally { [EOL]         if (os2 != null) { [EOL]             os2.closeArchiveEntry(); [EOL]         } [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testFileSystemRoot() { [EOL]     TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]     assertEquals(\"/\", t.getName()); [EOL] }
public void testASCIIFileRoundtripExplicitUnicodeExtra() throws IOException { [EOL]     testFileRoundtrip(US_ASCII, false, true); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testExtraFieldMerging() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setDirectory(true); [EOL]     a.setMode(0755); [EOL]     UnrecognizedExtraField u = new UnrecognizedExtraField(); [EOL]     u.setHeaderId(new ZipShort(1)); [EOL]     u.setLocalFileDataData(new byte[0]); [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\"); [EOL]     ze.setExtraFields(new ZipExtraField[] { a, u }); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 1, 0, 1, 0, 127 }); [EOL]     ZipExtraField[] result = ze.getExtraFields(); [EOL]     assertEquals(\"first pass\", 2, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(1), result[1].getHeaderId()); [EOL]     assertEquals(new ZipShort(0), result[1].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength()); [EOL]     ze.setCentralDirectoryExtra(new byte[] { 2, 0, 0, 0 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"second pass\", 3, result.length); [EOL]     ze.setExtra(new byte[] { 2, 0, 1, 0, 127 }); [EOL]     result = ze.getExtraFields(); [EOL]     assertEquals(\"third pass\", 3, result.length); [EOL]     assertSame(a, result[0]); [EOL]     assertEquals(new ZipShort(2), result[2].getHeaderId()); [EOL]     assertEquals(new ZipShort(1), result[2].getLocalFileDataLength()); [EOL]     assertEquals(new ZipShort(0), result[2].getCentralDirectoryLength()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDetection() throws Exception { [EOL]     final ArchiveStreamFactory factory = new ArchiveStreamFactory(); [EOL]     final ArchiveInputStream ar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); [EOL]     assertNotNull(ar); [EOL]     assertTrue(ar instanceof ArArchiveInputStream); [EOL]     final ArchiveInputStream tar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile())))); [EOL]     assertNotNull(tar); [EOL]     assertTrue(tar instanceof TarArchiveInputStream); [EOL]     final ArchiveInputStream zip = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile())))); [EOL]     assertNotNull(zip); [EOL]     assertTrue(zip instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream jar = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile())))); [EOL]     assertNotNull(jar); [EOL]     assertTrue(jar instanceof ZipArchiveInputStream); [EOL]     final ArchiveInputStream cpio = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile())))); [EOL]     assertNotNull(cpio); [EOL]     assertTrue(cpio instanceof CpioArchiveInputStream); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzip2Unarchive() throws Exception { [EOL]     final File input = getFile(\"bla.txt.bz2\"); [EOL]     final File output = new File(dir, \"bla.txt\"); [EOL]     final InputStream is = new FileInputStream(input); [EOL]     final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is); [EOL]     IOUtils.copy(in, new FileOutputStream(output)); [EOL]     in.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testContent() { [EOL]     AsiExtraField a = new AsiExtraField(); [EOL]     a.setMode(0123); [EOL]     a.setUserId(5); [EOL]     a.setGroupId(6); [EOL]     byte[] b = a.getLocalFileDataData(); [EOL]     byte[] expect = { (byte) 0xC6, 0x02, 0x78, (byte) 0xB6, 0123, (byte) 0x80, 0, 0, 0, 0, 5, 0, 6, 0 }; [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL]     a.setLinkedFile(\"test\"); [EOL]     expect = new byte[] { 0x75, (byte) 0x8E, 0x41, (byte) 0xFD, 0123, (byte) 0xA0, 4, 0, 0, 0, 5, 0, 6, 0, (byte) 't', (byte) 'e', (byte) 's', (byte) 't' }; [EOL]     b = a.getLocalFileDataData(); [EOL]     assertEquals(\"no link\", expect.length, b.length); [EOL]     for (int i = 0; i < expect.length; i++) { [EOL]         assertEquals(\"no link, byte \" + i, expect[i], b[i]); [EOL]     } [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testCpioArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.cpio\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeleteFromTar() throws Exception { [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File temp = null; [EOL]     try { [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"test2.xml\"); [EOL]         final File input = getFile(\"bla.tar\"); [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is); [EOL]         temp = new File(dir, \"bla.tar\"); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"test1.xml\"); [EOL]     this.checkArchiveContent(temp, expected); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testCpioUnarchive() throws Exception { [EOL]     StringBuffer expected = new StringBuffer(); [EOL]     expected.append(\"./test1.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>./test2.xml<?xml version=\\"1.0\\"?>\n\"); [EOL]     expected.append(\"<empty/>\n\"); [EOL]     CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\"))); [EOL]     CpioArchiveEntry entry = null; [EOL]     StringBuffer result = new StringBuffer(); [EOL]     while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) { [EOL]         result.append(entry.getName()); [EOL]         int tmp; [EOL]         while ((tmp = in.read()) != -1) { [EOL]             result.append((char) tmp); [EOL]         } [EOL]     } [EOL]     in.close(); [EOL]     assertEquals(result.toString(), expected.toString()); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }
public void testZipLong() throws Exception { [EOL]     ZipLong test = ZipUtil.toDosTime(time); [EOL]     assertEquals(test.getValue(), zl.getValue()); [EOL] }
public void testTarFileWithFSRoot() throws IOException { [EOL]     File f = File.createTempFile(\"taetest\", \".tar\"); [EOL]     f.deleteOnExit(); [EOL]     TarArchiveOutputStream tout = null; [EOL]     TarArchiveInputStream tin = null; [EOL]     try { [EOL]         tout = new TarArchiveOutputStream(new FileOutputStream(f)); [EOL]         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT)); [EOL]         tout.putNextEntry(t); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\")); [EOL]         t.setSize(6); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'h', 'e', 'l', 'l', 'o', ' ' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\").getAbsolutePath()); [EOL]         t.setSize(5); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { 'w', 'o', 'r', 'l', 'd' }); [EOL]         tout.closeEntry(); [EOL]         t = new TarArchiveEntry(\"dummy\"); [EOL]         t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath()); [EOL]         t.setSize(1); [EOL]         tout.putNextEntry(t); [EOL]         tout.write(new byte[] { '!' }); [EOL]         tout.closeEntry(); [EOL]         tout.close(); [EOL]         tout = null; [EOL]         tin = new TarArchiveInputStream(new FileInputStream(f)); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"/\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"foo.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"bar.txt\", t.getName()); [EOL]         t = tin.getNextTarEntry(); [EOL]         assertNotNull(t); [EOL]         assertEquals(\"baz.txt\", t.getName()); [EOL]     } finally { [EOL]         if (tin != null) { [EOL]             tin.close(); [EOL]         } [EOL]         if (tout != null) { [EOL]             tout.close(); [EOL]         } [EOL]     } [EOL] }
public void testArArchiveCreation() throws Exception { [EOL]     final File output = new File(dir, \"bla.ar\"); [EOL]     final File file1 = getFile(\"test1.xml\"); [EOL]     final File file2 = getFile(\"test2.xml\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length())); [EOL]     IOUtils.copy(new FileInputStream(file1), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length())); [EOL]     IOUtils.copy(new FileInputStream(file2), os); [EOL]     os.closeArchiveEntry(); [EOL]     os.close(); [EOL] }
public void testDeletePlusAdd() throws Exception { [EOL]     File input = this.createArchive(\"zip\"); [EOL]     ArchiveOutputStream out = null; [EOL]     ArchiveInputStream ais = null; [EOL]     File result = File.createTempFile(\"test\", \".zip\"); [EOL]     try { [EOL]         final InputStream is = new FileInputStream(input); [EOL]         ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is); [EOL]         out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result)); [EOL]         ChangeSet changes = new ChangeSet(); [EOL]         changes.delete(\"bla\"); [EOL]         final File file1 = getFile(\"test.txt\"); [EOL]         ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\"); [EOL]         changes.add(entry, new FileInputStream(file1)); [EOL]         changes.perform(ais, out); [EOL]     } finally { [EOL]         if (out != null) [EOL]             out.close(); [EOL]         if (ais != null) [EOL]             ais.close(); [EOL]     } [EOL]     List expected = new ArrayList(); [EOL]     expected.add(\"testdata/test1.xml\"); [EOL]     expected.add(\"testdata/test2.xml\"); [EOL]     expected.add(\"test/test3.xml\"); [EOL]     expected.add(\"test.txt\"); [EOL]     expected.add(\"something/bla\"); [EOL]     expected.add(\"bla/test.txt\"); [EOL]     expected.add(\"test with spaces.txt\"); [EOL]     this.checkArchiveContent(result, expected); [EOL] }
public void testUnixMode() { [EOL]     ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0755); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0755, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0444); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0444, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(1, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze = new ZipArchiveEntry(\"foo/\"); [EOL]     assertEquals(0, ze.getPlatform()); [EOL]     ze.setUnixMode(0777); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0777, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x10, ze.getExternalAttributes() & 0xFFFF); [EOL]     ze.setUnixMode(0577); [EOL]     assertEquals(3, ze.getPlatform()); [EOL]     assertEquals(0577, (ze.getExternalAttributes() >> 16) & 0xFFFF); [EOL]     assertEquals(0x11, ze.getExternalAttributes() & 0xFFFF); [EOL] }
public void testBzipCreation() throws Exception { [EOL]     final File input = getFile(\"test.txt\"); [EOL]     final File output = new File(dir, \"test.txt.bz2\"); [EOL]     final OutputStream out = new FileOutputStream(output); [EOL]     final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out); [EOL]     IOUtils.copy(new FileInputStream(input), cos); [EOL]     cos.close(); [EOL] }